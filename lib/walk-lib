#!/bin/bash

[[ ${walk_lib_loaded:-f} == t ]] && return 0
walk_lib_loaded=t

walk_split_choice() {
  local remainder
  key=${choice%% *}
  code=${choice#$key }
  code=${code%% *}
  remainder=${choice##$key $code }
  if [[ "$remainder" != "$choice" ]]; then
    message=$remainder
  else
    message=$code
  fi
}

walk_menu() {
  local choice key code message prompt=${prompt:-Choose:} too_many=f
  filter_mode=${filter_mode:-f}

  for choice in "${choices[@]}"; do
    walk_split_choice
    if [[ "$key" != ? ]]; then
      key=/
    fi
    echo "$key  $message"
  done

  if [[ $too_many == t ]]; then
    echo "Warning: too many options found. If you want to select an option with a / label, then use the / command to filter down the options first."
  fi

  local input

  response=
  if [[ "$walk_filter" ]]; then
    echo "${CYAN}Current filter:${RESET} $walk_filter"
  fi
  if [[ $filter_mode == t ]]; then
    prompt="Filtering results (press enter or space to accept filter): "
    read -sp "$prompt" -n1 input || return 1
    if [[ $clear_screen == t ]]; then
      echo -n "$CLEAR_SCREEN$prompt"
    fi
    if [[ "$input" == $'\x7f' ]]; then
      walk_filter=${walk_filter%?}
      echo "$walk_filter"
    elif [[ "$input" ]]; then
      walk_filter+=$input
      echo "$walk_filter"
    else
      response=accept
      echo "Accept filter"
    fi
  else
    read -sp "$prompt" -n1 input || return 1
    if [[ $clear_screen == t ]]; then
      echo -n "$CLEAR_SCREEN$prompt"
    fi
    for choice in "${choices[@]}" "${hidden_choices[@]}"; do
      walk_split_choice
      if [[ $key == $input || $key == enter && $input == '' ]]; then
        response=$code
        walk_filter=
        break
      fi
    done
    if [[ "$response" ]]; then
      echo "${message%% *}"
    else
      echo
    fi
  fi

}
 
walk_add_choice() {
  local hidden=${hidden:-f} key=$1 
  shift 1
  local remaining=$*
  local code=${remaining%% *}
  if [[ ! "${code_set[$code]:-}" ]]; then
    if [[ $hidden == f ]]; then
      choices+=( "$key $remaining" )
    else
      hidden_choices+=( "$key $remaining" )
    fi
    code_set[$code]=1
  fi
}

walk_add_dirs() {
  local dirs d extra current_selection=$1
  dirs=$(find -L $current_selection -mindepth 1 -maxdepth 1 -type d -not -name ".*" | sort -g) || return 1
  if [[ "$dirs" ]]; then
    for d in $dirs; do
      extra=
      if [[ -L $d ]]; then
        local r=$(realpath $d)
        r=${r#/work/*/}
        extra+=" -> $r"
      fi
      if [[ -f $d/.member ]]; then
        local member="$(<$d/.member)"
        if (( ${#member} > 60 )); then
          extra+=" ${member:0:60}..."
        else
          extra+=" ${member}"
        fi
      fi
      if [[ "${walk_filter:-}" && "${d##*/}$extra" != *"$walk_filter"* ]]; then
        continue
      fi
      (( i++ ))
      walk_add_choice "$i" "${d#./}" "${d##*/}$extra"
    done
  fi
}

walk_init() {
  show_selection() { :; }
  adjust_choices() { :; }
  handle_walk_responses() { :; }
}

walk_execute() {
  begin_function
    local current_selection=$1 \
      hidden_choices choices \
      choice path i real_stack=() \
      filter_mode=f walk_filter= \
      prompt=${prompt:-Choose: } \
      clear_screen=${clear_screen:-t} \

    local -A code_set
    if [[ $clear_screen == t ]]; then
      echo -n "$CLEAR_SCREEN"
    fi
    begin_while true; doo

      show_selection || fail

      code_set=()
      hidden_choices=(
        "enter accept"
        "q quit"
        "? help"
        "/ filter"
        )
      choices=()
      i=0
      adjust_choices || fail

      walk_menu || break
      if [[ $filter_mode == f ]]; then
        if [[ "$response" == help ]]; then
          echo "Press one of the characters in the menu to select one of the choices, enter or space to accept the choice, or q to quit/abort this command."
          echo "You can also use / to enter filter mode and narrow down results."
          echo "Using / again after a filter is applied will remove the filter."
        elif [[ "$response" == quit ]]; then
          return 1
        elif [[ "$response" == accept ]]; then
          break
        elif [[ "$response" == filter ]]; then
          if [[ "$walk_filter" ]]; then
            echo "Removed filter."
            walk_filter=
          else
            filter_mode=t
          fi
        else
          local invalid_response=f
          handle_walk_responses || fail
          if [[ $invalid_response == t ]]; then
            echo "Invalid selection, try again."
            continue
          fi
          if [[ $response == accept ]]; then
            break
          fi
        fi
      else # filter_mode == t
        if [[ "$response" == accept ]]; then
          filter_mode=f
        fi
      fi

    end_while
    result=$current_selection
  end_function
  handle_return
}

