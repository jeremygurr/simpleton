#!/bin/bash

type -t dna_clone >/dev/null && return 0

dna_copy() {

local from=$1; shift
local to=$1

if [[ ${to} != ${to%/} ]]; then
  to=$to${from##*/}
fi

local real_from=$(realpath $from)
to=$(realpath $to)

trace $log_info "Copying ${real_from##*/work/} to ${to##*/work/}"
begin_function

  if [[ ! -f $from/cube-context ]]; then
    incomplete "Don't know how to copy non-cubes yet"
  fi

  if [[ -L $from ]]; then
    err "From cell ($from) is a link. It doesn't make sense to use this command on a link."
    err "Just use the cp command for this."
    fail1
  fi

  if [[ -e $to ]]; then
    err "Target already exists: $to"
    fail1
  fi

  local f
  maybe mkdir $to || fail
  begin_for f in $(find1 $from); doo
    case ${f#$from/} in
      lock|log|out|status|down|cell)
        trace $log_trace "Skipping $f"
      ;; 
      up)

        maybe mkdir $to/up || fail
        local dep dep_name group group_name

        begin_for group in $(find1 $from/up -name '*\?'); doo
          group_name=${group##*/}
        begin_for dep in $(find1 $group); doo
          dep_name=${dep##*/}
          to_cube=$to dna_copy_dep $dep $to/up/$group_name/$dep_name || fail
        end_for
        end_for

        begin_for dep in $(find1 $from/up -not -name '*\?'); doo
          dep_name=${dep##*/}
          to_cube=$to dna_copy_dep $dep $to/up/$dep_name || fail
        end_for

      ;;
      *)
        maybe cp -a $f $to/ || fail
      ;;
    esac
  end_for

end_function
handle_return

}

dna_copy_dep() {
local from=$1; shift
local to=$1
local to_cube_name=${to_cube##*/} 

if [[ -e $from/down/$to_cube_name ]]; then
  err "$from/down/$to_cube_name already exists"
  fail1
fi
if [[ -e $to ]]; then
  err "$to already exists"
  fail1
fi
maybe cp -a $dep $to || fail
maybe ln -s $to_cube $from/down/$to_cube_name || fail

return 0
}
