#!/usr/bin/env bash

type -t update_lib_loaded >/dev/null && return 0
update_lib_loaded=t

# inputs: 
#   upstream
prep_upstream() {
  local log_show_vars=^upstream
  begin_function_hi

    # down_fresh may be used by prep script to propagate freshness requirements to upstream
    down_fresh=$required_freshness

    # This may be overridden by upstream prep file to customize how failure of this upstream is handled
    handle_upstream_result() {
      if [[ $update_successful == f ]]; then
        log_error "Failed to update upstream cell $upstream"
      fi
    }

    # Don't inherit parent's freshness requirements, 
    #   only what upstream prep explicitly states
    # extra_dims includes dimensions that need to be promoted in upstream that don't
    #   exist in branch_dims
    fresh=$down_fresh required_freshness= default_freshness= extra_dims=

    local prep_function=up_${upstream_var}_prep
    if function_exists $prep_function; then
      log_debug "Executing upstream prep: $prep_function"
      $prep_function || fail
      setup_dep_defaults || fail
    fi

    if [[ ! -d $up_chosen_path ]]; then
      mkdir $up_chosen_path || fail
    fi
      
    chosen_target_link=$up_chosen_path/$upstream_name

  end_function
  handle_return
}

repair_update_upstream_choose_single() {
  begin_function
    if [[ ! -e $chosen ]]; then
      rm $chosen || succeed
      local up_name=${upstream##*/}
      link_choices || succeed
      repair_successful=t
    fi
  end_function
  handle_return
}

maybe_fix_choice() {
  local choice=$1
  begin_function
    if [[ ! -e "$choice" ]]; then
      local choice_target=$(realpath $choice) trunk_cell
      get_trunk_cell $choice_target || fail
      if [[ ! -e $trunk_cell ]]; then
        log_fatal "Invalid upstream link in $upstream/choices: $trunk_cell. Maybe try a clean build."
        fail1
      fi
      safe_link $trunk_cell $choice || fail
    fi
  end_function
  handle_return
}

update_upstream_choose_multi() {
  begin_function
    local anchor_dims=

    if [[ "$chosen" ]]; then
      if [[ -e "$chosen/.dna" ]]; then
        upstream_cell_link=$chosen
        cell_path=$(realpath $chosen)
        switch_context
        get_needs_update || fail
      else
        needs_update=t
      fi
      if [[ $needs_update == t ]]; then
        chosen=
      fi
    fi

    # This must be separate from the previous if block because chosen may have been unset in the
    #   previous block.
    if [[ ! "$chosen" ]]; then
      begin_for choice in "${choices[@]}"; doo
        maybe_fix_choice $choice || fail
        needs_update=
        cell_path=$(realpath $choice)
        switch_context
        get_needs_update || fail
        if [[ $needs_update == f ]]; then
          chosen=$choice
          break
        fi
      end_for
      if [[ ! "$chosen" ]]; then
        chosen=${choices[0]}
      fi
    fi

  end_function
  handle_return
}

# needs_update is guaranteed to be set after this completes successfully
# returns: chosen needs_update
update_upstream_choose() {

  local log_show_vars=^upstream
  begin_function_hi

    local choice original_choice= original_cell_path=$cell_path
    local choices=( $(find1 $upstream/choices -not -name ".*" | sort -g) ) || fail

    if [[ ! "${choices:-}" ]]; then
      log_fatal "No choices defined for upstream $upstream"
      fail1
    fi

    chosen=
    if [[ -e "$chosen_target_link" ]]; then
      chosen=$(readlink $chosen_target_link) || fail
      original_choice=$chosen
    fi

    needs_update=
    if (( ${#choices[*]} == 1 )); then
      chosen=$choices
      maybe_fix_choice $chosen || fail
    else # more than one choice available
      update_upstream_choose_multi
    fi

    if [[ ! -e $chosen_target_link ]]; then
      safe_link $chosen $chosen_target_link || fail
    fi
    upstream_cell_link=$chosen
    cell_path=$(realpath $chosen)
    anchor_dims= \
    switch_context
    get_needs_update || fail

    if [[ $needs_update == f ]]; then
      cell_path=$original_cell_path
      anchor_dims=$original_anchor_dims
      switch_context || fail
    fi

  end_function
  local log_return_vars=chosen
  handle_return

}

update_upstream_get_locks() {
  local log_show_vars=^upstream
  begin_function_hi

    local lock 
    local -r export_path=$upstream/chosen/export
    if [[ -d $export_path ]]; then

      local shared_locks=$(find1 $export_path -not -name ".*" -name "shared-lock-*" | sort -g) || fail
      begin_for lock in $shared_locks; doo
        write_lock=f \
          timeout=$lock_timeout \
          cell_lock $lock || fail
      end_for

      local exclusive_locks=$(find1 $export_path -not -name ".*" -name "lock-*" | sort -g) || fail
      begin_for lock in $exclusive_locks; doo
        write_lock=t \
          timeout=$lock_timeout \
          cell_lock $lock || fail
      end_for

    fi

  end_function
  handle_return
}

# inputs: 
#   upstream: a folder in .dna/up
update_upstream() {

  local required_freshness= fresh= \
    default_freshness= \
    risk_tolerance=$risk_tolerance \
    command_history=${command_history:-} \
    cell_path=${cell_path:-} \

  if [[ -e $upstream/.dna ]]; then
    log_fatal "update_upstream upstream field should be a path to a upstream spec, not a cell"
    fail1
  fi

  local log_show_vars=^upstream 
  begin_function_hi

    log_debug "Updating upstream ${upstream##*/.cyto/up/}"

    local needs_update= upstream_cell_link= \
      chosen= anchor_dims= \
      chosen_target_link \

    eval "$localize_dims" || fail

    prep_upstream || fail
    update_upstream_choose || fail

    if [[ "$needs_update" != f ]]; then

      local up_cell=$(realpath $chosen) || fail

      top_level_command=f \
      downstream_cell_name=${short_cell//\//_} \
      execute_command "$up_cell" update || fail

      if [[ $something_changed == t ]]; then
        previous_upstream_changed=t
      fi

      handle_upstream_result || fail

      if [[ $update_successful == f ]]; then
        break
      fi

    fi
    
    update_upstream_get_locks || fail

  end_function
  handle_return
}

# inputs:
#   up_chosen_path
#   upstream
#   upstream_name
load_upstream_vars() {
  begin_function

    if [[ -d "${up_chosen_path:-}" ]]; then

      update_successful=t
      local export_path=$upstream/export \
        out_path=$up_chosen_path/$upstream_name \
        prefix=${upstream##*/}_ \
        auto_load=() \
        dna_roots= \

      pass_thru=t \
      context_make=f \
      recursive=f \
      ignore_unknown=t \
      prefix= \
      make_or_load_dna_contents $out_path || fail

      if [[ -d $export_path ]]; then
        pass_thru=t \
        context_make=f \
        prefix= \
        make_or_load_dna_contents $export_path || fail
      fi

      prefix=
      execute_auto_loads "${auto_load[@]}" || fail

      if [[ $update_successful == f ]]; then
        break
      fi

    fi

  end_function

  if failed || [[ $update_successful == f ]]; then
    update_successful=f
  fi

  handle_return
}

update_upstreams() {
  local execute_update=${execute_update:-t}
  begin_function

    update_successful=t
    if [[ "${last_upstream_updated:-}" == "${up_path:-}" ]]; then
      succeed
    else
      last_upstream_updated=${up_path:-}
    fi

    if [[ -d "${up_path:-}" ]]; then

      local previous_upstream_changed=f upstream upstreams 
      local original_anchor_dims=${anchor_dims[*]}

      upstreams=$(find1 $up_path -not -name '.*' | sort -g) || fail
      # This will eventually be done in parallel
      begin_for upstream in $upstreams; doo

        local upstream_name=${upstream##*/} o
        split_ordinal upstream_name o upstream_name
        local upstream_var=${upstream_name//-/_} \
          orig_up_chosen_path=$up_chosen_path \

        if [[ $execute_update == t ]]; then
          update_upstream || fail
          if [[ $update_successful == f ]]; then
            break
          fi
        fi

        up_chosen_path=$orig_up_chosen_path
        load_upstream_vars || fail

      end_for

      anchor_dims=$original_anchor_dims
      if [[ $execute_update == t ]]; then
        switch_context || fail
      fi

    fi

    if [[ $execute_update == t ]]; then
      touch $status_path/deps-up-to-date || fail
    fi

  end_function

  if failed || [[ $update_successful == f ]]; then
    if [[ -f $status_path/deps-up-to-date ]]; then
      rm $status_path/deps-up-to-date 
    fi
    update_successful=f
  fi

  handle_return
}

# output
#   data_valid
check_cell_product() {
  begin_function
    local update_successful
    data_valid=t
    execute_update=f \
    update_upstreams || fail
    if [[ $update_successful == f ]]; then
      data_valid=f
    else
      ignore_missing=t execute_op check || fail
    fi
  end_function
  handle_return
}

get_prop_hash() {
  local prop= prop_string=
  for prop in ${data_props[*]:-}; do
    if [[ -v d_$prop ]]; then
      eval "value=\$d_$prop"
      prop_string+="$prop=$value "
    fi
  done
  prop_hash=$(echo "$prop_string" | sha1sum) || return 1
  return 0
}

get_data_prop_changed() {
  local status_path=$cell_path/.cyto/status \
    prop_hash=0 \
    value
  prop_changed=f
  if [[ "${data_props:-}" ]]; then

    local prop all_set=t
    for prop in ${data_props[*]}; do
      local -n v=$prop
      if [[ ! "${v:-}" ]]; then
        all_set=f
        break
      fi
    done

    if [[ $all_set == t ]]; then
      prop_changed=t
      local -r status_file=$status_path/last_run_prop_hash
      if [[ -f $status_file ]]; then
        get_prop_hash || return 1
        if [[ $prop_hash == $(<$status_file) ]]; then
          prop_changed=f
        fi
      fi
    fi

  fi
  return 0
}

update_prop_hash() {
  local prop_hash
  get_prop_hash || return 1
  local -r status_file=$status_path/last_run_prop_hash
  echo "$prop_hash" >$status_file || return 1
  return 0
}

already_in_dep_stack() {
  local find_dep=$1
  local dep
  for dep in ${dep_stack[*]}; do
    if [[ $dep == $find_dep ]]; then
      return 0
    fi
  done
  return 1
}

propagate_change_to_downstream2() {
  begin_function

    local cell=$(realpath $value)

    local t1 t2 trunk_cell
    get_trunk_cell $cell
    t1=$trunk_cell
    get_trunk_cell $from_cell
    t2=$trunk_cell
    if [[ $t1 == $t2 ]]; then
      log_fatal "Cell is propagating change to itself: $cell" 
      fail1
    fi
    
    local status_self=$cell/.cyto/status
    
    if already_in_dep_stack $cell; then
      succeed
    fi
    dep_stack+=( $cell )

    if [[ -d $cell ]]; then
      if [[ -d $status_self ]]; then
        # can't combine these if statements or it will alter the else condition
        #   and break things
        if [[ -f $status_self/deps-up-to-date ]]; then
          rm $status_self/deps-up-to-date || fail
          # recursive
          from_cell=$cell \
            propagate_change_to_downstream || fail
        fi
      else
        # recursive
        from_cell=$cell \
          propagate_change_to_downstream || fail
      fi
    fi

  end_function
  handle_return
}

propagate_change_to_downstream() {
  begin_function

    local from_cell=$from_cell \
      down_path=$from_cell/.cyto/down down_folder folders

    if [[ -d $down_path ]]; then
      local dep_stack=( ${downstream_cell_stack[*]} )
      folders=( $(find1 $down_path -not -name '.*' -type d) ) || fail
      loop_over_var=folders \
      background=f \
        par=f fork=f \
        body=propagate_change_to_downstream2 \
        parallel_loop || fail
    fi

  end_function
  handle_return
}

