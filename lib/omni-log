#!/bin/bash

type -t omni_log_init >/dev/null && return 0

# if logging_to_file is set, trace output will be sent to this file

# when a function which gets forked into it's own process is run, need to do this:
# f() {
#   change_log_file
#   begin_function
#   end_function
#   handle_return
# }

omni_log_init() {
  local command="$*"  
  omni_log_job_id=0 omni_log_fork_id=0

  disable_log=${disable_log:-f}

  if [[ "${debugger_available:-f}" == t ]]; then
    debug_at_log_id=
    if [[ "${log_id:-}" ]]; then
      echo "${CYAN}Will debug starting at log_id $log_id or later${RESET}" >&2
      debug_at_log_id=$log_id
    fi
  fi

  first_log_file=
  first_log=t
  log_depth_current=0
  omni_log_pos=1
  trace_var=${trace_var:-}
  declare -gA trace_var_value
  log=${log:-file}
  log_to_file=t
  log_to_out=f
  log_action_filter=${log_action:-}
  log_depth_filter=${log_depth:-}
  log_function_filter=${log_function:-}
  log_level_filter=${log_level:-info}
  log_format=${log_format:-default}
  log_show_id=${log_show_id:-f}
  cooked_stack=( ${cooked_stack[*]:-} )
  log_ansi=${log_ansi:-${ansi:-t}}

  case $log in
    off|fatal|error|warn|info|debug|trace|all)
      log_level_filter=$log
      log=file
      ;;
    file)
      # default behavior
      ;;
    out)
      log_to_out=t
      log_level_filter=warn
      if [[ "$log_format" == default ]]; then
        log_format='$level_color$message$RESET'
      fi
      ;;
    both)
      log_to_file=t
      log_to_out=t
      ;;
    id)
      log_show_id=t
      ;;
    *)
      log_to_file=t
      log_to_out=t
      log_action_filter=$log
      ;;
  esac

  case $log_level_filter in
    none)
      log_format=
    ;;
    fatal|error|warn|info)
      if [[ "$log_format" == default ]]; then
        log_format='$level_color$message$RESET'
      fi
    ;;
    debug)
      if [[ "$log_format" == default ]]; then
        log_format='$log_id$level_color$message$RESET'
      fi
    ;;
    trace|all)
      if [[ "$log_format" == default ]]; then
        log_format='$time$pid$log_id$COL45$level_color$action$COL60$function$COL90$log_vars$message$RESET'
      fi
    ;;
    *)
      log_fatal "Invalid log_level value. Must be one of: none, error, warn, info, trace, debug"
      exit 1
    ;;
  esac

  case $log_format in
    tiny)
      log_format='$level_color$message$RESET'
    ;;
    short)
      log_format='$level_color$action$COL15$function$COL45$log_vars$message$RESET'
    ;;
    compact)
      log_format='$level_color$action$function$log_vars$message$RESET'
    ;;
  esac

  if [[ $log_show_id == t ]]; then
    log_format='$log_id$level_color$message$RESET'
  fi

  var_stack=( ) \
    var_stack2=( ) \
    logging_to_file= \
    log_vars= \
    log_show_vars= 
}

save_log_vars() {
  local entry entries= var value quoted_value
  for var in $log_vars; do
    value=
    if [[ -v $var && "$var" ]]; then
      value=${!var}
      shell_quote_var value
    fi
    entries+=" $var=$value"
  done
  entries=${entries# }
  log_var_entries_stack+=( "$entries" ) 
  log_var_show_vars_stack+=( "$log_show_vars" ) 
}

load_log_vars_and_write_to_log() {
  local \
    var value entry log_vars= \
    entries=${log_var_entries_stack[-1]} \
    _log_show_vars=${log_var_show_vars_stack[-1]} \

  eval "entries=( ${entries} )"

  for entry in "${entries[@]}"; do
    var=${entry%%=*}
    value=${entry#*=}
    shell_quote_var value
    log_vars+=" $var"
    eval "local $var=$value"
  done
  log_vars=${log_vars# }

  local $snapshot_source_location_locals
  snapshot_source_location
  unset log_var_entries_stack[-1] log_var_show_vars_stack[-1]
  log_show_vars=$_log_show_vars \
    write_to_log trace "return($return_value)"
}

snapshot_source_location_locals="log_function log_source_file log_source_line"
snapshot_source_location() {
  local offset=${offset:-1} offset1=
  (( 
    offset1 = offset + 1
  , log_source_line=${BASH_LINENO[offset]}
  , log_source_line2=${BASH_LINENO[offset1]}
  )) 
  log_function=${FUNCNAME[offset1]}
  log_source_file=${BASH_SOURCE[offset1]}
  log_source_file2=${BASH_SOURCE[offset]}
}

auto_shorten() {
  local -n shorten_var=$1
  local extra length
  if [[ "$shorten_var" =~ /.*/.*/.*/.*/ ]]; then
    extra=${shorten_var%/*/*/*/*}
    shorten_var=${shorten_var#$extra/}
  fi

  length="${#shorten_var}"
  if (( length > 80 )); then
    shorten_var=${shorten_var:0:78}..
  fi
}

write_to_log_process_vars() {
  local var var_name value
  for var in $log_vars $show_vars2 $trace_var; do

    if [[ $var == *=* ]]; then
      var_name=${var%%=*}
      var=${var#*=}
    else
      var_name=$var
    fi

    local shorten=f
    if [[ "$var" == ^* ]]; then
      var=${var#^}
      var_name=${var_name#^}
    fi

    eval "value=\${$var:-}"
    local quoted_value=$value
    shell_quote_var quoted_value

    if [[ " $trace_var " =~ \ $var\  ]]; then

      if [[ "$value" != "${trace_var_value[$var]:-}" ]]; then
        trace_vars+="$CYAN"
      fi

      trace_vars+=" $var_name=$quoted_value"

      if [[ "$value" != "${trace_var_value[$var]:-}" ]]; then
        trace_vars+="$RESET"
        trace_var_value[$var]=$value
      fi

    else
      if [[ "$value" ]]; then
        new_vars+=" $var_name=$quoted_value"
      fi
    fi

  done

  if [[ "$show_vars2" ]]; then
    local new_show_vars=
    for var in $show_vars2; do
      if [[ $var == *=* ]]; then
        var_name=${var%%=*}
      else
        var_name=$var
      fi
      new_show_vars+=" $var_name"
    done
    show_vars2=${new_show_vars# }
  fi

  return 0
}

write_to_log_log_var() {
  local quoted
  to_log="= ts=$time pid=$pid"
  to_log+=" log_id=$log_id log_level=$level"

  if [[ "$action" ]]; then
    local quoted=$action
    shell_quote_var quoted
    to_log+=" log_action=$quoted"
  fi
  if [[ ! "${log_function:-}" ]]; then
    offset=2 snapshot_source_location
  fi
  function=$log_function
  if [[ "${log_function:-}" ]]; then
    to_log+=" log_function=$log_function"
  fi
  if [[ "${log_source_file:-}" ]]; then
    to_log+=" log_source=$log_source_file:$log_source_line log_source_caller=$log_source_file2:$log_source_line2"
  fi
  if [[ "${show_vars2:-}" ]]; then
    quoted=$show_vars2
    shell_quote_var quoted
    to_log+=" log_show_vars=$quoted"
  fi
  to_log+="$new_vars$trace_vars"
  if [[ "${trace_var:-}" ]]; then
    quoted=trace_var
    shell_quote_var quoted
    to_log+=" trace_vars=$quoted"
  fi
  local quoted=${message:-}
  if [[ "$message" ]]; then
    shell_quote_var quoted
    to_log+=" log_message=$quoted"
  fi
  return 0
}

write_to_log_update_cooked() {
  case $action in
    call)
      local s
      apad s log_id "log_id=$log_id " function "$function "
      s+="$new_vars$trace_vars"
      cooked_stack+=( "$s" )
    ;;
    return*)
      if [[ "$cooked_stack" ]]; then
        unset cooked_stack[-1]
      fi
    ;;
  esac
  return 0
}

write_to_log_console_out() {
  local out_line=
  if [[ $log_to_out == t ]]; then
    out_line="$to_log$trace_vars"
    echo "$out_line" >&2
  else

    local hide=f

    if [[ "$log_action_filter" && ! $action =~ "$log_action_filter" ]]; then
      hide=t
    fi

    if [[ "$log_function_filter" && ! $function =~ "$log_function_filter" ]]; then
      hide=t
    fi

    if [[ "$log_depth_filter" && $log_depth_current -gt $log_depth_filter ]]; then
      hide=t
    fi

    local level_num=${log_level_num_map[$level]}
    local log_level_num=${log_level_num_map[$log_level_filter]}
    if [[ "$log_level_filter" && $level_num -lt $log_level_num ]]; then
      hide=t
    fi

    local level_color=${log_level_color_map[$level]}
    if [[ $log_ansi == f ]]; then
      level_color=
    fi

    function=" $function"
    action=" $action"
    message=" $message"
    local log_vars="$new_vars"
    time=" $time"
    pid=" pid=$pid"
    log_id=" log_id=$log_id"
    eval "local to_terminal=\"$log_format\""
    out_line="$to_terminal$trace_vars"

    if [[ $hide == f ]]; then
      echo "$out_line" >&2
    fi
  fi
  return 0
}

# Can be called safely whether or not a log file has been set up
write_to_log() {
  begin_no_tracing_zone

  local level=$1 action=${2:-${1:-}} message=${3:-} \
    new_vars= trace_vars= show_vars2=${log_show_vars:-} \
    log_vars=${log_vars:-}

  if [[ $log_ansi == f ]]; then
    local RESET= COL15= COL45= COL60= COL90= CYAN= YELLOW= RED= 
  fi

  set +u # TODO debug
  write_to_log_process_vars 

  local time="$EPOCHREALTIME" \
    pid="$BASHPID" \
    to_log= $snapshot_source_location_locals \
    function= \
    log_id=$omni_log_fork_id:$omni_log_pos

  write_to_log_log_var

  if [[ $disable_log == f && $log_to_file == t && "${logging_to_file:-}" ]]; then
    echo "$to_log" >>$logging_to_file
  fi

  pause_tee
  write_to_log_update_cooked
  write_to_log_console_out
  unpause_tee

  if [[ "$debug_at_log_id" ]]; then
    local debug_at_fork_id=${debug_at_log_id%:*}
    local debug_at_log_pos=${debug_at_log_id#*:}
    if [[ $omni_log_fork_id == $debug_at_fork_id \
       && $omni_log_pos -ge $debug_at_log_pos ]]; then
      debug_at_log_id=
      debug_immediate=t
      debug_start \\
    fi
  fi
  (( omni_log_pos++ ))

  end_no_tracing_zone
}

# Usage:
#   new_log_file=... change_log_file  point to new log file
#   new_log_file= change_log_file     stop logging
# should also include previous_fork_id
change_log_file() {
  begin_function_flat

    local new_log_file=$new_log_file old_log_file \
      log_function=${log_function:-${FUNCNAME[1]}} \
      previous_fork_id=${previous_fork_id:-0} \
      resume_existing_log=${resume_existing_log:-f}

    local $snapshot_source_location_locals
    offset=2 snapshot_source_location

    if [[ "${logging_to_file:-}" == "$new_log_file" || $disable_log == t ]]; then
      succeed
    fi

    if [[ "${logging_to_file:-}" ]]; then
      if [[ "$new_log_file" ]]; then
        omni_log_fork_id=$previous_fork_id log_vars=new_log_file write_to_log trace log_to
      else
        omni_log_fork_id=$previous_fork_id write_to_log trace log_close
      fi
    fi

    if [[ "$new_log_file" ]]; then
      old_log_file=${logging_to_file:-}
      logging_to_file=$new_log_file
      omni_log_pos=1

      if [[ -f $logging_to_file && $resume_existing_log == f ]]; then
        log_fatal "Log file already exists: $logging_to_file"
        fail1
      fi

      if [[ "$old_log_file" ]]; then
        log_vars=old_log_file write_to_log trace log_from
      fi

    fi

  end_function
  handle_return
}

log_trace() {
  begin_no_tracing_zone
  local message="$*"
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log trace "${action:-}" "$message"
  end_no_tracing_zone
  return 0
}

log_debug() {
  begin_no_tracing_zone
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log debug "${action:-}" "$*"
  end_no_tracing_zone
  return 0
}

log_info() {
  begin_no_tracing_zone
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log info "${action:-}" "$*"
  end_no_tracing_zone
  return 0
}

log_warn() {
  begin_no_tracing_zone
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log warn "${action:-}" "$*"
  end_no_tracing_zone
  return 0
}

log_error() {
  begin_no_tracing_zone
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log error "${action:-}" "$*"
  end_no_tracing_zone
  return 0
}

log_fatal() {
  begin_no_tracing_zone
  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log fatal "${action:-}" "$*"
  end_no_tracing_zone
  return 0
}

# zombie logs are used to output temporary debugging logs
# they should be removed from the code after the issue is resolved
zombie() {
  begin_no_tracing_zone
  echo "$CYAN$*$RESET" >&$fd_original_err
  end_no_tracing_zone
  return 0
}

incomplete() {
  begin_no_tracing_zone
  if [ ${tracing_midline:-f} == t ]; then
    tracing_midline=f
    echo >&2
  fi
  if [ "${1:-}" ]; then
    echo "Not implemented yet: ${1:-}" >&2
  else
    echo "Not implemented yet." >&2
  fi
  start_frame=2 stack_trace
  end_no_tracing_zone
  exit 1
}

log_and_run() {

  local prefix= command=$* out_to_file=${out_to_file:-}
  if [[ $pretend == t ]]; then
    prefix="PRETEND: "
  fi

  local $snapshot_source_location_locals
  snapshot_source_location
  write_to_log debug command "$prefix$command"

  if [[ $pretend == f ]]; then
    if [[ "$out_to_file" ]]; then
      eval "$command" >$out_to_file || return 1
    else
      eval "$command" || return 1
    fi
    if [[ "$!" ]]; then
      pid=$!
    fi
  fi

  return 0
}

declare -A log_level_num_map=( 
  [all]=0 
  [trace]=1 
  [debug]=2 
  [info]=3 
  [warn]=4 
  [error]=5 
  [fatal]=6 
  [off]=9
  )

declare -A log_level_color_map=( 
  [all]= 
  [trace]= 
  [debug]= 
  [info]= 
  [warn]=$YELLOW
  [error]=$RED 
  [fatal]=$RED 
  [off]=
  )

out() {
  #echo "$@" >&${fd_original_out}
  echo "$@"
}

