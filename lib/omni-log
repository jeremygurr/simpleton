#!/bin/bash

# This library of aliases and functions follows the standard hi-shell
# output interface but changes the implementation to always output trace info
# but with additional info to allow easy filtering or browsing of that info.

# if log_file is set, trace output will be sent to this file

# when a function which gets forked into it's own process is run, need to do this:
# f() {
#   change_log_file
#   begin_function
#   end_function
#   handle_return
# }

first_log=t
log_depth=0
log_id=0
trace_var=${trace_var:-}

export log=${log:-file}
export log_to_file=f
export log_to_out=f
export log_action=${log_action:-}
export log_function=${log_function:-}
export log_level=${log_level:-info}
export log_format='$level_color$action $message$RESET'

case $log in
  file)
    log_to_file=t
    ;;
  out)
    log_to_out=t
    ;;
  both)
    log_to_file=t
    log_to_out=t
    ;;
  *)
    log_to_file=t
    log_to_out=t
    log_action=$log
    ;;
esac

case $log_level in
  error|warn|info|trace|debug)
  ;;
  *)
    err "Invalid log_level value. Must be one of: error, warn, info, trace, debug"
    exit 1
  ;;
esac

alias begin_function='
  local return_value=0 break_out=f
  write_to_log trace call
  let log_depth++ || true
  while true; do
'

alias end_function='
  break; done; let log_depth-- || true
  write_to_log trace "return($return_value)"
'

# Usage:
#   change_log_file {log file base}   point to new log file
#   change_log_file                   point to same base but new pid (forked)
#   change_log_file -                 stop logging
change_log_file() {
begin_function_flat

  local new_base=${1:-} new_log_file old_log_file

  if [[ "$new_base" == - ]]; then
    new_log_file=
  elif [[ "$new_base" ]]; then
    base_log_file=$new_base
    new_log_file=$base_log_file-$BASHPID.olog
    local first_log=$base_log_file-first.olog
    if [[ -e "$first_log" ]]; then
      err "Log already exists: $first_log" 
      stack_trace
      fail1
    fi
    ln -s $new_log_file $first_log || fail
  else
    [[ ! "${base_log_file:-}" ]] && succeed
    new_log_file=$base_log_file-$BASHPID.olog
  fi

  if [[ "${log_file:-}" == "$new_log_file" ]]; then
    succeed
  fi

  if [[ "${log_file:-}" ]]; then
    untee_output 
    if [[ "$new_log_file" ]]; then
      function=${FUNCNAME[1]} vars=new_log_file write_to_log trace log_branch
    else
      function=${FUNCNAME[1]} write_to_log trace log_close
    fi
  fi

  if [[ "$new_log_file" ]]; then
    old_log_file=${log_file:-}
    log_file=$new_log_file

    # [[ -f $log_file ]] && rm $log_file
    if [[ -f $log_file ]]; then
      err "log file already exists: $log_file"
      fail1
    fi

    [[ "$old_log_file" ]] && vars=old_log_file write_to_log trace log_from
    #BASH_XTRACEFD=2
    if [[ "$log_to_file" ]]; then
      tee_output_to $log_file 
    fi
    #start_tracing
  else
    #stop_tracing
    #BASH_XTRACEFD=
    :
  fi

end_function_flat
handle_return
}

debug() {
begin_no_tracing_zone
  while true; do
    case "$1" in
      -*)
        ;;
      *)
        break
        ;;
    esac
    shift || true
  done
  function=${FUNCNAME[1]} write_to_log debug '' "$*"
end_no_tracing_zone
return 0
}

info() {
begin_no_tracing_zone
  while true; do
    case "$1" in
      -*)
        ;;
      *)
        break
        ;;
    esac
    shift || true
  done
  function=${FUNCNAME[1]} write_to_log info '' "$*"
end_no_tracing_zone
return 0
}

trace() {
begin_no_tracing_zone
  while true; do
    case "$1" in
      -a|-n|-e)
        ;;
      *)
        break
        ;;
    esac
    shift || true
  done
  local importance=$1; shift || true
  local message="$*"
  function=${FUNCNAME[1]} write_to_log trace '' "$message"
end_no_tracing_zone
return 0
}

err() {
begin_no_tracing_zone
  while true; do
    case "$1" in
      -*)
        ;;
      *)
        break
        ;;
    esac
    shift || true
  done
  function=${FUNCNAME[1]} write_to_log error '' "$*"
end_no_tracing_zone
return 0
}

warn() {
begin_no_tracing_zone
  while true; do
    case "$1" in
      -*)
        ;;
      *)
        break
        ;;
    esac
    shift || true
  done
  function=${FUNCNAME[1]} write_to_log warn '' "$*"
end_no_tracing_zone
return 0
}

log_and_run() {
local prefix= command=$*
if [[ $pretend == t ]]; then
  prefix="PRETEND: "
fi
function=${FUNCNAME[1]} write_to_log info command "$prefix$command"
if [[ $pretend == f ]]; then
  eval "$command"
fi
}

declare -A log_level_num_map=( 
  [debug]=0 
  [trace]=1 
  [info]=2 
  [warn]=3 
  [error]=4 
  )

declare -A log_level_color_map=( 
  [debug]= 
  [trace]= 
  [info]= 
  [warn]=$YELLOW 
  [error]=$RED 
  )

# Can be called safely whether or not a log file has been set up
write_to_log() {
begin_no_tracing_zone

local level=$1 action=$2 message=${3:-} var value vars=

for var in $trace_var ${vars:-}; do
  eval "value=\${$var:-}"
  if [[ $value =~ \  ]]; then
    value=${value//\\/\\\\}
    #   double quoted
    value="\"${value//\"/\\\"}\""
    #   escaped spaces
    # value=${value//\\/\\\\}
    # value=${value// /\\ }
  fi
  vars+=" $var=$value"
done

local to_log="= $EPOCHREALTIME pid=$BASHPID"

if [[ "${debug_id:-}" ]]; then
  to_log+=" debug_id=$debug_id_current"
fi

to_log+=" log_id=$log_id depth=$log_depth level=$level"

if [[ "$action" ]]; then
  to_log+=" action=$action"
fi
local function=${function:-${FUNCNAME[1]}}
if [[ "${function:-}" ]]; then
  to_log+=" function=$function$vars"
fi
if [[ "$message" ]]; then
  to_log+=" info=\"${message//\"/\\\"}\""
fi

let log_id++ || true

if [[ $log_to_file == t && "${log_file:-}" && $log_to_out == f ]]; then
  echo "$to_log" >>$log_file
elif [[ $log_to_out == t ]]; then
  local hide=f

  if [[ "$log_action" && ! $action =~ "$log_action" ]]; then
    hide=t
  fi

  if [[ "$log_function" && ! $function =~ "$log_function" ]]; then
    hide=t
  fi

  local level_num=${log_level_num_map[$level]}
  local log_level_num=${log_level_num_map[$log_level]}
  if [[ "$log_level" && $level_num -lt $log_level_num ]]; then
    hide=t
  fi

  if [[ $hide == f ]]; then
    local level_color=${log_level_color_map[$log_level]}
    eval "local to_terminal=\"$log_format\""
    echo "$to_terminal" >&$fd_trace
  fi

fi

end_no_tracing_zone
}

out() {
  #echo "$@" >&${fd_original_out}
  echo "$@"
}

