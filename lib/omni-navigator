#!/bin/bash

type -t omni_navigator_init >/dev/null && return 0

omni_navigator_init() {
  omni_list_radius=${omni_list_radius:-5}
  if [[ ! -v fd_original_in ]]; then
    exec {fd_original_in}<&0
    exec {fd_original_out}>&1
    exec {fd_original_err}>&2
    exec {fd_original_trace}>&${fd_trace:-2}
  fi
}

omni_navigator() (
  local \
    cursor_a_log_file=${cursor_a_log_file:-${cursor_log_file:-${log_file:-}}} \
    cursor_a_log_array=${cursor_a_log_array:-} \
    cursor_a_log_array_index=${cursor_a_log_array_index:-${cursor_index:-${index:-0}}} \
    cursor_a_log_file_id

  begin_function_flat

    if [[ -L "$cursor_a_log_file" ]]; then
      cursor_a_log_file=$(realpath $cursor_a_log_file)
    fi

    if [[ ! -f "$cursor_a_log_file" ]]; then
      fatal "Can't find log file: $cursor_a_log_file"
      fail1
    fi

    if [[ ! "${cursor_a_log_file_id:-}" ]]; then
      cursor_a_log_file_id=${cursor_a_log_file%.olog}
      cursor_a_log_file_id=${cursor_a_log_file_id##*-}
    fi

    if [[ ! "$cursor_a_log_file_id" =~ ^[0-9:]+$ ]]; then
      fatal "Could not figure out log file id. Got [$cursor_a_log_file_id]"
      fatal "Maybe log file doesn't comply with convention: {path}/{log}-{job_id}:{fork_id}.olog"
      fail1
    fi

    local log_file_token=${cursor_a_log_file_id//:/_}
    local log_array_var=omni_log_array_$log_file_token
    if [[ ! -v $log_array_var ]]; then
      file=$cursor_a_log_file \
        log_file_id=$cursor_a_log_file_id \
        omni_load_log_array || fail
    fi
    declare -n cursor_a_log_array=$log_array_var
    local -n plane_map=omni_plane_map_$log_file_token \
      index=cursor_a_log_array_index \
      output_array=omni_log_output_array_$log_file_token
    local plane_map_size=${#plane_map[*]}
    
    local next_log_start=$index
    local plane_id=${plane_map[$index]}
    omni_offset_index next_log_start -$omni_list_radius || fail

    local debug_r=-1 no_follow_once
    begin_while [[ $debug_r == -1 ]]; doo

      if [[ ${no_follow_once:=f} == t ]]; then
        no_follow_once=f
      else
        omni_show_log || fail
      fi

      echo -n "$NL>> " >&$fd_original_err
      local debug_c
      read -rs -n1 debug_c <&$fd_original_in

      case "$debug_c" in
        b)
          echo "# Step back" >&$fd_original_err
          local p=$index
          omni_offset_index index -1 || fail
          if [[ $p == $index ]]; then
            (( index-- ))
            if (( index < 0 )); then
              index=0
            fi
            plane_id=${plane_map[$index]}
          fi
          omni_show_context || fail
          no_follow_once=t
          ;;
        c)
          echo "# Show context" >&$fd_original_err
          omni_show_context || fail
          no_follow_once=t
          ;;
        i)
          echo "# Step in" >&$fd_original_err
          (( index++ ))
          if (( index >= plane_map_size )); then
            (( index = plane_map_size - 1 ))
          fi
          plane_id=${plane_map[$index]}
          omni_show_context || fail
          no_follow_once=t
          ;;
        l)
          echo -n "$CLEAR_LINE" >&$fd_original_err
          echo -n "$CURSOR_UP$CLEAR_LINE" >&$fd_original_err
          omni_show_log || fail
          no_follow_once=t
          ;;
        L)
          echo -n "$CLEAR_SCREEN" >&$fd_original_err
          omni_offset_index next_log_start $((-omni_list_radius*4-2)) || fail
          omni_show_log || fail
          no_follow_once=t
          ;;
        n)
          echo "# Step over" >&$fd_original_err
          local p=$index
          omni_offset_index index 1 || fail
          if [[ $p == $index ]]; then
            (( index++ ))
            if (( index >= plane_map_size )); then
              (( index = plane_map_size - 1 ))
            fi
            plane_id=${plane_map[$index]}
          fi
          omni_show_context || fail
          no_follow_once=t
          ;;
        q)
          echo "# Quitting" >&$fd_original_err
          debug_r=0
          ;;
        \?)
          echo >&$fd_original_err
          echo >&$fd_original_err
          echo "b  back: go to the previous log line of the same depth or shallower" >&$fd_original_err
          echo "c  list a few lines of logs before and after current line" >&$fd_original_err
          echo "i  step in: go to the next log line of the same depth or deeper" >&$fd_original_err
          echo "l  list next few log lines" >&$fd_original_err
          echo "L  list previous log lines" >&$fd_original_err
          echo "n  next: (step over) go to the next log line of the same depth or shallower" >&$fd_original_err
          echo "q  quit: leave the omni navigator" >&$fd_original_err
          no_follow_once=t
          ;;
        *)
          echo "# Unknown command" >&$fd_original_err
          echo "Press ? for a list of commands" >&$fd_original_err
          no_follow_once=t
          ;;
      esac
    end_while
  end_function_flat

  handle_return
)

omni_show_context() {
  next_log_start=$index
  omni_offset_index next_log_start -$omni_list_radius || return 1
  omni_show_log || return 1
  return 0
}

# inputs: next_log_start omni_list_radius plane_map plane_id output_array
omni_show_log() {
  begin_function_flat

    local -r plane_map_size=${#plane_map[*]}

    # display lines until end
    local remaining_lines=$(( omni_list_radius * 2 + 1 ))
    local found_line 
    local -n i=next_log_start

    begin_while (( remaining_lines-- > 0 )); doo
      found_line=f
      begin_while (( i < plane_map_size )); doo
        if (( plane_map[i] == plane_id )); then
          found_line=t
          break
        fi
        (( i++ ))
      end_while
      if [[ $found_line == t ]]; then
        omni_show_line $i || fail
        (( i++ ))
      else
        break
      fi
    end_while
  end_function_flat
  handle_return
}

# inputs: {index} {amount}
#   plane_id plane_map
omni_offset_index() {
  local -n current_index=$1
  local amount=$2 i adjusted=0 d=1

  if (( amount < 0 )); then
    d=-1
    (( amount = -amount ))
  fi

  for (( i = current_index + d;
         i >= 0 
         && adjusted < amount 
         && i < plane_map_size;
         i += d )); do
    if (( plane_map[i] == plane_id )); then
      current_index=$i
      (( adjusted++ ))
    fi
  done
  return 0
}

# inputs: {index}
#   output_array
omni_show_line() {
  local index=$1

  local reverse=f
  if (( index == cursor_a_log_array_index )); then
    reverse=t
  fi

  if [[ $reverse == t ]]; then
    echo -n "$REVERSE" >&$fd_original_err
  fi

  if [[ ! -v output_array ]]; then
    fatal "Internal error: Missing output_array"
    return 1
  fi

  local line=${output_array[$index]}

  if [[ $reverse == t ]]; then
    local pad_size line_length=${#line}
    (( pad_size = COLUMNS - line_length ))
    echo -n "$line" >&$fd_original_err
    printf %${pad_size}s >&$fd_original_err
    echo "$RESET" >&$fd_original_err
  else
    echo "$line" >&$fd_original_err
  fi

  return 0
}

# inputs: 
#   file log_file_id
omni_load_log_array() {
  local file=$file \
    log_file_id_var=${log_file_id//:/_} \
    fork_id=${log_file_id#*:}

  begin_function_flat

    eval "declare -ga omni_log_array_$log_file_id_var"
    local -n array=omni_log_array_$log_file_id_var
    mapfile array < <(cat $file) || fail

    eval "declare -ga omni_plane_map_$log_file_id_var"
    local -n plane_map=omni_plane_map_$log_file_id_var \
      output_array=omni_log_output_array_$log_file_id_var

    local i array_size=${#array[*]} \
      plane_stack next_plane_id=1 plane_id=0 \
      processed_line line \
      ts pid log_id depth level action function

    begin_for (( i = 0; i < array_size; i++ )); doo

      line=${array[$i]} action=none
      if [[ "$line" == \=\ * ]]; then
        entries=${line#= }
        eval "$entries" || return 1
        line_id=$fork_id:$i omni_get_processed_line "$line" || {
          fatal "Bad log line: $line"
          return 1
          }
      fi 

      output_array[$i]=$processed_line

      case $action in
        call)
          plane_map[$i]=$plane_id
          plane_stack+=( $plane_id )
          (( plane_id = next_plane_id++ ))
        ;;
        return\(*)
          if [[ -v plane_stack && ${#plane_stack[*]} -gt 0 ]]; then
            unset plane_stack[-1]
            if [[ ${#plane_stack[*]} -gt 0 ]]; then
              (( plane_id = plane_stack[-1] ))
            else
              plane_id=0
            fi
          else
            plane_id=0
          fi
          plane_map[$i]=$plane_id
        ;;
        *)
          plane_map[$i]=$plane_id
        ;;
      esac

    end_for
  
  end_function_flat
  handle_return
}

# input: {line}
#   line_id
omni_get_processed_line() {
  local line=$1 line_id=$line_id \
    ts pid log_id depth level action function

  if [[ "$line" == \=\ * ]]; then
    entries=${line#= }
    eval "$entries" || return 1
    case $action in
      call)
        processed_line="$action $function"
      ;;
      return\(*)
        processed_line="$action from $function"
      ;;
      log_from)
        processed_line="$action $old_log_file"
      ;;
      debug)
        processed_line="$action $info"
      ;;
      *)
        processed_line=${line%$NL}
      ;;
    esac
  fi
  processed_line="$line_id $processed_line"
  return 0
}

