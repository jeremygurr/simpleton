#!/bin/bash

type -t omni_navigator_init >/dev/null && return 0

omni_navigator_init() {
  omni_list_radius=${omni_list_radius:-20}
  if [[ ! -v fd_original_in ]]; then
    exec {fd_original_in}<&0
    exec {fd_original_out}>&1
    exec {fd_original_err}>&2
    exec {fd_original_trace}>&${fd_trace:-2}
  fi
}

omni_navigator() (
  local \
    cursor_a_log_file=${cursor_a_log_file:-${cursor_log_file:-${log_file:-}}} \
    cursor_a_log_array=${cursor_a_log_array:-} \
    cursor_a_log_array_index=${cursor_a_log_array_index:-${cursor_index:-${index:-0}}} \
    cursor_a_log_file_id

  begin_function_flat

    if [[ -L "$cursor_a_log_file" ]]; then
      cursor_a_log_file=$(realpath $cursor_a_log_file)
    fi

    if [[ ! -f "$cursor_a_log_file" ]]; then
      fatal "Can't find log file: $cursor_a_log_file"
      fail1
    fi

    if [[ ! "${cursor_a_log_file_id:-}" ]]; then
      cursor_a_log_file_id=${cursor_a_log_file%.olog}
      cursor_a_log_file_id=${cursor_a_log_file_id##*-}
      cursor_a_log_file_id=${cursor_a_log_file_id//:/_}
    fi

    if [[ ! "$cursor_a_log_file_id" =~ ^[0-9_]+$ ]]; then
      fatal "Could not figure out log file id. Got [$cursor_a_log_file_id]"
      fatal "Maybe log file doesn't comply with convention: {path}/{log}-{job_id}_{fork_id}.olog"
      fail1
    fi

    if [[ ! -v omni_log_array_$cursor_a_log_file_id ]]; then
      file=$cursor_a_log_file \
        log_file_id=$cursor_a_log_file_id \
        omni_load_log_array || fail
    fi
    declare -n cursor_a_log_array=omni_log_array_$cursor_log_file_id
    
    begin_loop

      local current_log_line=${cursor_a_log_array[$cursor_a_log_array_index]}
      local next_log_start=$cursor_a_log_array_index
      omni_rewind_index next_log_start $omni_list_radius
      omni_show_log || fail
      local omni_list_dir=forwards
      let omni_list_offset+=omni_list_radius-1 || true
      succeed

    end_loop
  end_function_flat

  handle_return
)

omni_show_log() {
  local next_log_start=$next_log_start \
    to_show_index to_show_start to_show_end \
    omni_list_radius=$omni_list_radius
  local -a to_show

  begin_function_flat

    local -n plane_map=omni_plane_map_$cursor_a_log_file_id \
      log_array=cursor_a_log_array
    local log_array_index=$cursor_a_log_array_index
    local -r plane_id=${plane_map[$log_array_index]} \
      log_array_size=${#log_array[*]}

    # search forwards
    begin_for (( i = to_show_index + 1, j = log_array_index + 1;
              i < to_show_end && log_array_index < log_array_size;
              log_array_index++ )); doo
      if (( plane_map[log_array_index] == plane_id )); then
        to_show[$i]=$log_array_index
        (( i++ ))
      fi
    end_for

    # display lines until end
    local remaining_lines=$(( omni_list_radius * 2 + 1 ))
    local found_line i
    begin_while (( remaining_lines-- > 0 )); doo
      found_line=f
      begin_while (( i++ < log_array_size )); doo
        if (( plane_map[i] == plane_id )); then
          found_line=t
          break
        fi
      end_while
      if [[ $found_line == t ]]; then
        omni_show_line $i || fail
      else
        break
      fi
    end_while
  end_function_flat
  handle_return
}

omni_rewind_index() {
  local -n index=$1
  local amount=$2 plane_id=$plane_id

  # search backwards
  local i rewound_count=0
  for (( i = index;
            i >= 0 && rewound_count < amount;
            i-- )); do
    if (( plane_map[i] == plane_id )); then
      index=$i
      (( rewound_count++ ))
    fi
  done
  return 0
}

omni_show_line() {
  local index=$1

  local reverse=f
  if (( index == cursor_a_log_array_index )); then
    reverse=t
  fi

  if [[ $reverse == t ]]; then
    echo -n "$REVERSE" >&$fd_original_err
  fi

  local -n output_array=omni_log_output_array_$cursor_log_file_id
  if [[ ! -v output_array ]]; then
    fatal "Internal error: Missing output_array"
    return 1
  fi

  local line=${output_array[$index]}

  if [[ $reverse == t ]]; then
    local pad_size line_length=${#line}
    (( pad_size = COLUMNS - line_length ))
    echo -n "$line" >&$fd_original_err
    printf %${pad_size}s >&$fd_original_err
    echo "$RESET" >&$fd_original_err
  else
    echo "$line" >&$fd_original_err
  fi

  return 0
}

omni_load_log_array() {
  local file=$file log_file_id=$log_file_id

  begin_function_flat

    eval "declare -ga omni_log_array_$cursor_a_log_file_id"
    local -n array=omni_log_array_$cursor_a_log_file_id
    mapfile array < <(cat $cursor_a_log_file) || fail

    debug_start
    eval "declare -ga omni_plane_map_$cursor_a_log_file_id"
    local -n plane_map=omni_plane_map_$cursor_a_log_file_id \
      output_array=omni_log_output_array_$cursor_a_log_file_id

    local i array_size=${#array[*]} \
      plane_stack next_plane_id=1 plane_id=0 \
      processed_line line \
      ts pid log_id depth level action function

    begin_for (( i = 0; i < array_size; i++ )); doo

      line=${array[$i]} action=none
      if [[ "$line" == \=\ * ]]; then
        entries=${line#= }
        eval "$entries" || return 1
        omni_get_processed_line "$line" || {
          fatal "Bad log line: $line"
          return 1
          }
      fi 

      output_array[$i]=$processed_line
      plane_map[$i]=$plane_id

      case $action in
        call)
          plane_stack+=( $plane_id )
          (( plane_id = next_plane_id++ ))
        ;;
        return\(*)
          if (( ${#plane_stack[*]} > 0 )); then
            (( plane_id = plane_stack[-1] ))
            unset plane_stack[-1]
          else
            plane_id=0
          fi
        ;;
      esac

    end_for
  
  end_function_flat
  handle_return
}

omni_get_processed_line() {
  local line=$1 ts pid log_id depth level action function
  processed_line=$line
  if [[ "$line" == \=\ * ]]; then
    entries=${line#= }
    eval "$entries" || return 1
    case $action in
      call)
        processed_line="$action $function"
      ;;
      return\(*)
        processed_line="$action from $function"
      ;;
      log_from)
        processed_line="$action $old_log_file"
      ;;
      debug)
        processed_line="$action $info"
      ;;
    esac
  fi
  return 0
}

