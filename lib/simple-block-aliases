#!/bin/bash

alias    begin_function_hi='local return_value=0 break_out=f deep_function=t; while true; do'
alias       begin_function='local return_value=0 break_out=f deep_function; while true; do'
alias          begin_while='break_out=f; while'
alias            begin_for='break_out=f; for'
alias           begin_loop='break_out=f; while true'
alias         end_function='break; done'
alias            end_while='done; [[ $break_out == t ]] && break; true'
alias              end_for='done; [[ $break_out == t ]] && break; true'
alias             end_loop='done; [[ $break_out == t ]] && break; true'

# to avoid bash syntax parsing problems, and provide a hook for loop beginning
alias doo='do'

# end_while or end_for or end_loop should usually be used instead of this.
# This is helpful though if the done part needs to be separated from the break part
alias maybe_break='[[ $break_out == t ]] && break'

# should be at the end of every function which contains a begin_function_hi block
alias handle_return='return $return_value'
alias handle_exit='exit $return_value'

# used after a direct command which may fail: cd /somewhere || fail
alias fail='{ return_value=$?; break_out=t; break; }'
alias fail_later='{ return_value=$?; break_out=t; }'
alias fail1='{ return_value=1; break_out=t; break; }'
alias fail2='{ return_value=2; break_out=t; break; }'

# used to check if something failed: failed && break
alias failed='[[ $return_value -gt 0 ]]'

alias succeed='{ return_value=0; break_out=t; break; }'
alias succeeded='[[ $return_value -eq 0 ]]'

alias handle_break='[[ $break_out == t ]] && break'

