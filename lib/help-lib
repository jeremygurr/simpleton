#!/usr/bin/env bash

type -t help_lib_loaded >/dev/null && return 0
help_lib_loaded=t

short_path() {
  local p=$1 o
  if [[ "$p" == /*/*/*/* ]]; then
    o=${p%/*/*/*}
    p=${p#$o/}
  fi
  echo -n "$p"
}

# inputs:
#   i     index of parameter to show
show_parameter_help_inner() {
  begin_function

    local indent=${indent:-0} \
      name="${parameter_names[$i]}" \
      description="${parameter_descriptions[$i]}" \
      aliases="${parameter_aliases[$i]}" \
      show_use_eq=${show_use_eq:-f} \

    if [[ $show_use_eq == t ]]; then
      local best_alias=$name
      if [[ "$aliases" ]]; then
        best_alias=${aliases%% *}
      fi
      description+="${NL}Use $best_alias=? to see a list of valid values. "
    fi
    trim_ws description

    choices=
    if function_exists ${name}_get_choices; then
      ${name}_get_choices || fail
      choices="${choices[*]}"
    elif [[ -v parameter_choices[$i] && "${parameter_choices[$i]:-}" ]]; then
      choices=${parameter_choices[$i]}
    fi

    local -n n_default=default_${name}
    if [[ "${n_default:-}" ]]; then
      default=$n_default
    else
      default="${parameter_defaults[$i]}"
    fi

    out "$name:"
    (( indent += 2 ))
    out "$description"
    [[ "$choices" ]] && out "choices: $choices"
    [[ "$default" ]] && out "default: $default"
    [[ "$aliases" ]] && out "aliases: $aliases"
  end_function
  handle_return
}

show_help_for_command() {
  local command=$1 indent=${indent:-0}
  begin_function
    [[ $first_command == f ]] && out ''
    if [[ $multi_commands == t ]]; then
      out "$hbar_equals"
    fi

    out "${WHITE}Command: ${command//-/ }$RESET"
    if [[ -f $path_to_commands/$command.info ]]; then
      source $path_to_commands/$command.info || fail
      indent=2 out "$command_description"
      local name description default i choices aliases
      local types=command
      if (( command_detail > 0 )); then
        types+=' global'
      fi
      begin_for type in $types; doo

        local -n parameter_names=parameter_names_$type \
          parameter_descriptions=parameter_descriptions_$type \
          parameter_choices=parameter_choices_$type \
          parameter_defaults=parameter_defaults_$type \
          parameter_aliases=parameter_aliases_$type \

        if [[ "${parameter_names:-}" ]]; then
          out "$NL$WHITE${type^} Parameters:$RESET"
        fi
        begin_for ((i=0; i<${#parameter_names[*]}; i++)); doo
          show_use_eq=f indent=$((indent+2)) show_parameter_help_inner || fail
        end_for
      end_for
    fi
  end_function
  handle_return
}

# inputs:
#   $1    dim
#   dim_type
show_dimension_details() {
  local dim=$1
  begin_function
    if function_exists ${dim_type}_${dim}_expand; then
      values=

      local problem= 

      eval "value=all ${dim_type}_${dim}_expand" &>/dev/null
      if [[ ! "$problem" && $values != all ]]; then
        out "choices: ${values[*]}"
      fi

      eval "value= ${dim_type}_${dim}_expand" &>/dev/null || is_required=t
      if [[ "$problem" ]]; then
        required+=( $dim )
      else
        if [[ "${values:-}" ]]; then
          if [[ "$values" == $empty_member ]]; then
            out "default: (empty)"
          else
            out "default: ${values[*]}"
          fi
        else
          out "optional (not required to be set)"
        fi
      fi
    fi

    if [[ -v ${dim_type}_${dim}_examples ]]; then
      eval "local examples=( \"\${${dim_type}_${dim}_examples[@]}\" )"
      local example_count=${#examples[*]} i index_string=
      begin_for ((i=0; i<example_count; i++)); doo
        if [[ example_count -gt 1 ]]; then
          index_string=" #$((i+1))"
        fi
        out "example$index_string: ${examples[$i]}"
      end_for
    fi

    if [[ -v ${dim_type}_${dim}_aliases ]]; then
      eval "local aliases=( \"\${${dim_type}_${dim}_aliases[@]}\" )"
      local full_alias
      begin_for full_alias in "${aliases[@]}"; doo
        out "alias: ${full_alias/ / -> }"
      end_for
    fi

    if [[ -v ${dim_type}_${dim}_derived_from ]]; then
      local -n df_var=${dim_type}_${dim}_derived_from
      local derived_string
      for derived_string in "${df_var[@]}"; do
        local derived_array=( $derived_string )
        out "derived from: ${derived_array[*]}"
      done
    elif [[ -v ${dim_type}_${dim}_derive_fields ]]; then
      local -n df_var=${dim_type}_${dim}_derive_fields
      local f derived_from=
      for f in ${df_var[*]}; do
        if [[ "$f" != "$dim" ]]; then
          derived_from+="$f "
        fi
      done
      derived_from=${derived_from% }
      out "derived from: $derived_from"
    fi

    out "dim type: $dim_type"

  end_function
  handle_return
}

# inputs:
#   $1       dim
show_dimension() {
  local dim=$1 indent=${indent:-0}
  begin_function
    local -n dim_type=${dim}_dim_type
    if [[ -v ${dim_type}_${dim}_description ]]; then
      eval "description=\$${dim_type}_${dim}_description" || fail
    else
      description='No description'
    fi
    local message="$dim"
    if (( command_detail > -1 )); then
      message+=": $description"
    fi
    out "$message"
    if (( command_detail > 0 )); then
      indent=$((indent+2)) show_dimension_details $dim || fail
    fi
  end_function
  handle_return
}

show_dimensions_inner() {
  begin_function
    begin_for dim in $(echo "${dims[*]}" | sed 's/ /\n/g' | sort); doo
      if [[ " ${branch_dims[*]:-} " == *" $dim "* ]]; then
        continue
      fi
      show_dimension $dim || fail
    end_for
  end_function
  handle_return
}

show_dimensions() {
  local dims=( $* )
  begin_function
    local result dim description values 
    to_var=result fork show_dimensions_inner || fail
    if (( command_detail == 0 )); then
      echo "$result" | sed -E 's/^ +//' | column -tl 2 | indent
    else
      echo "$result"
    fi
  end_function
  handle_return
}

show_upstream_single() {
  local up_name=$1 choice_path=$2
  begin_function
    local message="$up_name"
    if (( command_detail > -1 )); then
      message+=": $choice_path"
    fi
    out "$message"
    if (( command_detail > 0 )) || [[ $recursive_command == t ]]; then
      # recursive
      fork show_upstream_recursive $choice_path || fail
    fi
  end_function
  handle_return
}

show_upstream_multi() {
  begin_function
    out "$up_name: "
    (( indent+=2 ))
    for choice_name in ${choices[*]}; do
      extract_simple_name choice_name o choice_name
      local choice_var=${choice_name//-/_}
      local -n choice_path=up_${up_var}_choices_${choice_var}_path
      out "Choice $choice_name: $choice_path"
      if (( command_detail > 0 )); then
        # recursive
        fork show_upstream_recursive $choice_path || fail
      fi
    done
    (( indent-=2 ))
  end_function
  handle_return
}

show_upstreams() {
  begin_function
    local up_name
    begin_for up_name in ${up[*]}; doo
      local up_var=${up_name//-/_}
      local -n choices=up_${up_var}_choices
      if [[ -v choices ]]; then
        local choice_name
        if (( ${#choices[*]} == 1 )); then
          choice_name=${choices[0]}
          local choice_var=${choice_name//-/_}
          local -n choice_path=up_${up_var}_choices_${choice_var}_path
          show_upstream_single $up_name $choice_path || fail
        else
          show_upstream_multi || fail
        fi
      else
        local choice_name=$up_name
        local -n choice_path=up_${up_var}_path
        show_upstream_single $up_name $choice_path || fail
      fi
    end_for
  end_function
  handle_return
}

show_upstream_recursive() {
  local cell_path=$1 indent=${indent:-0}
  begin_function
    load_branch_info || fail

    command_requires_cell=t \
    trunk_changed=f \
    command_allows_logs=f \
    anchor_dims= \
    switch_context $cell_path || fail

    (( indent+=2 ))
    show_upstreams || fail
    (( indent-=2 ))
  end_function
  handle_return
}

show_reactor_single() {
  local reactor_name=$1 reactor_path=$2
  begin_function
    local message="$reactor_name"
    if (( command_detail > -1 )); then
      message+=": $reactor_path"
    fi
    out "$message"
    #  not sure if this makes sense here
    #if (( command_detail > 0 )) || [[ $recursive_command == t ]]; then
    #  # recursive
    #  fork show_upstream_recursive $reactor_path || fail
    #fi
  end_function
  handle_return
}

show_reactors() {
  begin_function
    local reactor_name
    begin_for reactor_name in ${reactors[*]}; doo
      local reactor_var=${reactor_name//-/_}
      local -n reactor_path=reactors_${reactor_var}_path
      show_reactor_single $reactor_name $reactor_path || fail
    end_for
  end_function
  handle_return
}

show_branch_members() {
  begin_function
    if [[ "${trunk_dims:-}" ]]; then
      local i pretty_form=
      begin_for (( i = 0; i < ${#trunk_dims[*]}; i++ )); doo
        dim_var=${trunk_dims[$i]}
        local -n dim=d_$dim_var
        local pretty_function_name=trunk_dims_${dim_var}_pretty
        if function_exists $pretty_function_name; then
          eval "$pretty_function_name $dim_var" || fail
          pretty_form=" ($value)"
        else
          pretty_form=
        fi
        local value=${dim:-}
        if [[ "${value:-}" ]]; then
          if [[ $show_header == t ]]; then
            indent=$((indent-2)) out "${NL}Branch dimensions:"
            show_header=f
          fi
          if [[ "$value" == $empty_member ]]; then
            value='(empty)'
          fi
          out "$dim_var=$value$pretty_form"
        fi
      end_for
    fi
  end_function
  handle_return
}

show_cell_help() {
  local cell_path=$1
  begin_function

    local top_level_command=t cell_command=help
    execute_command_prep || fail
    init_command_vars || fail
    source $cell_command_path.info || fail

    command_requires_cell=t \
    trunk_changed=f \
    command_allows_logs=f \
    anchor_dims= \

    switch_context $cell_path || fail

    setup_dims || fail

    handle_unknown=skip \
    handle_no_coords=ignore \
    calc_coords || fail

    if [[ $cell_is_leaf == t ]]; then
      coord_type=branch \
      target_dim_var_type=ddim \
      convert_coords_to_dims || fail
    fi

    indent=0

    if [[ $multi_cell == t ]]; then
      out "$hbar_equals"
    fi

    out "Cell: $short_cell"
    (( indent += 2 ))
    if [[ "${cell_description:-}" ]]; then
      out "$cell_description"
    else
      out "No description for this cell. Set cell_description variable in context file."
    fi

    local required=()

    if [[ "${trunk_dims:-}" ]]; then
      indent=$((indent-2)) out "${NL}Dimensions: (add {dim}=? to command to see details, or cell . ?? to show all details)"
      dim_type=trunk_dims \
      show_dimensions ${trunk_dims[*]} || fail
    fi

    if [[ "${sub_dims:-}" || "${data_props:-}" || "${control_props:-}" ]]; then
      indent=$((indent-2)) out "${NL}Other parameters:"
      if [[ "${sub_dims:-}" ]]; then
        dim_type=sub_dims \
        show_dimensions ${sub_dims[*]} || fail
      fi
      if [[ "${control_props:-}" ]]; then
        dim_type=control_props \
        show_dimensions ${control_props[*]} || fail
      fi
      if [[ "${data_props:-}" ]]; then
        dim_type=data_props \
        show_dimensions ${data_props[*]} || fail
      fi
    fi

    if [[ "${required:-}" ]]; then
      indent=$((indent-2)) out "${NL}Required parameters: ${required[*]}"
    fi

    if [[ "${up:-}" ]]; then
      indent=$((indent-2)) out "${NL}Upstream cell dependencies: (use ?? to show recursive upstreams)"
      show_upstreams || fail
    fi

    if [[ "${reactors:-}" ]]; then
      indent=$((indent-2)) out "${NL}Reactors:"
      show_reactors || fail
    fi

    local dim member show_header=t
    show_branch_members || fail

    local branch_folders branch_folder last_part full_member
    show_header=t
    branch_folders=$(find1 $cell_path -name "*:*" -type d) || fail
    begin_for branch_folder in $branch_folders; doo
      if [[ $show_header == t ]]; then
        indent=$((indent-2)) out "${NL}Pre-existing sub branches:"
        show_header=f
      fi
      last_part=${branch_folder##*/}
      dim=${last_part%%:*}
      member=${last_part#$dim:}
      if [[ -e $branch_folder/.member ]]; then
        full_member=$(<$branch_folder/.member)
        if (( ${#full_member} > 80 )); then
          full_member="${full_member:0:80}..."
        fi
        member="$member ($full_member)"
      fi
      out "$dim=$member"
    end_for

  end_function
  handle_return
}

show_parameter_help_single() {
  local name=$name indent=${indent:-0}
  begin_function

    begin_for type in command global; doo

      local -n parameter_names=parameter_names_$type \
        parameter_descriptions=parameter_descriptions_$type \
        parameter_choices=parameter_choices_$type \
        parameter_defaults=parameter_defaults_$type \
        parameter_aliases=parameter_aliases_$type \

      begin_for i in ${!parameter_names[*]}; doo
        local aliases=${parameter_aliases[$i]:-}
        if [[ "$name" == "${parameter_names[$i]}"
           || " $aliases " == *" $name "* ]]; then
          found_help=t
          show_parameter_help_inner || fail
          abort
        fi
      end_for
    end_for

    local dim_type dim
    begin_for dim_type in trunk_dims sub_dims control_props data_props; doo
      local -n dims=$dim_type
      begin_for dim in ${dims[*]}; doo
        if [[ "$name" == "$dim" ]]; then
          show_dimension $dim || fail
          found_help=t
          abort
        fi
      end_for
    end_for

  end_function
  handle_return
}

show_parameter_help() {
  local names=$* indent=${indent:-0}
  begin_function
    local found_help
    out "Parameters:"
    indent=$((indent+2)) 
    begin_for name in $names; doo
      found_help=f
      show_parameter_help_single || fail
      if [[ $found_help == f ]]; then
        log_warn "No description found for parameter $name" || fail
      fi
    end_for
  end_function
  handle_return
}

show_parameters_help() {
  begin_function
    local p
    load_branch_info || fail
    anchor_dims= \
    switch_context $cell_path || fail
    handle_questions || fail
  end_function
  handle_return
}

