#!/bin/bash
# depends on lib/bash-lib being sourced first to provide needed aliases

[[ -v cell_lib_loaded ]] && return 0
cell_lib_loaded=t

cell_lib_init() {
  # don't let other users read any files written by these scripts
  umask 0077

  empty_member=_ 
  pretend=${pretend:-f}
  execute_inner=${execute_inner:-${dig:-m}}

  : ${risk_tolerance:=${risk:-0}}
  case "$risk_tolerance" in
    l*)
      risk_tolerance=0
      ;;
    m*)
      risk_tolerance=1
      ;;
    h*)
      risk_tolerance=2
      ;;
    v*)
      risk_tolerance=3
      ;;
    [0-9])
      risk_tolerance=${risk_tolerance:-${risk}}
      ;;
    *)
      log_fatal "Unknown risk level: $risk. Should be one of: low medium high very_high (or 0 1 2 3). Defaults to low."
      fail1
      ;;
  esac

  tee_files=( )
  paused_tee_file=

  parallel_default=f 
  [[ ${debug:-f} == t ]] && parallel_default=f
  parallel_execution=${parallel_execution:-${par:-$parallel_default}}

  # Whether we should show logging for each seperate branch or only for leaves
  show_branches=${show_branches:-f}

  # used to detect upstream circular dependencies
  downstream_cell_stack=( ) 
  disable_log=${disable_log:-}
  export debug_ignore+="
    apad
    cell_close_log_file
    cell_open_log_file
    change_log_file
    debug_id_inc
    debug_start
    defer
    fd_unlock
    fd_write_lock
    find1
    fork
    fork_bg
    fork_fg
    fork_inside
    function_exists
    get_bottom_cell
    get_new_fork_id
    get_new_reply_file
    get_top_cell
    load_log_vars
    load_log_vars_and_write_to_log
    log_debug
    log_error
    log_fatal
    log_info
    log_trace
    log_verbose
    log_warn
    out
    parallel_loop
    pause_tee
    safe_link
    save_log_vars
    setup_exit_trap
    shell_quote_var
    snapshot_source_location
    tee_output_to_log
    unpause_tee
    unrealpath
    untee_output
    write_to_log
    write_to_log_and_save
    write_to_log_console_out
    write_to_log_log_var
    write_to_log_process_vars
    write_to_log_update_cooked
  "

  debug_ignore=( $debug_ignore )
  debug_ignore=" ${debug_ignore[*]} "
}

form_alias=out_form
field_alias=out_fields
fields_alias=out_fields

# allocates a unique file optionally based on a given name in the cell tmp_path
# returns tmp_file set to the full path of the file
get_tmp_file() {
  local base=${1:-tmp}
  if [[ ! -e $tmp_path ]]; then
    mkdir $tmp_path || return 1
  fi
  tmp_file=$(mktemp $tmp_path/$base.$$.XXXXXX) || return 1
  defer "rm $tmp_file"
  return 0
}

write_or_load() {
  local new_type=$1 content=$2
  begin_function_lo
    if [[ $context_make == t ]]; then
      if [[ $last_type == fun && $new_type == var 
         || $last_type == var && $new_type == fun ]]; then
        echo >>$context_path.new || fail
      fi
      echo "$content" >>$context_path.new || fail
      last_type=$new_type
    fi
    eval "$content" || fail
  end_function
  handle_return
}

# inputs:
#   item_name 
#   prefix
# outputs:
#   code
load_fun() {
  local full_path=$1 content name=$2
  begin_function
    content=$(<$full_path)
    trim_ws content

    if [[ "$content" =~ ^[a-zA-Z_]+\(\) ]]; then
      code="$content"
    else
      content=$(echo -n "$content" | sed 's/^/    /')
      code="$name() {
  begin_function
$content
  end_function
  handle_return
}"
    fi

  end_function
  handle_return
}

# inputs:
#   item_name 
#   prefix
# outputs:
#   code
load_var_to_code() {
  local full_path=$1 name=$2 content append=f
  begin_function

    content=$(<$full_path)
    trim_ws content

    if [[ "$content" == '+='* ]]; then
      content=${content#'+='}
      append=t
    fi

    if [[ "$content" != [\"\']* ]]; then
      quotes=single newlines=preserved shell_quote_var content
    fi

    if [[ $append == t ]]; then
      code="$name+=$content"
    else
      code="$name=$content"
    fi

  end_function
  handle_return
}

load_arr_to_code() {
  begin_function

    local full_path=$1 content name=$2 append=f
    content=$(<$full_path)
    trim_ws content

    if [[ "$content" == '+='* ]]; then
      content=${content#'+='}
      append=t
    fi

    code="$name"
    if [[ $append == t ]]; then
      code+="+=("
    else
      code+="=("
    fi

    while IFS= read -r line || [[ "$line" ]]; do
      trim_ws line
      if [[ "$line" != [\"\']* ]]; then
        quotes=single shell_quote_var line
      fi
      code+=" $line" || fail
    done < <(echo -n "$content")

    code+=" )"

  end_function
  handle_return
}

load_tab() {
  local code=
  load_tab_to_code "$1" "$2" || return 1
  eval "$code"
}

# usage: load_tab {full path to tab file} {target var to store data in}
load_tab_to_code() {

  begin_function
    local full_path=$1 content name=$2 append=f
    local target_var_data=${name}_data target_var_fields=${name}_fields \
      fields i
    content=$(<$full_path)

    if [[ "$content" == '+='* ]]; then
      content=${content#'+='}
      append=t
    fi

    local row_index=0
    begin_while IFS= read -r line || [[ "$line" ]]; doo
      trim_ws line
      if [[ ! "$line" ]]; then
        continue
      fi
      if (( row_index == 0 )); then

        if [[ $append == t ]]; then
          code="$target_var_fields+=( "
        else
          code="$target_var_fields=( "
        fi

        eval "fields=( $line )"
        local column_code=() field_count=${#fields[*]}
        begin_for (( i = 0; i < field_count; i++ )); doo
          local field=${fields[$i]}
          quotes=single shell_quote_var field || fail
          code+="$field "
        end_for

        code+=")$NL"

        if [[ $append == t ]]; then
          code+="$target_var_data+=($NL"
        else
          code+="$target_var_data=($NL"
        fi

      else

        eval "local line_array=( $line )"
        local value line_cell_count=${#line_array[*]}

        if (( line_cell_count != field_count )); then
          log_fatal "Invalid data in table $full_path row $row_index. Number of cells in row doesn't match number of fields."
          fail1
        fi

        code+=" "
        begin_for (( i = 0; i < ${#line_array[*]}; i++ )); doo
          value=${line_array[$i]}
          quotes=single shell_quote_var value || fail
          code+=" $value"
        end_for
        code+="$NL"

      fi
       
      (( row_index++ )) 

    done < <(echo -n "$content")
    maybe_break

    code+=")$NL"

    if [[ $name == *_derive ]]; then
      derive_tables+=( $name )
    fi

  end_function
  handle_return
}

# usage: get_simple_name {from var} {ordinal var} {to var}
extract_simple_name() {
  local -n _from=$1 _ord=$2 _to=$3
  split_ordinal _from _ord _to
  _to=${_to//-/_}
}

# usage: get_simple_name {from array} {to array}
extract_simple_name_across_array() {
  local -n _from=$1 _to=$2
  local o i f t
  for (( i = 0; i < ${#_from[*]}; i++ )); do
    f=${_from[$i]}
    extract_simple_name f o t
    _to[$i]=$t
  done
  return 0
}

make_or_load_dna_item() {
  begin_function
    local var_full_path=$1 prefix=${prefix:-} \
      suffix= code \
      file_name is_auto=f \

    file_name=${var_full_path##*/}
    if [[ $file_name == *.* ]]; then
      suffix=${file_name##*.}
      file_name=${file_name%.*}
    fi
    if [[ $file_name == auto-* ]]; then
      is_auto=t
      file_name=${file_name#auto-}
    fi

    local var_name o
    var_name=$prefix$file_name
    extract_simple_name var_name o var_name

    local load_type=var
    case "$suffix" in
      var)
        load_var_to_code $var_full_path $var_name || {
          log_fatal "Failed to load simple variable from $var_full_path"
          fail1
        }
      ;;
      arr)
        load_arr_to_code $var_full_path $var_name || {
          log_fatal "Failed to load array variable from $var_full_path"
          fail1
        }
      ;;
      fun)
        load_fun $var_full_path $var_name || {
          log_fatal "Failed to load function from $var_full_path"
          fail1
        }
        load_type=fun
        if [[ $is_auto == t ]]; then
          auto_load+=( $var_name.fun )
        fi
      ;;
      tab)
        load_tab_to_code $var_full_path $var_name || {
          log_fatal "Failed to load table variable from $var_full_path"
          fail1
        }
        if [[ $is_auto == t ]]; then
          auto_load+=( $var_name.tab )
        fi
      ;;
      raw)
        load_raw $var_full_path $var_name || {
          log_fatal "Failed to load raw variable from $var_full_path"
          fail1
        }
        load_type=fun
      ;;
      *)
        if [[ $ignore_unknown == f ]]; then
          log_fatal "Unknown dna object: $item."
          fail1
        else
          succeed
        fi
      ;;
    esac
    write_or_load $load_type "$code" || fail
  end_function
  handle_return
}

make_array_assignment() {
  local arr_name=$1
  local -n arr=$2
  begin_function
    array_assignment="$arr_name=("
    local v
    begin_for v in "${arr[@]}"; doo
      shell_quote_var v
      array_assignment+=" $v"
    end_for
    array_assignment+=" )"
  end_function
  debug_return_vars=array_assignment
  handle_return
}

# finds the nearest ancestor of the given path which has .dna in it
# will set bottom_cell, which will be empty if no cell cells are found
get_bottom_cell() {
  local subject=$1
  bottom_cell=
  while [[ -d "$subject" && "$subject" == /*/* ]]; do
    if [[ -e $subject/.dna ]]; then
      bottom_cell=$subject
      break
    fi
    subject=${subject%/*}
  done
  debug_return_vars=bottom_cell
  return 0
}

plant_seed_internal() {
  local from=$1 to=$2 contents x x_part deep=${deep:-t} plant_branches=${plant_branches:-f}
  begin_function

    log_debug "Planting seed from $from to $to" || fail

    if [[ ! -d $to ]]; then

      if [[ $from == /seed/* && -d $from ]]; then
        plant_seed_internal ${from%/*} ${to%/*} || fail
      else
        log_fatal "Seed doesn't exist for $to"
        fail1
      fi

    else

      contents=( $(find1 $from | sort -g) ) || fail
      local dim_found= target
      begin_for x in ${contents[*]}; doo
        x_part=${x##*/}
        target=$to/$x_part
        if [[ ! -e $target ]]; then
          if [[ -f $x || $x_part == .dna ]]; then
            safe_link $(realpath $x) $to/ || fail
          elif [[ $x_part == .mock && "${mock:-f}" != f && -d $x/$mock ]]; then
            safe_link $(realpath $x)/$mock/* $to/ || fail
          elif [[ $x_part == .* ]]; then
            : # ignore this
          elif [[ $x_part == *:* ]]; then
            local new_dim=${x_part%%:*}
            if [[ ! "$dim_found" ]]; then
              dim_found=${x_part%%:*}
            elif [[ $dim_found != $new_dim ]]; then
              log_fatal "Seed has two different dims defined, which is not allowed: $dim_found and $new_dim in $from"
              fail1
            fi
          elif [[ -L $x ]]; then
            cp -a $x $to/ || fail
          elif [[ -d $x ]]; then
            mkdir $target || fail
            if [[ $deep == t ]]; then
              plant_seed_internal $x $target || fail
            fi
          fi
        fi
      end_for

      if [[ "$dim_found" && $plant_branches == t ]]; then
        load_context $to || fail
        parent_path=$to \
        seed_path=$from \
        par=f fork=f \
        function=plant_member \
        for_each_member $dim_found || fail
      fi

    fi
  end_function
  handle_return
}

# should make sure load_branch_info was run before calling this
# inputs: $1  work path to target folder, which may be a cell or a folder of a cell
# outputs: seed_path work_path
find_seed_path() {
  local d s=$1 i h dim dim_count
  begin_function
    seed_path=

    s=/seed${s#/work}

    begin_while [[ ! -d $s && $s == *:* ]]; doo
      s=${s%/*}
    end_while

    if [[ ${ignore_nonexistent:-f} == t ]]; then
      begin_while [[ ! -d $s && $s == */*/*/* ]]; doo
        s=${s%/*}
      end_while
    fi

    if [[ ! -d $s ]]; then
      log_fatal "Couldn't find seed for $s"
      fail1
    fi

    work_path=/work${s#/seed}

    # go through each seed folder and find matching dim
    local found_branch=t
    begin_while [[ $found_branch == t ]]; doo
      
      found_branch=f
      local dim_folder=$(find1 $s -name "*:*" -type d | head -n1) || fail
      if [[ "$dim_folder" ]]; then

        local seed_dim=${dim_folder##*/}
        seed_dim=${seed_dim%%:*}

        begin_for (( i = 0; i < branch_dim_count; i++ )); doo

          dim=${branch_dims[$i]}
          if [[ $dim == $seed_dim ]]; then
            h=${branch_hashes[$i]}
            if [[ -d $s/$dim:$h ]]; then
              s+=/$dim:$h
              found_branch=t
            elif [[ -d $s/$dim:_other ]]; then
              s+=/$dim:_other
              found_branch=t
            fi
            break
          fi

        end_for

      fi

    end_while

  end_function

  if [[ "$s" && -d $s ]]; then
    seed_path=$s
  fi

  local log_return_vars='seed_path work_path'
  handle_return
}

# inputs: $1  work path to the cell
plant_seed() {
  local seed_path to=$1 \
    deep=${deep:-t} plant_branches=${plant_branches:-f} \
    ignore_nonexistent=${ignore_nonexistent:-f}
  begin_function

    find_seed_path $to || fail
    if [[ ! "$seed_path" ]]; then
      log_fatal "No seed is associated with this path: $to"
      fail1
    fi

    plant_seed_internal $seed_path $work_path || fail

  end_function
  handle_return
}

init_context() {
  # required_freshness:
  #   inf means infinite (never refresh based on time). 30s means refresh if it is older than 30 seconds.
  #   1w means refresh if it's older than a week.
  # shuffle_chance:
  #   chance out of 1000 of not following the computed strategy order
  # min_pause:
  #   number of ms to wait between cycles
  #   this number doubles each time there is nothing to do, until it reaches max_pause
  # reuse_existing_out:
  #   if set to t: 
  #   new output folder won't be created when updating, but the existing one will be used
  #   should set to true when creating a new output folder would be expensive
  #   these cells must detect for themselves whether a change has happened in an
  #     update and set something_changed=t accordingly. 

  cell_expiration= \
  cell_is_external=f \
  cell_is_persistent=f \
  current_pause=250 \
  default_anchor_dims= \
  default_freshness= \
  default_strategies=crl \
  localize_dims= \
  localize_reverse_dims= \
  lock_timeout=2 \
  max_pause=60000 \
  min_pause=250 \
  out_fields_choices= \
  out_file= \
  out_form_choices='raw simple table json kv' \
  out_path= \
  post_validate=f \
  pre_validate=f \
  props=() \
  refresh_less_than=${refresh_less_than:-1} \
  retry_delay=1 \
  retry_max=1 \
  retry_scale=2 \
  reuse_existing_out=t \
  shuffle_chance=100 \
  sub_dims=() \
  trunk_dims=() \
  up=() \
  update_cost=1 \
  update_risk=3 \

  unset dim_constraints_all_fields \
    dim_constraints_all_table \

  unset \
    check_op \
    update_op \

  return 0
}

branch_local_vars='branch_dims branch_members branch_hashes branch_dim_count trunk_cell short_cell'
load_branch_info() {
  local cell_path=${1:-$cell_path}

  begin_function

    branch_dims=() \
    branch_members=() \
    branch_hashes=() \

    local c=$cell_path p d m
    begin_while [[ $c == *:* ]]; doo
      p=${c##*/}
      if [[ $p == *:* ]]; then

        d=${p%%:*}
        branch_dims=( $d ${branch_dims[*]} )

        m=${p#*:}
        branch_hashes=( $m ${branch_hashes[*]} )

        local member_var_path=$c/.member
        if [[ -f $member_var_path ]]; then
          m=$(<$member_var_path) || fail
        fi
        branch_members=( "$m" "${branch_members[@]}" )

      fi
      c=${c%/*}
    end_while

    trunk_cell=$c
    branch_dim_count=${#branch_dims[*]}

    if (( branch_dim_count > 0 )); then
      cell_is_trunk=f
    else
      cell_is_trunk=t
    fi

    if [[ "${branch_dims:-}" ]]; then
      log_debug "Branch dims found: ${branch_dims[*]}" || fail
    fi

    local x y dim_string= 
    if [[ "${branch_hashes:-}" ]]; then
      dim_string="${branch_hashes[*]}"
      dim_string=:${dim_string// /\/}
    fi
    local short_trunk=${trunk_cell#/*/*/}
    short_cell="$short_trunk$dim_string"

    log_return_vars=short_cell
  end_function
  handle_return
}

git_commit_check() {
  begin_function

    local status_file=$status_path/git-commit-when-built \
      changed=f \
      update_only=${update_only:-f} \
      module_name=$(realpath $dna_path)
    module_name=${module_name#/seed/}
    module_name=${module_name%%/*}

    if ! is_array repo_paths; then
      load_repo_paths || fail
    fi

    local repo_path=${repo_paths[$module_name]}
    local new_hash=$(git -C $repo_path rev-list HEAD --max-count=1) || fail

    if [[ $update_only == f ]]; then
      if [[ ! -f $status_file ]]; then
        changed=t
      else
        local old_hash=$(<$status_file)
        if [[ "$old_hash" != "$new_hash" ]]; then
          changed=t
        fi
      fi
    fi

    if [[ $changed == t ]]; then
      rm -rf $cyto_path/up $context_path || fail
    fi

    if [[ $changed == t || $update_only == t ]]; then
      echo "$new_hash" >$status_file || fail
    fi

  end_function
  handle_return
}

broken_link_check() {
  begin_function
    local broken_links=( $(find -L $cyto_path -type l -print -o -name ".*" -prune) ) || fail
     if [[ "${broken_links:-}" ]]; then
       log_debug "Broken links found in cyto: $broken_links. Will rebuild cyto."
       rm -rf $cyto_path/up $context_path || fail
     fi
  end_function
  handle_return
}

load_leaf_dims() {
  begin_function
    local i

    leaf_dims=()
    if [[ ! "${anchor_dims:-}" ]]; then
      begin_for (( i = branch_dim_count; i < trunk_dim_count; i++ )); doo
        leaf_dims+=( ${trunk_dims[$i]} )
      end_for
    else
      local anchor_dim branch_dim leftovers=" ${trunk_dims[*]} "
      
      anchor_dims=" $anchor_dims "
      begin_for branch_dim in ${branch_dims[*]}; doo
        remove_word_from_string leftovers $branch_dim
        remove_word_from_string anchor_dims $branch_dim
      end_for
      trim_ws anchor_dims

      begin_for anchor_dim in $anchor_dims; doo
        if [[ "$leftovers" != *" $anchor_dim "* ]]; then
          log_fatal "Invalid anchor_dim: $anchor_dim. It does not exist in the list of possible leaf nodes: $leftovers"
          fail1
        fi
        leaf_dims+=( $anchor_dim )
        remove_word_from_string leftovers $anchor_dim
      end_for
    fi

    leaf_dim_count=${#leaf_dims[*]}

    if (( leaf_dim_count > 0 )); then
      cell_is_leaf=f
    else
      cell_is_leaf=t
    fi

  end_function
  handle_return
}

make_or_load_context_dims() {
  begin_function

    trunk_dim_count=${#trunk_dims[*]}
    : ${anchor_dims:=${anchor_dims:-${default_anchor_dims:-}}}
    load_leaf_dims || fail

    local dim assignment member i members_string=
    begin_for ((i = 0; i < branch_dim_count; i++)); doo
      dim=${branch_dims[$i]}
      member=${branch_members[$i]}
      quotes=single shell_quote_var member
      members_string+="$member "
      assignment="d_$dim=$member"
      write_or_load var "$assignment" || fail
    end_for

    write_or_load var "trunk_dim_count=$trunk_dim_count
branch_dims=( ${branch_dims[*]} )
branch_dim_count=$branch_dim_count
branch_members=( ${members_string% } )
leaf_dims=( ${leaf_dims[*]} )
leaf_dim_count=$leaf_dim_count
derive_tables=( ${derive_tables[*]} )
cell_is_leaf=$cell_is_leaf" || fail

  end_function
  handle_return
}

make_context_expand_find_members() {
  begin_function

    local branch other_found=f
    local member_paths=$(find1 $seed_path -name "$dim:*" -type d | sort -g) || fail

    begin_for branch in $member_paths; doo
      m=${branch##*/*:}
      if [[ $m == all ]]; then
        log_fatal "Should not have an all as a dim member: $branch"
        fail1
      elif [[ $m == _other ]]; then
        other_found=t
      else
        local member_var_path=$branch/.member
        if [[ -f $member_var_path ]]; then
          m=$(<$member_var_path) || fail
        fi
        members+=( "$m" )
      fi
    end_for

    if [[ "$member_paths" && $other_found == f ]]; then
      has_explicit_member_list=t
    fi

  end_function
  handle_return
}

make_context_expand_handle_default() {
  begin_function
    if [[ -v ${dim_type}_${dim}_default ]]; then

      eval "local default=\"\$${dim_type}_${dim}_default\""
      code+="
    '')
      values=( \"$default\" )
    ;;"

    elif [[ -v ${dim_type}_${dim}_default_function ]]; then

      code+="
    '')
    "
      local -n default_fun=${dim_type}_${dim}_default_function
      code+="$(echo "$default_fun" | indent 2)"
      code+="
    ;;"

    else

      code+="
    '')
      problem=\"Missing required parameter: $dim\"
    ;;"

    fi
  end_function
  handle_return
}

make_context_expand_members_unknown() {
  begin_function
    code+="
    all)
      problem=\"'all' member not available for this dim: $dim\"
    ;;
    *)
      values=( \"\$value\" )
    ;;
  esac
}"
  end_function
  handle_return
}

make_context_expand_members_known() {
  begin_function
    local quoted_members= members_with_pipes=${members[*]} need_quotes=f m
    begin_for m in "${members[@]}"; doo
      quoted_members+="\"$m\" "
      if [[ $m == *\ * ]]; then
        need_quotes=t
      fi
    end_for

    if [[ $need_quotes == f ]]; then
      quoted_members="${members[*]}"
    fi

    local members_with_pipes=${members_with_pipes// /\|}

    code+="
    all)
      values=( $quoted_members )
    ;;
    $members_with_pipes)
      values=( \$value )
    ;;
    *)
      problem=\"Invalid $dim: \$value\"
    ;;
  esac
}"
  end_function
  handle_return
}

make_context_expand_handle_aliases() {
  begin_function
    local a_line first remaining
    begin_for a_line in "${aliases[@]}"; doo
      first=${a_line%% *}
      remaining=${a_line#* }
      code+="
    $first)
      values=( $remaining )
    ;;"
    end_for
  end_function
  handle_return
}

make_or_load_context_expand2() {
  begin_function

    local members=() aliases=() \
      has_explicit_member_list=f fun \
      is_optional=f

    if [[ -v ${dim_type}_${dim}_is_optional ]]; then
      local -n is_optional_var=${dim_type}_${dim}_is_optional
      if [[ $is_optional_var == t ]]; then
        is_optional=t
      fi
    fi
    write_or_load var "${dim_type}_${dim}_is_optional=$is_optional" || fail

    if [[ -v ${dim_type}_${dim}_members ]]; then
      eval "members=( \"\${${dim_type}_${dim}_members[@]}\" )" || fail

      if [[ ${#members[*]} -eq 0 ]]; then
        log_fatal "There are no members defined for $dim."
        fail1
      fi

      has_explicit_member_list=t
    else
      make_context_expand_find_members
    fi

    if [[ -v ${dim_type}_${dim}_aliases ]]; then
      eval "aliases=( \"\${${dim_type}_${dim}_aliases[@]}\" )" || fail
    fi

    code="
${dim_type}_${dim}_expand() {
  problem=
  case \"\$value\" in"

    make_context_expand_handle_default || fail

    if (( ${#aliases[*]} > 0 )); then
      make_context_expand_handle_aliases || fail
    fi

    if [[ $has_explicit_member_list == f ]]; then
      make_context_expand_members_unknown || fail
    else
      make_context_expand_members_known || fail
    fi

    write_or_load fun "$code" || fail

  end_function
  handle_return
}

make_or_load_context_expand() {
  begin_function

    if [[ ! -d $seed_path ]]; then
      log_fatal "No configuration in seed at $seed_path"
      fail1
    fi

    local dim dim_type o
    begin_for dim_type in trunk_dims sub_dims props; doo
      local -n dims=$dim_type
      begin_for dim in ${dims[*]:-}; doo
        make_or_load_context_expand2 || fail
      end_for
    end_for

  end_function
  handle_return
}

make_or_load_dna_contents_dna_root() {
  begin_function
    local dna_folder=${dna_folder:-}
    if [[ $folder == */.dna ]]; then
      dna_folder=$folder
    fi
    local child_path=${folder#$dna_folder} root_path
    local dna_root
    begin_for dna_root in $dna_roots; doo
      if [[ -d $dna_root$child_path ]]; then
        local new_items=$(find1 $dna_root$child_path -not -name '.*' -not -name 'dna-root' | sort -g) || fail
        items+="$NL$new_items"
      fi
    end_for
  end_function
  handle_return
}

make_or_load_dna_contents_dna_root_handle_dir() {
  begin_function
    if [[ "$current_var" && $item_var != _* ]]; then
      array_content+=( "$item_name" )
      if [[ -L $item || -d $item ]]; then
        result="${current_var}_${item_var}_path=$real_path"
        write_or_load var "$result" || fail
      fi
    fi

    if [[ ! -d $real_path/.dna ]]; then

      local new_pass_thru=f

      if [[ $item_var != _* ]]; then
        new_prefix+=${item_var}_
      else
        new_pass_thru=t
      fi

      # recursive
      prefix=$new_prefix pass_thru=$new_pass_thru make_or_load_dna_contents $item || fail

    fi
  end_function
  handle_return
}
 
make_or_load_dna_contents_dna_root_handle_file() {
  begin_function
    if [[ -L $item && ! -e $item ]]; then
      if [[ $real_path == /work/* ]]; then
        make_or_load_dna_contents_update_cell $real_path || fail
      else
        log_fatal "Broken link found: $item"
        fail1
      fi
    fi
    prefix=$new_prefix make_or_load_dna_item $item || fail
  end_function
  handle_return
}

# requires dna_roots
make_or_load_dna_contents() {
  local folder=$1 prefix=${prefix:-} \
    pass_thru=${pass_thru:-f} recursive=${recursive:-t} \
    ignore_unknown=${ignore_unknown:-f} \

  begin_function

    local items=$(find1 $folder -not -name '.*' -not -name 'dna-root' | sort -g) || fail

    if [[ "$dna_roots" && $folder != */dna-root/* ]]; then
      make_or_load_dna_contents_dna_root || fail
    fi

    local current_var=${prefix%_} ord item_name item_var= result 
    if [[ $pass_thru == f ]]; then
      local array_content=( )
    fi
    current_var=${current_var//-/_}

    begin_for item in $items; doo

      item_name=${item##*/}
      extract_simple_name item_name ord item_var

      local new_prefix= 
      if [[ "$current_var" ]]; then
        new_prefix=${current_var}_
      fi

      local real_path=$(realpath -m $item)

      if [[ ! -e $real_path ]]; then
        if [[ $real_path == /work/* ]]; then
          local seed_path
          find_seed_path $real_path || fail
          deep=t plant_seed_internal "$seed_path" "$real_path" || fail
        else
          log_fatal "Missing file in dna: $item"
          fail1
        fi
      fi

      if [[ -d $item ]]; then
        if [[ $recursive == t ]]; then
          make_or_load_dna_contents_dna_root_handle_dir || fail
        fi
      else
        make_or_load_dna_contents_dna_root_handle_file || fail
      fi

    end_for

    if [[ "$current_var" && "${array_content:-}" && $pass_thru == f ]]; then
      make_array_assignment $current_var array_content || fail
      write_or_load var "$array_assignment" || fail
    fi

  end_function
  handle_return
}

cleanup_dims() {
  local type
  for type in trunk_dims sub_dims props; do
    extract_simple_name_across_array $type $type || fail
  done
}

make_or_load_context() {
  local log_vars=cell_path log_show_vars=short_cell
  begin_function

    log_debug "Loading context for $short_cell" || fail
    local item_name last_part dna_full_item suffix \
      context_make=$context_make \

    if [[ $context_make == t ]]; then
      echo "#!/usr/env bash
# WARNING: This file is auto-generated from $dna_path" >$context_path.new || fail
      local last_type=fun
    fi

    derive_tables=()
    if [[ -d $dna_path ]]; then
      local dna_roots=$(find -L $dna_path -name up -prune -o -name down -prune -o -name dna-root -print | sort -g) || fail
      prefix= make_or_load_dna_contents $dna_path || fail
    elif [[ -f $dna_path ]]; then
      if [[ $context_make == t ]]; then
        cp $dna_path $context_path || fail
      fi
      source $dna_path || fail
    else
      log_vars=dna_path log_fatal "dna not found"
      fail1
    fi

    cleanup_dims || fail
    make_or_load_context_dims || fail
    make_or_load_context_expand || fail
    
    if [[ $context_make == t ]]; then
      mv $context_path.new $context_path || fail
    fi

  end_function
  if failed; then
    rm $context_path.new
  fi
  handle_return
}

load_context() {
  context_make=f make_or_load_context 
}

make_context() {
  context_make=t make_or_load_context 
}

# inputs: up_path up_name 
link_choices() {
  begin_function
    local choice_var choice_name o
    mkdir -p $dep_path/choices || fail
    begin_for choice_name in ${choices[*]}; doo
      extract_simple_name choice_name o choice_var
      local -n choice_path=up_${up_var}_choices_${choice_var}_path
      if [[ ! -v choice_path ]]; then
        log_fatal "Missing choice path var"
        fail1
      fi
      if [[ ! -d $choice_path ]]; then
        log_fatal "Missing choice path"
        fail1
      fi
      safe_link $choice_path $dep_path/choices/$choice_name || fail
    end_for
  end_function
  handle_return
}

make_cyto_inner() {
  begin_function
    mkdir $inner_path || fail
    local inner_name
    begin_for inner_name in ${inner[*]}; doo
      local dep_path=$inner_path/$inner_name \
        inner_var=${inner_name//-/_}
      local -n path=inner_${inner_var}_path
      if [[ ! -v path ]]; then
        log_fatal "Missing inner path var"
        fail1
      fi
      if [[ ! -d $path ]]; then
        log_fatal "Missing inner path"
        fail1
      fi
      safe_link $path $dep_path || fail
    end_for
  end_function
  handle_return
}

make_cyto_up() {
  begin_function
    mkdir $up_path || fail
    local up_name o
    begin_for up_name in ${up[*]}; doo
      local dep_path=$up_path/$up_name \
        up_var
      extract_simple_name up_name o up_var
      local -n choices=up_${up_var}_choices
      mkdir $dep_path || fail
      if [[ -v choices ]]; then
        link_choices
      else
        log_fatal "Invalid upstream config for $up_path: Missing choices folder."
        fail1
      fi
    end_for
  end_function
  handle_return
}

# input must be a folder
setup_cell_path_vars() {
  cell_path=$1
  begin_function

    if [[ $cell_path == /seed/* ]]; then
      cell_path=/work${cell_path#/seed}
    fi

    find_seed_path $cell_path || fail

    if [[ ! "${top_cell:-}" ]]; then
      get_top_cell $cell_path || fail
    fi

    dna_path=$cell_path/.dna \
    cyto_path=$cell_path/.cyto \

    context_path=$cyto_path/context \
    dna_key_path=$dna_path/key \
    down_path=$cyto_path/down \
    job_path=$cyto_path/job \
    key_path=$cyto_path/key \
    lock_path=$cyto_path/context \
    req_path=$cyto_path/req \
    status_path=$cyto_path/status \
    tmp_path=$cyto_path/tmp \
    up_path=$cyto_path/up \
    up_chosen_path=$cyto_path/up-chosen \
    inner_path=$cyto_path/inner \
    mock_path=$seed_path/.mock \

    if [[ "${job_path:-}" ]]; then
      replay_path=$job_path/pipe_replay
    else
      unset replay_path
    fi

  end_function
  handle_return
}

# inputs:
#   cell_path
#   anchor_dims (as a space separated string)
switch_context() {

  if [[ "${last_context_loaded:-}" != $cell_path ]]; then

    local log_vars=last_context_loaded log_show_vars=^cell_path
    begin_function

      if [[ ! -e $cell_path/.dna ]]; then
        log_fatal "$cell_path is not a cell"
        fail1
      fi

      load_branch_info $cell_path || fail

      last_context_loaded=$cell_path

      setup_cell_path_vars $cell_path || fail
      init_context || fail

      local trunk_changed
      if [[ "${prev_trunk_cell:-}" != "$trunk_cell" ]]; then
        trunk_changed=t
      else
        trunk_changed=f
      fi
      prev_trunk_cell=${trunk_cell:-}

      local update_git_commit=f
      if [[ $trunk_changed == t && -e $status_path ]]; then
        git_commit_check || fail
        broken_link_check || fail
      else
        update_git_commit=t
      fi

      if [[ $can_create_cyto == t ]]; then

        if [[ ! -e $cyto_path ]]; then
          mkdir $cyto_path || fail
        fi

        if [[ ! -d $status_path ]]; then
          mkdir $status_path || fail
        fi

        if [[ ! -e $context_path ]]; then
          make_context || fail
        fi

        source $context_path || fail
        cleanup_dims || fail

        if [[ "${up:-}" && ! -d $up_path && $cell_is_leaf == t ]]; then
          make_cyto_up || fail
        fi

        if [[ "${inner:-}" && ! -d $inner_path && $cell_is_leaf == t ]]; then
          make_cyto_inner || fail
        fi

        if [[ $update_git_commit == t ]]; then
          update_only=t git_commit_check || fail
        fi

      else # $can_create_cyto == f
        load_context || fail
        : ${anchor_dims:=${anchor_dims:-${default_anchor_dims:-}}}
      fi

      setup_dep_defaults || fail

      if [[ ! "${out_path:-}" ]]; then
        out_path=$cell_path
      elif [[ "$out_path" != /* ]]; then
        out_path=$cell_path/$out_path
      fi

      local o
      localize_dims=local
      localize_reverse_dims=local
      begin_for dim_type in trunk_dims leaf_dims props; doo
        local -n dim_array=$dim_type
        begin_for dim in ${dim_array[*]}; doo
          get_plural $dim
          dim_plural=$plural
          local ddim=d_$dim ddims=d_$dim_plural pdim=p_$dim pdims=p_$dim_plural
          localize_dims+=" $ddim=\${$ddim:-\${$pdim:-\${$dim:-}}} $ddims=\${$ddims:-\${$pdims:-\${$dim_plural:-\${$ddim:-\${$pdim:-\${$dim:-}}}}}}"
          localize_reverse_dims+=" $dim=\${$ddim:-} $dim_plural=\${$ddims:-}"
          local -n is_secret=${dim_type}_${dim}_is_secret
          if [[ -v is_secret && $is_secret == t ]]; then
            add_word_to_string secret_vars "$dim $dim_plural d_$dim d_$dim_plural"
          fi
        end_for
      end_for

      if [[ "$localize_dims" == 'local' ]]; then
        localize_dims=
      fi

      if [[ ! "${anchor_dims:-}" ]]; then
        anchor_dims=( "${leaf_dims[@]}" )
      else
        local anchor
        if ! is_array anchor_dims; then
          anchor_dims=( $anchor_dims )
        fi
        begin_for anchor in "${anchor_dims[@]}"; doo
          if [[ ! " ${trunk_dims[*]} " == *" $anchor "* ]]; then
            log_fatal "Internal error: dim from anchor_dims not found in leaf_dims: $anchor"
            fail1
          fi
        end_for
      fi

      if [[ -f $cyto_path/current_mock ]]; then
        current_mock=$(<$cyto_path/current_mock)
      else
        current_mock=f
      fi

    end_function
    handle_return

  else
    log_debug "Context already loaded" || fail
    anchor_dims=( ${anchor_dims[*]} )
  fi

  return 0
}

# inputs:
#   derive_table   name of var of derive table
#   out_field      which field to read from the table
#   out_set        which var to write set of valid members to
# outputs:
#   the var output_var points to will contain a set of all matches
execute_derive_table() {
  begin_function        
      
    local -n derive_fields=${derive_table}_fields \
             derive_data=${derive_table}_data \
             out_set=$out_set \

    local field_count=${#derive_fields[*]} \
      data_count=${#derive_data[*]} \
      maybe data_index=0 column_index \
      value= row_result field everything_matches \
      out_field=$out_field \
      invalid=f

    eval "$localize_reverse_dims" || fail
    begin_while (( data_index < data_count )); doo
      everything_matches=t

      begin_for (( column_index = 0; column_index < field_count; column_index++ )); doo
        field=${derive_fields[$column_index]}
        value=${derive_data[$((data_index + column_index))]}
        if [[ $field == $out_field ]]; then
          row_result=$value
        else

          local -n dim_var=d_$field \
            field_var=$field

          if [[ -v field_var \
                && "$field_var" \
                && "$field_var" != "$value" ]]; then
            everything_matches=f
            break
          elif [[ -v dim_var \
                && "$dim_var" \
                && "$dim_var" != "$value" ]]; then
            everything_matches=f
            break
          fi

        fi
      end_for

      if [[ $everything_matches == t ]]; then
        out_set["$row_result"]=1
      fi

      (( data_index += field_count ))
    end_while

  end_function
  handle_return
}

expand_values_check_derive() {
  local old_values_string=${1:-}
  begin_function
    local -A old_values new_values intersected
    if [[ "$old_values_string" ]]; then
      string_to_set old_values_string old_values
    fi
    local derive_table
    begin_for derive_table in ${derive_tables[*]}; doo

      local -n fields=${derive_table}_fields
      if [[ ! -v fields ]]; then
        log_fatal "Internal error: derive_tables contains $derive_table, but there is no ${derive_table}_fields"
        fail1
      fi
      local field found=f
      begin_for field in ${fields[*]}; doo
        if [[ $field == $dim ]]; then
          found=t
          break
        fi
      end_for
      if [[ $found == f ]]; then
        # we don't need to check this table since it doesn't contain the dim
        continue
      fi

      out_field=$dim \
      out_set=new_values \
      execute_derive_table || fail
      if [[ -v old_values[*] ]]; then
        intersect old_values new_values intersected
        copy_set intersected old_values
      else
        copy_set new_values old_values
      fi
    end_for
    keys_to_array old_values values
  end_function
  handle_return
}

expand_values_check_default() {
  begin_function

    local problem
    value= ${dim_type}_${dim}_expand || fail

    if [[ ! "${values:-}" ]]; then

      local -n is_optional_var=${dim_type}_${dim}_is_optional
      local is_optional=f
      if [[ -v is_optional_var && $is_optional_var == t ]]; then
        is_optional=t
      fi

      if [[ "$derive_tables" ]]; then
        expand_values_check_derive || fail
      fi

      if [[ $is_optional == f ]]; then
        if [[ ! "${values:-}" && $can_ask == t ]]; then
          choose "Enter required value: $dim=" d_$dim || fail
          # recursive
          can_ask=f expand_values || fail
        fi

        if [[ ! "${values:-}" ]]; then
          if [[ ${ignore_missing_members:-f} == t ]]; then
            log_verbose "Skipping cell because it isn't a valid combination of members"
            is_valid_coordinate=f
          else
            log_fatal "Missing required $dim_type: $dim"
            fail1
          fi
        fi
      fi

    fi

  end_function
  handle_return
}

expand_values_check_if_too_many() {
  if [[ $check_single == t && ${#values[*]} -gt 1 ]]; then
    log_fatal "Too many values for a singular dim $dim." \
      "Use plural dim $dims if you intend to have multiple values."
    fail1
  fi
}

# input: check_single value
# output: values
expand_values_check_one() {
  begin_function

    ${dim_type}_${dim}_expand || fail
    if [[ "$problem" ]]; then
      log_fatal "$problem"
      fail1
    fi
    expand_values_check_if_too_many || fail

  end_function
  handle_return
}

# input: dim
# optional inputs: dim_type can_ask
# output: values 
expand_values() {
  local dim_type=${dim_type:-trunk_dims} can_ask=${can_ask:-t}
  begin_function

    if ! function_exists ${dim_type}_${dim}_expand; then
      log_fatal "Internal error: Missing ${dim_type}_${dim}_expand function, which should have been created by make_context method"
      fail1
    fi

    eval "values=\${d_$dim:-\${p_$dim:-\${$dim:-}}}"
    local check_single=t

    local plural
    get_plural $dim
    local dims=$plural 

    if [[ ! "$values" ]]; then
      eval "values=\${d_$dims:-\${p_$dims:-\${$dims:-}}}"
      check_single=f
    elif [[ ! "$values" =~ ^[a-zA-Z0-9_]+$ ]]; then
      quotes=single shell_quote_var values
    fi

    local new_values=()
    eval "values=( $values )" || fail

    expand_values_check_if_too_many || fail

    if [[ ! "${values:-}" ]]; then
      expand_values_check_default || fail
    else
      local value
      new_values=()
      begin_for value in "${values[@]}"; doo
        check_single=$check_single expand_values_check_one || fail
        new_values+=( "${values[@]}" )
      end_for
      values=( "${new_values[@]}" )
      if [[ "$derive_tables" ]]; then
        expand_values_check_derive "${values[*]}" || fail
      fi

    fi

  end_function
  handle_return
}

execute_command_internal_prep() {
  begin_function
    can_create_cyto=t

    case $current_command in
      edit)
        if [[ ! "$cell_path" ]]; then
          log_fatal "You must execute this command from within a cell"
          fail1
        fi
        dna_path=$cell_path/.dna
        key_path=$dna_path/key
        status_path=
        if [[ ! -e $key_path ]]; then
          mkdir $key_path || fail
        fi
      ;;
      log|dim-*|plant|up-*)
        branch_dims=()
        command_path=$path_to_commands/$current_command
        setup_cell_path_vars $cell_path || fail
      ;;
      *)

        command_path=$path_to_commands/$current_command
        if [[ -e $command_path.info ]]; then
          source $command_path.info || fail
        else
          log_warn "Missing file $command_path.info" || fail
        fi

        switch_context || {
          log_fatal "Context failed to load for $cell_path"
          fail1
        }

        if [[ "${anchor_dims:-}" ]]; then
          local dim=$anchor_dims
          dim_type=trunk_dims \
          expand_values || fail
          get_plural $dim || fail
          eval "unset $dim" || fail
          eval "unset d_$dim" || fail
          eval "d_$plural=\${values[*]}" || fail
        else
          local prop plural
          begin_for prop in ${props[*]}; doo
            local dim=$prop
            dim_type=props \
            expand_values || fail
            get_plural $dim || fail
            eval "unset $dim" || fail
            if (( ${#values[*]} == 1 )); then
              eval "d_$dim=\${values[*]}" || fail
            else
              eval "unset d_$dim" || fail
            fi
            eval "d_$plural=\${values[*]}" || fail
          end_for
        fi

        if [[ $is_valid_coordinate == f ]]; then
          succeed
        fi

        if function_exists get_update_risk; then
          get_update_risk || fail
        fi

        if (( update_risk > risk_tolerance )); then
          log_fatal "Risk too high"
          log_fatal "The risk of updating $short_cell is too high for the specified tolerance ($update_risk > $risk_tolerance)."
          log_fatal "Try a less risky strategy or increase the risk tolerance of this command (with the risk parameter)"
          fail1
        fi

      ;;
    esac
  end_function
  handle_return
}

cell_open_log_file() {
  begin_function
    if [[ ! "${log_path:-}" ]]; then
      log_fatal "Internal error: log_path should be set at this point"
      fail1
    fi
     
    if [[ "${omni_log_job_id:-0}" != 0 && $disable_log == f ]]; then
      cell_log_file_stack+=( $logging_to_file )
      previous_fork_id=$omni_log_fork_id
      get_new_fork_id || fail
      local new_log_file=$log_path/$omni_log_job_id:$new_fork_id.olog
      local first_log_path=${new_log_file%/*}/first.olog
      if [[ ! -f $first_log_path ]]; then
        from_must_exist=f \
          safe_link $new_log_file $first_log_path || fail
      fi
      omni_log_fork_id=$new_fork_id
      log_function=${FUNCNAME[1]} \
        change_log_file || fail
    fi
  end_function
  handle_return
}

cell_close_log_file() {
  begin_function
    if [[ "${cell_log_file_stack:-}" ]]; then
      local previous_log=${cell_log_file_stack[-1]}
      omni_log_fork_id=$previous_fork_id
      unset cell_log_file_stack[-1]
      log_function=${FUNCNAME[1]} \
        new_log_file=$previous_log \
        resume_existing_log=t \
        logging_to_file= \
        change_log_file || fail
    fi
  end_function
  handle_return
}

get_job_id() {
  begin_function

    if [[ ! -v job_id_log ]]; then
      log_fatal "Internal error: Missing job_id_log"
      fail1
    fi

    timeout=5 lock_path=$job_id_log fd_write_lock || {
      log_fatal "Failed to get lock on $job_id_log" 
      fail1
    }

    if [[ -f "$job_id_log" ]]; then
      local last_id=$(tail -n1 $job_id_log | awk '{print $1}')
      (( omni_log_job_id = last_id + 1 ))
    else
      omni_log_job_id=1
    fi

    if [[ ! "$command_to_log" ]]; then
      log_fatal "Missing command to log."
      fail1
    fi

    echo "$omni_log_job_id $cell_path $command_to_log" >>$job_id_log || fail

    fd_unlock

  end_function
  handle_return
}

execute_command_log_prep() {
  begin_function
    local cyto_path=$cell_path/.cyto
    if [[ ! -d $cyto_path ]]; then
      mkdir $cyto_path || fail
    fi

    local job_path=$cyto_path/job
    if [[ ! -d $job_path ]]; then
      mkdir $job_path || fail
    fi

    if [[ "${omni_log_job_id:-0}" == 0 ]]; then
      job_start_time=${EPOCHREALTIME//./}
      command_to_log="${original_cmd#* }" \
        get_job_id || fail
    fi

    current_job_path=$job_path/$omni_log_job_id
    if [[ ! -d $current_job_path ]]; then
      mkdir $current_job_path || fail
    fi

    # only set this for the first cell in the job, all other cells should 
    #   use the same fork_id log so that they all have unique ids across the job
    if [[ ! "${fork_id_log:-}" ]]; then
      fork_id_log=$current_job_path/fork-id-log
    fi

    log_path=$current_job_path/log
    if [[ ! -d $log_path ]]; then
      mkdir $log_path || fail
    fi

    background_log=$log_path/background

    running_job_path=$job_path/running

    local link_target
    begin_for link_target in $current_command-attempt attempt; doo
      if [[ -e "$job_path/last-$link_target" ]]; then
        mv $job_path/last-$link_target $job_path/prev-$link_target || fail
      fi
      safe_link $current_job_path $job_path/last-$link_target || fail
    end_for

  end_function
  handle_return
}

execute_command_internal() {

  local log_vars='cell_path' \
    log_show_vars='short_cell current_command' 
  begin_function_hi

    if [[ "${localize_dims:-}" ]]; then
      eval "$localize_dims" || fail
    fi

    execute_command_internal_prep || fail

    if [[ $is_valid_coordinate == f ]]; then
      succeed
    fi

    # This is in this function twice, because it changes after switch_context
    if [[ "${localize_dims:-}" ]]; then
      eval "$localize_dims" || fail
    fi

    if [[ " ${command_history:-}" == *" $current_command $short_cell "* ]]; then
      log_fatal "Circular dependency found: arrived at $current_command $short_cell a second time."
      fail1
    fi

    command_history+="$current_command $short_cell "

    if [[ ${cell_is_leaf:-t} == t || $show_branches == t ]]; then
      log_info "Executing cell command: $short_cell $current_command"
    else
      log_verbose "Executing cell command: $short_cell $current_command" || fail
    fi

    if [[ -f $command_path.info ]]; then
      execute_command_internal_setup_params || fail
    fi

    source $command_path || fail
    local command_function=${current_command//-/_}_command
    if function_exists $command_function; then
      $command_function || fail
    else
      log_fatal "Missing command function $command_function which should be in $command_path"
      fail1
    fi

  end_function
  handle_return
}

execute_command() {
  local cell_path=$(realpath $1) current_command=$2 \
    log_show_vars='^cell_path current_command' \
    is_valid_coordinate=t

  begin_function_hi

    if [[ $cell_path != /work* ]]; then
      log_fatal "You must run this command from within the workspace (any subfolder of /work)"
      fail1
    fi

    local anchor_dims=${anchor_dims:-} \
      disable_log=${disable_log:-} \
      $branch_local_vars \
      logging_to_file=${logging_to_file:-} \
      omni_log_job_id=${omni_log_job_id:-} \
      omni_log_fork_id=${omni_log_fork_id:-} \
      previous_fork_id=${previous_fork_id:-} \
      job_path=${job_path:-} \
      log_path=${log_path:-} \
      current_job_path=${current_job_path:-} \
      job_start_time \
      background_log \
      running_job_path \

    load_branch_info || fail

    if [[ ! -e "$cell_path" ]]; then
      plant_seed $cell_path || {
        log_fatal "Not a cell: $cell_path"
        fail1
      }
    fi

    if [[ ! "${disable_log:-}" ]]; then
      case $current_command in 
        log|edit|dim-*|up-*|plant|get)
          disable_log=t
        ;;
        *)
          disable_log=f
        ;;
      esac
    fi

    if [[ $disable_log == t ]]; then
      log_debug "Logging disabled." || fail
    else
      execute_command_log_prep || fail
    fi

    local should_fork=t 
    if [[ ${top_level_command:=t} == t ]]; then
      should_fork=f
    elif [[ "$prev_trunk_cell" == "$trunk_cell" ]]; then
      should_fork=f
    fi
    
    if [[ $should_fork == t ]]; then
      fork execute_command_internal || fail_later
    else
      if [[ $disable_log == f ]]; then
        previous_log_pos=$omni_log_pos
        cell_open_log_file || fail
        (( previous_log_pos++ ))
      fi
      execute_command_internal || fail_later
      if [[ $disable_log == f ]]; then
        cell_close_log_file || fail
      fi
    fi

  end_function
  handle_return
}

make_or_load_dna_contents_update_cell() {
  local file=$1 original_cell_path=$cell_path cell_path work_path
  begin_function

    local bottom_cell cell_path parent=${file%/*}
    if [[ ! -d "$parent" ]]; then
      ignore_nonexistent=t plant_seed $parent || fail
      cell_path=$work_path
    else
      get_bottom_cell $parent
      if [[ ! "$bottom_cell" ]]; then
        log_fatal "Could not find cell for $file"
        fail1
      fi
      cell_path=$bottom_cell
    fi

    needs_update= \
    top_level_command=f \
    anchor_dims= \
    execute_command "$cell_path" update || fail

    if [[ ! -f "$file" ]]; then
      log_fatal "Cell $cell_path did not produce file at $file as required by dna of $original_cell_path"
      fail1
    fi

  end_function
  handle_return
}

load_repo_paths() {
  declare -gA repo_paths
  begin_function
    local repos=$(find1 /repo -not -name '.*' -type d) || fail
    local repo 
    begin_for repo in $repos; doo
      if [[ -d $repo/seed ]]; then
        local modules=$(find1 $repo/seed -not -name '.*' -type d) || fail
        local module
        begin_for module in $modules; doo
          module=${module##*/}
          repo_paths[$module]=$repo
        end_for
      fi
    end_for
  end_function
  handle_return
}

setup_dep_defaults() {
  required_freshness=${fresh:-${default_freshness:-}}
  # Make this go back to default for any further contexts loaded
  # fresh passed in by user should only apply to top level cell, not to deps or subs
  # Actually, we want freshness to pass down to subs, but not deps
  # fresh=
  return 0
}

# inputs: omni_log_fork_id child_log_id
# outputs: new_fork_id
get_new_fork_id() {
  : ${child_log_id:=0}
  (( child_log_id++ ))
  if [[ "${omni_log_fork_id:-}" ]]; then
    new_fork_id=$omni_log_fork_id-$child_log_id
  else
    new_fork_id=$child_log_id
  fi
  return 0
}

reply_to_caller() {
  if [[ "${reply_file:-}" ]]; then
    echo "$*" >>$reply_file || return 1
  fi
  return 0
}

# this should be run in a subshell
fork_inside() {

  begin_function

    local change_log2=$change_log
    # Prevents this variable from bleeding through to lower called functions
    change_log=

    if [[ $change_log2 == t ]]; then
      previous_log_pos=$omni_log_pos
      cell_open_log_file || fail
      (( previous_log_pos++ ))
    fi

    cleanup_on_exit=
    setup_exit_trap

    if [[ "$to_var" ]]; then
      eval "$to_var=\$($command)"; return_code=$?
      reply_to_caller "$to_var='${!to_var}'" || fail
    else
      eval "$command"; return_code=$?
    fi

    if [[ $change_log2 == t ]]; then
      cell_close_log_file || fail
    fi

  end_function

  if [[ "${debugging:-}" == t ]]; then
    reply_to_caller "debug_state_file='${debug_state_file:-}'; debugging=t" || fail
  fi

  if (( return_code != 0 )); then
    reply_to_caller "return_code=$return_code" || fail
    return_value=$return_code
  fi

  if [[ $change_log2 == t ]]; then
    reply_to_caller "omni_log_pos=$previous_log_pos" || fail
  fi

  if [[ "${trace_var:-}" ]]; then
    reply_to_caller "$(declare -p trace_var_old)" || fail
  fi

  if [[ "${trace_condition:-}" ]]; then
    reply_to_caller "trace_var_old='$trace_var_old'" || fail
  fi

  reply_to_caller "debug_id_current=$debug_id_current"

  handle_return

}

# run outside of the subshell afterwards
after_fork() {
  if [[ -f "${reply_file:-}" ]]; then
    source $reply_file || return 1
    if [[ ${debugging:-f} == t ]]; then
      local debugging
      debug_load_state || return 1
      debug_immediate=f \
        first_run=f \
        debug_needs_to_load_state=t \
        debug_start || return 1
    fi
    rm $reply_file
    reply_file=
  fi
  return 0
}

get_new_reply_file() {
  reply_file=$tmp_folder/reply.$BASHPID
  if [[ -f $reply_file ]]; then
    log_fatal "reply_file already exists: $reply_file"
    return 1
  fi
  return 0
}

# usage: fork {command to execute}
#  background=f (whether to run as a background process)
#  change_log=f (whether to change the log)
#  to_var       (write output to the given var instead of stdout)
fork() {

  local reply_file command=$* return_code=0 \
    background=${background:-f} \
    change_log=${change_log:-f} \
    to_var=${to_var:-}

  if [[ $background == t ]]; then
    change_log=t
  fi

  : ${log_id_part:=0}
  (( log_id_part++ ))

  get_new_reply_file || return 1
  defer "rm $reply_file"

  if [[ $background == t ]]; then
    ( fork_inside ) &
  else
    ( fork_inside )
  fi
  return_code=$?

  after_fork || (( return_code++ ))

  return $return_code
}

fork_fg() {
  background=f fork "$@"
}

fork_bg() {
  background=t fork "$@"
}

# same as for_each_leaf but faster but can't divide into parallel processes or fork
# use for simple cases
for_each_leaf_flat() {
  local dim_array=( $* ) multi_cell \
    dim_type=${dim_type:-trunk_dims} \
    leaf_function=$function

  begin_function

    log_debug "Checking leaves of $short_cell" || fail
    if [[ "$localize_dims" ]]; then
      eval "$localize_dims" || fail
    fi
    local member_index_stack \
      member_index_stack_count \
      member_stack \
      member_stack_count \
      leaf_path_stack \
      branch_values \
      member_index \
      dim dim_index dim_count=${#dim_array[*]} \
      leave_loop=${leave_loop:-0} \
      branch_values \
      leaf_path \
      i value
    local last_row_index=$((dim_count-1))

    begin_loop; doo

      if [[ "${member_index_stack:-}" ]]; then
        member_index_stack_count=${#member_index_stack[*]}
      else
        member_index_stack_count=0
      fi

      local -n member_row
      local member_row_count
      if [[ "${member_stack:-}" ]]; then
        member_row=${member_stack[$last_row_index]}
        member_row_count=${#member_row[*]}
      fi

      if (( member_index_stack_count < dim_count )); then
        for_each_leaf_flat_expand_members || fail
      elif (( member_index == member_row_count - 1 )); then
        begin_while (( member_index == member_row_count - 1 )); doo
          unset member_index_stack[-1] \
            leaf_path_stack[-1] \
            branch_values[-1] \
            member_stack[-1]
          if [[ ${#member_index_stack[*]} == 0 ]]; then
            succeed
          fi
          member_index=${member_index_stack[-1]}
          member_row=${member_stack[-1]}
          member_row_count=${#member_row[*]}
        end_while
        let member_index++ || true
        for_each_leaf_flat_expand_members || fail
      elif [[ ! "${member_index:-}" ]]; then
        member_index=0
      else
        let member_index++ || true
      fi

      member_row=${member_stack[$last_row_index]}
      if [[ "${#member_row[*]}" -gt 1 ]]; then
        multi_cell=t
      else
        multi_cell=f
      fi

      value=${member_row[$member_index]}
      get_sane_value "$value"

      if (( ${#leaf_path_stack[*]} > 1 )); then
        leaf_path=${leaf_path_stack[-2]}/.dim/$sane_value
      else
        leaf_path=/.dim/$sane_value
      fi

      branch_values[-1]=$value
      eval "local d_$dim=\$value"

      $leaf_function || fail

      if [[ $leave_loop -gt 0 ]]; then
        let leave_loop-- || true
        break
      fi
      
    end_loop

  end_function
  handle_return
}

for_each_leaf_flat_expand_members() {
  begin_function
  local row 
  if [[ "${member_stack:-}" ]]; then
    member_stack_count=${#member_stack[*]}
  else
    member_stack_count=0
  fi
  begin_for ((row=member_stack_count; row < dim_count; row++)); doo

    dim=${dim_array[$row]}
    dim_type=trunk_dims \
    expand_values || fail
    value=$values
    eval "local d_$dim=\$value"
    branch_values+=( "$value" )

    eval "members$row=( \"\${values[@]}\" )"
    member_stack+=( members$row )

    if [[ "${member_index_stack:-}" ]]; then
      member_index_stack[-1]=$member_index
    fi
    member_index=0
    member_index_stack+=( 0 )

    local previous_leaf_stack
    if (( row > 0 )); then
      previous_leaf_path=${leaf_path_stack[-1]}
    else
      previous_leaf_path=
    fi

    get_sane_value "$value"
    leaf_path_stack+=( $previous_leaf_path/.dim/$sane_value )

  end_for

  end_function
  handle_return
}

# will construct cell_values array with current set of values of the
#   cell dims, which can be used in branch or leaf functions
for_each_leaf() {

  local dim_array=( $* ) multi_cell=f \
    leaf_function=$function leave_loop=${leave_loop:-0} \
    fork=${fork:-t} \
    par=${par:-t}

  local dim=${dim_array[0]} \
    remaining_dims=( ${dim_array[*]:1} ) \
    function= \
    branch_values=${branch_values[*]:-()} \
    leaf_path=${leaf_path:-}

  local log_vars='dim fork par function'
  begin_function

    dim_type=trunk_dims \
    expand_values || fail

    if [[ "${#values[*]}" -gt 1 ]]; then
      multi_cell=t
    fi

    local loop_function=$leaf_function
    if [[ "${remaining_dims:-}" ]]; then
      loop_function="function=\"$leaf_function\" for_each_leaf ${remaining_dims[*]}"
    fi

    branch_values+=()
    local parent_leaf_path=$leaf_path
    loop_over_var=values \
      head="local member=\$value
        branch_values[-1]=\$value
        get_sane_value \"\$value\"
        leaf_path=$parent_leaf_path/.dim/\$sane_value
        eval \"local d_$dim=\$member\"
        par=\$par2 fork=\$fork2
        " \
      body=$loop_function \
      tail='
        if [[ $leave_loop -gt 0 ]]; then
          break
        fi
        ' \
      parallel_loop || fail

  end_function
  handle_return
}

get_prop_changed() {
  local cell_path=$1 \
    status_path=$cell_path/.cyto/status \
    prop_hash=0 \
    value
  prop_changed=t
  if [[ ! "${props:-}" ]]; then
    prop_changed=f
  elif [[ -d $status_path ]]; then
    local -r status_file=$status_path/last_run_prop_hash
    get_prop_hash || return 1
    if [[ -f $status_file && "$prop_hash" == $(<$status_file) ]]; then
      prop_changed=f
    fi
  fi
  return 0
}

update_prop_hash() {
  local prop_hash
  get_prop_hash || return 1
  local -r status_file=$status_path/last_run_prop_hash
  echo "$prop_hash" >$status_file || return 1
  return 0
}

get_prop_hash() {
  local prop=
  for prop in ${props[*]:-}; do
    if [[ -v d_$prop ]]; then
      eval "value=\$d_$prop"
      prop_hash=$(echo "$prop=$value" | sha1sum) || return 1
    fi
  done
  return 0
}

get_is_stale() {
  local status_path=$status_path
  begin_function
    is_stale=t
    if [[ ! "$required_freshness" || "$required_freshness" == inf ]]; then
      is_stale=f
    elif [[ $required_freshness != 0 ]]; then
      local fresh_seconds
      convert_to_seconds $required_freshness fresh_seconds || fail
      local fresh_cutoff=$((EPOCHSECONDS-fresh_seconds)) \
        out_timestamp= 
      is_stale=f
      if [[ -f $status_path/last-good-update-end ]]; then
        out_timestamp=$(date -r $status_path/last-good-update-end +%s)
      fi
      if [[ "$out_timestamp" && $out_timestamp -lt $fresh_cutoff ]]; then
        is_stale=t
      fi
    fi
  end_function
  handle_return
}

wait_for_low_load() {
  local cell_max_load=${cell_max_load:-10}
  local cell_load_wait_timeout=${cell_load_wait_timeout:-600}
  local current_load=$(uptime | sed -E 's/.*average: ([0-9]*).*/\1/')
  if [[ $current_load -gt $cell_max_load ]]; then
    log_warn "Load average is too high ($current_load > $cell_max_load)," \
      "waiting until things cool down first." || fail
    local time_waited=0
    while [[ $current_load -gt $cell_max_load ]]; do
      current_load=$(uptime | sed -E 's/.*average: ([0-9]*).*/\1/')
      sleep 5; let time_waited+=5
      if [[ "$cell_load_wait_timeout" -gt 0 && $time_waited -ge $cell_load_wait_timeout ]]; then
        log_fatal "Timed out waiting for cpu load to be low enough. Aborting"
        return 1
      fi
    done
  fi
  return 0
}

# run within the subshell at the beginning
begin_fork() {
  return 0
}

reply_file=

# input: parallel processes
wait_for_sub_processes() {
  begin_function
    if [[ "$processes" ]]; then
      log_debug "Waiting for sub processes to complete" || fail
      local process last_err_code= last_failed_process= rc
      for process in $processes; do
        log_debug "Waiting for process $process" || fail
        wait $process &>/dev/null; rc=$?
        if [[ $rc -gt 0 && $rc -lt 127 ]]; then
          if [[ ! "$last_err_code" ]]; then
            last_err_code=$rc
            last_failed_process=$process
          else
            log_fatal "Subprocess $process failed to terminate successfully"
            fail1
          fi
        fi
      done
      after_fork
      if [[ "$last_err_code" ]]; then
        if [[ "$last_err_code" == 1 ]]; then
          log_fatal "Subprocess $last_failed_process failed to terminate successfully"
          fail1
        fi
        return_value=$last_err_code
        break_out=t
        break
      fi
      processes=
    fi
  end_function
  handle_return
}

# 'value' is the loop var
parallel_loop() {
  local loop_over_var2=$loop_over_var head2=${head:-} \
    body2=$body tail2=${tail:-} \
    par2=$par fork2=$fork \
    array 

  # Make sure these variables don't get passed into inner loops
  local loop_over_var= head= body= tail= par= fork=

  local log_show_vars='loop_over_var=loop_over_var2 par=par2 fork=fork2'
  begin_function

    if [[ ! -v $loop_over_var2 ]]; then
      log_fatal "Internal error: Variable doesn't exist: $loop_over_var2"
      stack_trace
      fail1
    fi

    eval "array=( \"\${$loop_over_var2[@]}\" )"
    local parallel=f
    if [[ ${#array[*]} -gt 1 && $parallel_execution == t && $par2 == t ]]; then
      parallel=t
      wait_for_low_load || fail
    fi

    local processes= value
    leave_loop=0

    local extra
    if [[ $parallel == t ]]; then
      extra=" in parallel"
    else
      extra=" sequentially"
    fi

    local size=${#array[*]}
    if (( size > 1 )); then
      log_debug "Looping over $size values$extra. body: $body2" || fail
    fi

    begin_for value in "${array[@]}"; doo

      log_debug "Current iteration value=$value" || fail

      if [[ "$head2" ]]; then
        eval "$head2" || fail
      fi

      if [[ $parallel == t ]]; then
        fork_bg "$body2" 
        processes+=" $!"
      else
        if [[ $fork2 == t ]]; then
          fork_fg "$body2" || fail
        else
          eval "$body2" || fail
        fi
      fi

      if [[ "$tail2" ]]; then
        eval "$tail2" || fail
      fi

    end_for

    wait_for_sub_processes || fail

  end_function
  handle_return
}

get_trunk_cell() {
  trunk_cell=$1
  while [[ $trunk_cell == */*:* ]]; do
    trunk_cell=${trunk_cell%/*}
  done
  debug_return_vars=trunk_cell
}

propagate_change_to_downstream2() {
  begin_function

    local cell=$(realpath $value)

    local t1 t2 trunk_cell
    get_trunk_cell $cell
    t1=$trunk_cell
    get_trunk_cell $from_cell
    t2=$trunk_cell
    if [[ $t1 == $t2 ]]; then
      log_fatal "Cell is propagating change to itself: $cell" 
      fail1
    fi
    
    local status_self=$cell/.cyto/status
    
    if already_in_dep_stack $cell; then
      succeed
    fi
    dep_stack+=( $cell )

    if [[ -d $cell ]]; then
      if [[ -d $status_self ]]; then
        # can't combine these if statements or it will alter the else condition
        #   and break things
        if [[ -f $status_self/up-to-date ]]; then
          rm $status_self/up-to-date || fail
          from_cell=$cell \
            propagate_change_to_downstream || fail
        fi
      else
        # recursive
        from_cell=$cell \
          propagate_change_to_downstream || fail
      fi
    fi

  end_function
  handle_return
}

propagate_change_to_downstream() {
  begin_function

    local from_cell=$from_cell \
      down_path=$from_cell/.cyto/down down_folder folders

    if [[ -d $down_path ]]; then
      local dep_stack=( ${downstream_cell_stack[*]} )
      folders=( $(find1 $down_path -not -name '.*' -type d) ) || fail
      loop_over_var=folders \
      background=f \
        par=f fork=f \
        body=propagate_change_to_downstream2 \
        parallel_loop || fail
    fi

  end_function
  handle_return
}

already_in_dep_stack() {
  local find_dep=$1
  local dep
  for dep in ${dep_stack[*]}; do
    if [[ $dep == $find_dep ]]; then
      return 0
    fi
  done
  return 1
}

# usage: split_ordinal {from_var} {ordinal_part_var} {base_part_var}
split_ordinal() {
  local -n _f=$1 _o=$2 _b=$3
  if [[ $_f =~ ^([0-9]+)-([^/]*)$ ]]; then
    _o=${BASH_REMATCH[1]}
    _b=${BASH_REMATCH[2]}
  else
    _b=$_f
  fi
  debug_return_vars="$2 $3"
}

trace_step_execution=${trace_step_execution:-f}
trace_op=${trace_op:-}

# Usage: execute_op {op name}
# returns 1 if no op found
execute_op() {
  local op_name=$1 op_function= ignore_missing=${ignore_missing:-f}

  local log_vars='cell_path op_name'
  begin_function

    op_function=${op_name}_op

    missing=f
    if type -t $op_function &>/dev/null; then

      if [[ $trace_op == $op_name ]]; then
        trace_step_execution=t
      fi

      $op_function || fail

      if [[ $trace_op == $op_name ]]; then
        trace_step_execution=f
      fi

    else

      missing=t
      if [[ $ignore_missing == t ]]; then
        log_debug "No ${op_name}_op function found, ignoring" || fail
      else
        log_fatal "No ${op_name}_op function found"
        fail1
      fi

    fi

  end_function
  handle_return
}

show_parameter_help() {
  local name=$1
  begin_function

    local found=f choices=()

    # TODO this should go away and get replaced with props
    begin_for i in ${!parameter_names[*]}; doo
      if [[ "${parameter_names[$i]}" == $name ]]; then
        out "Parameter: $name"

        if [[ -v parameter_descriptions[$i] && "${parameter_descriptions[$i]}" ]]; then
          indent=2 out_wrap "${parameter_descriptions[$i]}"
        fi

        if [[ -v parameter_defaults[$i] && "${parameter_defaults[$i]}" ]]; then
          indent=2 out_wrap "default: ${parameter_defaults[$i]}"
        fi

        if [[ -v parameter_choices[$i] && "${parameter_choices[$i]}" ]]; then
          eval "local choices=( ${parameter_choices[$i]} )"
        elif [[ -v ${name}_choices ]]; then
          eval "local -n choices=${name}_choices"
        elif function_exists ${name}_get_choices; then
          ${name}_get_choices || fail
        fi
        found=t
        break
      fi
    end_for

    if [[ $found == f ]]; then
      local dim_type
      begin_for dim_type in trunk_dims leaf_dims props; doo
        if [[ -v ${dim_type}_${dim}_description ]]; then
          eval "local description=\$${dim_type}_${dim}_description" || fail
          indent=2 out_wrap "$description"
          # TODO write other parameters
          found=t
          break
        fi
      end_for
    fi

    if [[ $found == f ]]; then
      log_warn "No description found for parameter $name" || fail
    fi

    #choose "What should $name be set to? " $name "${choices[@]}" || fail
    choose "$name=" $name "${choices[@]}" || fail

  end_function
  handle_return
}

execute_command_internal_setup_params() {
  begin_function
    if [[ "${parameter_questions:-}" ]]; then
      local p i pi 
      begin_for pi in ${!parameter_questions[*]}; doo
        p=${parameter_questions[$pi]}
        if [[ " ${parameter_delayed_questions:-} " == *\ $p\ * ]]; then
          continue
        fi
        show_parameter_help $p || fail
      end_for
    fi
  end_function
  handle_return
}

# input: 
#   $1=dim
#   function=function to execute for each member
#   fork=whether the process should be forked before executing 
#     the function. (optional)
for_each_member() {
  local dim=$1 \
    function=$function leave_loop=${leave_loop:-0} \
    fork=${fork:-t} \
    par=${par:-t} \
    cell_path=${cell_path:-}

  member_count=0
  local log_vars='fork par' \
    log_show_vars='dim function'
  begin_function

    dim_type=trunk_dims \
    expand_values || fail

    member_count=${#values[*]}

    if (( member_count > 1 )); then
      # don't refine the upstream link if there wuold be multiple matches
      local upstream_cell_link=
    fi

    loop_over_var=values \
      head="local member=\$value dim=$dim command_history=\${command_history:-}
        eval \"local d_$dim=\\\$member\"" \
      body=$function \
      tail='
        if [[ $leave_loop -gt 0 ]]; then
          break
        fi
        ' \
      parallel_loop || fail

  end_function
  handle_return
}

# inputs: parent_path seed_path member
plant_member() {
  begin_function
    local deep=${deep:-f} repair=${repair:-f}
    get_sane_value "$member" || fail
    member_path=$parent_path/$dim:$sane_value
    if [[ ! -d $member_path || $repair == t ]]; then

      local new_path=$member_path.new

      if [[ -d $new_path ]]; then
        rm -rf $new_path || fail
      fi

      mkdir $new_path || fail
      if [[ "$member" != "$sane_value" ]]; then
        echo "$member" >$new_path/.member || fail
      fi

      local seed_path=

      find_seed_path $member_path || fail
      if [[ ! "$seed_path" ]]; then
        log_fatal "No seed is associated with this path: $member_path"
        fail1
      fi

      plant_seed_internal $seed_path $new_path || fail

      if [[ -e $member_path ]]; then
        rm -rf $member_path || fail
      fi
      mv $new_path $member_path || fail

    fi
  end_function
  handle_return
}

# input: $* = cell values in dim order
# output: cell_id = string cell id
get_cell_id() {
  local v
  cell_id=
  for v in "$@"; do
    get_sane_value "$v"
    v=$sane_value
    cell_id+=_$v
  done
  cell_id=${cell_id#_}
}

# log_and_run() {
#   local command=$* secret=${secret:-}
# 
#   local masked_command=$command
#   if [[ "$secret" ]]; then
#     masked_command="${masked_command//$secret/****}"
#   fi
# 
#   log_info "$masked_command"
#   eval "$command"
# }

encrypt_file() {
  local user_private_key=${user_private_key:-~/.ssh/id_rsa}
  local from=$from \
    to=$to \
    key=${key:-$user_private_key}

  begin_function

    if [[ "$to" == */ ]]; then
      to+=${from##*/}
    fi

    if [[ ! -f $from ]]; then
      log_fatal "File doesn't exist: $from"
      fail1
    fi
     
    if [[ -e $to ]]; then
      log_fatal "File already exists: $to"
      fail1
    fi
     
    if [[ ! -f $key ]]; then
      log_fatal "Key doesn't exist: $key"
      fail1
    fi
     
    setup_tmp_path || fail
    if ! log_and_run openssl pkeyutl -encrypt -inkey $key -in $from -out $to; then
      log_fatal "Failed to encrypt file: $from"
      fail1
    fi

  end_function
  handle_return
}

encrypt_file_with_shared_key() {

  setup_tmp_path || return 1

  local from=$from \
    to=$to \
    tmp_path=$tmp_path \
    key_path=$key_path \
    user_private_key=${user_private_key:-~/.ssh/id_rsa}

  log_debug "Encrypting $from to $to" || fail

  local log_vars='from to'
  begin_function_hi

    if [[ ! -f "$from" ]]; then
      log_fatal "Attempting to encrypt non-existent file: $from"
      fail1
    fi

    if [[ -f "$to" ]]; then
      log_fatal "Encrypt: target file already exists: $to"
      fail1
    fi

    if [[ ! -f "$user_private_key" ]]; then
      log_fatal "Private key is missing. Set path to it with user_private_key env var, or put it here: $user_private_key"
      log_fatal "You may create one using: ssh-keygen -mPEM"
      fail1
    fi

    if [[ ! "$tmp_path" ]]; then
      log_fatal "tmp_path must be set to a directory before calling decrypt_file_with_shared_key."
      fail1
    fi

    if [[ ! -d $tmp_path ]]; then
      mkdir -p $tmp_path || fail
    fi

    if [[ ! -d $key_path ]]; then
      mkdir $key_path || fail
    fi

    if [[ ! -f "$key_path/key.$USER" ]]; then

      local key_count=$(find -L $key_path -mindepth 1 -maxdepth 1 -name 'key.*' -type f | wc -l)

      if (( key_count > 0 )); then

        log_fatal "You don't have a key for this cell ($USER). Ask someone who does to add you. Existing keys:" 
        find -L $key_path -name "key.*" >&2
        fail1

      else

        log_debug "There are no keys for this cell yet. Will create a new key." || fail

        # create a new main key
        if ! out_to_file=$tmp_path/main log_and_run openssl rand -base64 40; then
          log_fatal "Failed to generate new main key."
          fail1
        fi
        defer "rm $tmp_path/main"

        # create a compatible public key from the user's private key
        if ! log_and_run openssl pkey -in $user_private_key -out $tmp_path/public -pubout; then 
          log_fatal "Failed to convert private key to public key."
          fail1
        fi

        # encrypt main key with given user key
        if ! log_and_run openssl pkeyutl -encrypt -pubin -inkey $tmp_path/public -in $tmp_path/main -out $key_path/key.$USER; then
          log_fatal "Failed to encrypt main key."
          fail1
        fi

      fi
    else 
      # extract the main key
      if ! log_and_run openssl pkeyutl -decrypt -inkey $user_private_key -in $key_path/key.$USER -out $tmp_path/main; then
        log_fatal "Failed to decrypt main key." 
        fail1
      fi

      defer "rm $tmp_path/main"
    fi
      
    # encrypt the file with main key
    if ! log_and_run openssl enc -aes256 -pbkdf2 -in $from -out $to -pass file:$tmp_path/main; then
      log_fatal "Failed to create new secret file."
      fail1
    fi

  end_function

  if [[ -f $tmp_path/main ]]; then
    rm $tmp_path/main
  fi

  handle_return

}

handle_secure_edit() {

  local log_vars= old_file=$file new_file=$file.new
  begin_function_hi

    setup_tmp_path || fail
    local unsafe_file=${file%.safe}
    local new_unsafe_file=$tmp_path/$unsafe_file.new
    local old_unsafe_file=$tmp_path/$unsafe_file.old

    if [[ -f $new_unsafe_file ]]; then
      log_fatal "$new_unsafe_file already exists, delete that first if you want to edit $file"
      fail1
    fi

    defer "rm $new_unsafe_file"
    defer "rm $old_unsafe_file"

    if [[ -f $old_file ]]; then
      from=$old_file to=$old_unsafe_file decrypt_file_with_shared_key || fail
      cp $old_unsafe_file $new_unsafe_file || fail
    fi

    if [[ "${content:-}" ]]; then
      echo "$content" >$new_unsafe_file || fail
    else
      $EDITOR $new_unsafe_file || fail
    fi

    if [[ -f $old_unsafe_file ]]; then
      if files_are_different $old_unsafe_file $new_unsafe_file >/dev/null; then
        changed=t
      else
        log_debug "No change" || fail
        rm $new_unsafe_file || fail
      fi
    else
      changed=t
    fi

    if [[ $changed == t ]]; then
      from=$new_unsafe_file to=$new_file encrypt_file_with_shared_key || fail
      mv $new_file $old_file || fail
      update_modify_times $new_file || fail
    fi

  end_function
  handle_return
}

handle_insecure_edit() {

  local log_vars= old_file=$file new_file=$file.new
  begin_function_hi

    if [[ -f $old_file ]]; then
      cp $old_file $new_file || fail 
    fi

    if [[ "${content:-}" ]]; then
      echo "$content" | trim_nl >$new_file || fail
    else
      $EDITOR $new_file || fail
    fi

    if [[ -f $old_file ]]; then
      if files_are_different $old_file $new_file >/dev/null; then
        changed=t
      else
        log_debug "No change" || fail
        rm $new_file || fail
      fi
    else
      changed=t
    fi

    if [[ $changed == t ]]; then
      mv $new_file $old_file || fail
      update_modify_times $new_file || fail
    fi

  end_function
  handle_return
}

update_modify_times() {
  local file=$1
  if [[ "$status_path" && -f "$status_path/up-to-date" ]]; then
    rm $status_path/up-to-date || return 1
  fi
  return 0
}

# finds the farthest ancestor of the given path which has .dna in it
# will set top_cell, which will be empty if no cell cells are found
get_top_cell() {
  local subject=$1
  top_cell=
  while [[ "$subject" == /*/* ]]; do
    if [[ -e $subject/.dna ]]; then
      top_cell=$subject
    fi
    subject=${subject%/*}
  done
  debug_return_vars=top_cell
  return 0
}

setup_context_defaults() {
  return 0
}

update_cell_value_file() {
  begin_function
    if [[ "${cell_values:-}" && ! -f $cell_path/cell_values ]]; then
      local v s='cell_values=( '
      for v in "${cell_values[@]}"; do
        s+="\"$v\" "
      done
      s+=')'
      echo "$s" >$cell_path/cell_values || fail
    fi
  end_function
  handle_return
}

get_cell() {
  cell_path=$1
  [[ ${#cell_path} -lt 3 ]] && return 1
  [[ -d $cell_path/.dna ]] && return 0
  [[ -d $cell_path/.cyto ]] && return 0
  get_cell ${cell_path%/*} || return 1
  return 0
}

setup_tmp_path() {
  if [[ ! "${tmp_path:-}" ]]; then
    if [[ -d ${cell_path:-}/.cyto/tmp ]]; then
      tmp_path=$cell_path/.cyto/tmp
    elif [[ -d ~/tmp ]]; then
      tmp_path=~/tmp
    else
      tmp_path=/tmp
    fi
  fi
  if [[ ! -d $tmp_path ]]; then
    mkdir -p $tmp_path || return 1
  fi
  return 0
}

# params: $1 (subject)
# output: workspace
get_workspace() {
  local subject=$1
  workspace=
  while [[ ${#subject} -gt 1 && $subject == */* ]]; do
    if [[ "$subject" == "$top_cell"/* ]]; then
      workspace=$subject
      break
    fi
    subject=${subject%/*}
  done
  [[ "$workspace" ]]
}

# inputs:
#   from    encrypted file to decrypt
#   to      (optional) file to save decrypted form to
#           if 'to' is missing, then it writes the decrypted value to stdout
decrypt_file() {
  local user_private_key=${user_private_key:-~/.ssh/id_rsa}
  local from=$from \
    to=${to:-} \
    to_var=${to_var:-} \
    key=${key:-$user_private_key}

  local log_show_vars='^from ^to to_var'
  begin_function_hi

    if [[ ! "$to" && ! "$to_var" ]]; then
      log_fatal "decrypt_file: Must set either 'to' or 'to_var'"
      fail1
    fi

    pause_tee

    if [[ ! -f $from ]]; then
      log_fatal "File doesn't exist: $from"
      fail1
    fi
     
    if [[ ! -f $key ]]; then
      log_fatal "Key doesn't exist: $key"
      fail1
    fi
     
    if [[ "$to" ]]; then
      if [[ -e $to ]]; then
        log_fatal "File already exists: $to"
        fail1
      fi
      setup_tmp_path || fail
      if ! openssl pkeyutl -decrypt -inkey $key -in $from -out $to; then
        log_fatal "Failed to decrypt file: $from"
        fail1
      fi
    else
      local -n v=$to_var
      v=$(openssl pkeyutl -decrypt -inkey $key -in $from)
      if (( $? > 0 )); then
        log_fatal "Failed to decrypt file: $from"
        fail1
      fi
    fi
     
    unpause_tee

  end_function
  handle_return
}

# inputs: from to tmp_path current_cell
# will write output to file at $to
decrypt_file_with_shared_key() {

  setup_tmp_path || return 1

  local from=$from
  local to=$to
  local tmp_path=$tmp_path
  local key_path=$key_path
  local user_private_key=${user_private_key:-~/.ssh/id_rsa}

  log_debug "Decrypting $from to $to" || return 1

  local log_vars='from to'
  begin_function_hi

    if [[ ! -f "$from" ]]; then
      log_fatal "Attempting to decrypt non-existent file: $from"
      fail1
    fi

    if [[ -s "$to" ]]; then
      log_fatal "Decrypt: target file already exists: $to"
      fail1
    fi

    if [[ ! -f "$user_private_key" ]]; then
      log_fatal "Private key is missing. Set path to it with user_private_key env var, or put it here: $user_private_key"
      log_fatal "You may create one using: ssh-keygen -mPEM"
      fail1
    fi

    if [[ ! "$tmp_path" ]]; then
      log_fatal "tmp_path must be set to a directory before calling decrypt_file_with_shared_key."
      fail1
    fi

    if [[ ! -d $tmp_path ]]; then
      mkdir -p $tmp_path || fail
    fi

    if [[ ! -d $key_path ]]; then
      mkdir $key_path || fail
    fi

    if [[ ! -f "$key_path/key.$USER" ]]; then
      log_fatal "You don't have a key for this cell ($USER). Ask someone who does to add you. Existing keys:" 
      find -L $key_path -name "key.*" >&2
      fail1
    fi

    # extract the main key
    if ! log_and_run openssl pkeyutl -decrypt -inkey $user_private_key -in "$key_path/key.$USER" -out $tmp_path/main; then
      log_fatal "Failed to decrypt main key." 
      fail1
    fi
    defer "rm $tmp_path/main"

    # decrypt the secret file
    if ! log_and_run openssl enc -aes256 -pbkdf2 -in $from -out $to -d -pass file:$tmp_path/main; then 
      log_fatal "Failed to decrypt secret file." 
      fail1
    fi

  end_function
  handle_return

}

get_sane_value() {
  local -r value=$1
  if [[ ${#value} -lt 40 && "$value" =~ ^[A-Za-z0-9_\.:\-]+$ ]]; then
    sane_value=$value
  else
    hash=$(echo "$value" | sha1sum | awk '{ print $1 }')
    sane_value=${hash:0:8}
  fi
  debug_return_vars=sane_value
  return 0
}

is_cell() {
  [[ -d "$1/.dna" ]]
}

is_inside_of_cell() {
  local c=$1
  if [[ $c == "$top_cell"/* ]]; then
    while [[ $c == "$top_cell"/* ]]; do
      if [[ -d $c/.dna ]]; then
        return 0
      fi
      c=${c%/*}
    done
  else
    while [[ $c == /*/* ]]; do
      if [[ -d $c/.dna ]]; then
        return 0
      fi
      c=${c%/*}
    done
  fi
  return 1
}

get_plural() {
  local dim=$1
  if [[ $dim == *s ]]; then
    plural=${dim}es
  elif [[ $dim == *y ]]; then
    plural=${dim%y}ies
  else
    plural=${dim}s
  fi
  debug_return_vars=plural
  return 0
}

load_parent_context() {
  local cell=$1
  local parent=${cell%/*}
  if [[ ${#parent} -gt 1 ]]; then
    load_parent_context $parent || return 1
  fi
  if [[ -f $cell/.dna/context ]]; then
    source $cell/.dna/context || return 1
  fi
  return 0
}

# Used by the help system to describe a command and it's parameters to the user
new_command() {
  local name=$name description=$description
  command_description=$description
  parameter_names=( )
  parameter_descriptions=( )
  parameter_defaults=( )
  parameter_choices=( )
}

add_parameter() {
  local name=$name description=$description default=${default:-} choices=${choices:-}
  parameter_names+=( "$name" ) 
  parameter_descriptions+=( "$description" ) 
  parameter_defaults+=( "$default" ) 
  parameter_choices+=( "$choices" )
}

tee_output_to_log() {
  if [[ "$log_to_file" && "$logging_to_file" && $debugging == f ]]; then
    exec 1> >(tee -a "$logging_to_file") || return 1
    exec 2>&1 || return 1
    eval "exec $fd_trace>&1" || return 1
    BASH_XTRACEFD=$fd_trace
    tee_files+=( $logging_to_file )
  fi
  return 0
}

untee_output() {
  if [[ "$log_to_file" && "$logging_to_file" && $debugging == f ]]; then
    if [[ "${tee_files:-}" ]]; then
      BASH_XTRACEFD=
      exec 1>&$fd_original_out || return 1
      exec 2>&$fd_original_err || return 1
      eval "exec $fd_trace>&$fd_original_trace" || return 1
      unset tee_files[-1]
    else
      # log_warn "untee was called when nothing was teed"
      :
    fi
  fi
  return 0
}

pause_tee() {
  if [[ "${tee_files:-}" ]]; then
    paused_tee_file=${tee_files[-1]}
    untee_output || return 1
  fi
  return 0
}

unpause_tee() {
  if [[ "$paused_tee_file" ]]; then
    tee_output_to_log $paused_tee_file || return 1
    paused_tee_file=
  fi
  return 0
}

# locks the given cell, or fails if it can't obtain a lock
# may lock an individual file instead if the path given isn't a cell
cell_lock() {

  local cell_path=$1 \
    write_lock=${write_lock:-t} \
    timeout=$timeout \
    lock_fd \
    lock_type=read \
    lock_path

  local log_show_vars="timeout ^cell_path"
  begin_function_hi

    if [[ -e $cell_path/.cyto ]]; then
      lock_path=$cell_path/.cyto/context
    else
      log_fatal "Invalid lock path: $cell_path"
      fail1
    fi

    if [[ $write_lock == t ]]; then
      lock_type=write
    fi

    if [[ -f $lock_path ]]; then
      if [[ $write_lock == t ]]; then
        fd_write_lock || fail
      else
        fd_read_lock || fail
      fi
      cell_locks+=( $lock_fd )
    fi

  end_function
  handle_return

}

# locks the given cell, or fails if it can't obtain a lock
cell_unlock() {
  local lock_fd
  for lock_fd in ${cell_locks[*]:-}; do
    fd_unlock || return 1
  done
  return 0
}

get_replay_file() {
  replay_file=$replay_path/pipe_replay.$pipe_replay_hash
  if [[ ! -d $replay_path ]]; then
    mkdir -p $replay_path || fail
  fi

  replay_counter=${replay_counter:-0}
  (( replay_counter++ ))
  local replay_counter_file=$replay_path/pipe_replay-$replay_counter
  ln -sf $replay_file $replay_counter_file || true
}

update_replay_hash() {
  pipe_replay_hash=$(echo -n "$command" | sha1sum | awk '{print $1}')
}

# This can be used directly if a background process is already running
prep_background_communication() {
  local command=$command
  begin_function
    if [[ ! "${pipe_replay_state:-}" ]]; then
      pipe_replay=${pipe_replay:-${replay:-f}}
      # pipe_replay may be: replaying recording disabled

      if [[ $pipe_replay == t ]]; then
        pipe_replay_state=replaying
      else
        pipe_replay_state=${pipe_replay_state:-recording}
      fi
    fi

    pipe_replay_hash=none
    case $pipe_replay_state in
      recording)
        update_replay_hash "$command" || fail
      ;;
      replaying)
        update_replay_hash "$command" || fail
        log_verbose "Replaying pre-recorded $masked_command responses" || fail
      ;;
      disabled)
        :
      ;;
      *)
        log_fatal "Unknown pipe_replay_state: $pipe_replay_state"
        fail1
      ;;
    esac

  end_function
  handle_return
}

start_background_process() {
  local command="$*" secret=${secret:-}
  begin_function
    prep_background_communication || fail
    case $pipe_replay_state in
      recording|disabled)
        log_and_run "$command" || fail
      ;;
    esac
  end_function
  handle_return
}

# should not be called outside of to_background_process
# input:
#   line             command to send to pipe
#   pipe_in
#   pipe_out
#   timeout_to       number of seconds for timeout
#   background_log   (optional) file to write all input/output to 
# output:
#   
to_background_process_single() {
  local command=$1 timeout=$timeout_to

  begin_function

    local timeout_ms=$(dc -e "$timeout 1000 * p")
    timeout_ms=${timeout_ms%.*}

    local masked_command=$command
    if [[ "$secret" ]]; then
      masked_command="${masked_command//$secret/****}"
    fi

    if (( timeout_ms == 0 )); then
      log_debug "Sending output to process without timeout: $masked_command" || fail
      if [[ $pretend == f ]]; then
        if [[ "${background_log:-}" ]]; then
          echo -n "$YELLOW$masked_command$RESET" >>$background_log || fail
        fi
        case $pipe_replay_state in recording|replaying)
          update_replay_hash "$command" || fail
        esac
        if [[ $pipe_replay_state != replaying ]]; then
          echo -n "$command" >$pipe_in || fail
        fi
      fi
    else

      local pid \
        time_left=$timeout_ms \
        wait_message=f \
        delay_ms=250
      local delay_s=$(dc -e "$delay_ms 1000 3 k / p")

      log_debug "Sending output to process with ${timeout}s timeout: $masked_command" || fail

      timed_out=f wait_time=0

      if [[ "${background_log:-}" ]]; then
        echo -n "$YELLOW$masked_command$RESET" >>$background_log || fail
      fi

      if [[ $pipe_replay_state != replaying ]]; then

        echo -n "$command" >$pipe_in &
        pid=$!

        begin_while ps $pid &>/dev/null; doo

          log_debug "Waiting $delay_s sec for background process to be running" || fail
          sleep $delay_s || fail

          (( time_left -= delay_ms 
           , wait_time += delay_ms ))

          if (( time_left <= 0 )); then
            log_debug "Timed out trying to execute: $masked_command" || fail
            timed_out=t
            kill $pid || log_warn "Failed to kill $pid"
            break
          fi

          if (( wait_time > 4000 )) && [[ $wait_message == f ]]; then
            log_warn "${NL}Waiting for pipe to be open (time_left=$time_left)" || fail
            wait_message=t
          fi

        end_while
        local wait_time_s=$(dc -e "$wait_time 1000 / p")
        log_debug "Finished waiting. Took ${wait_time_s}s." || fail

      fi

    fi

  end_function
  handle_return
}

to_background_process() {

  local -n from=$from_var
  local masked_from=$from \
      secret=${secret:-} \

  if [[ "$secret" ]]; then
    masked_from=${from//$secret/****}
  fi

  local log_show_vars='from=masked_from pipe_replay timeout_to' \
    log_vars='pipe pretend'
  begin_function_hi

    if [[ ! "${pipe_replay_state:-}" ]]; then
      log_fatal "to_background_process was called without running start_background_process first"
      fail1
    fi

    local pipe_in=${pipe}_in pipe_out=${pipe}_out \
      pretend=${pretend:-f} \
      sleep_between_lines=${sleep_between_lines:-0} \
      timeout_to=${timeout_to:-0.5} \

    if [[ ! -p $pipe_in ]]; then
      log_fatal "Invalid FIFO: $pipe_in"
      fail1
    fi

    from="${from%%*([$NL $TAB])}$NL"

    if (( sleep_between_lines > 0 )); then
      local line
      while IFS= read -r line || [[ "$line" ]]; do
        to_background_process_single "$line" || fail
        if [[ $timed_out == t ]]; then
          succeed
        fi
        sleep $sleep_between_lines
      done <<<"$from"
      handle_break
    else
      to_background_process_single "$from" || fail
    fi

  end_function
  handle_return
}

from_background_process__record_line() {
  local no_newline=${no_newline:-f}
  local result=$line
  [[ "$no_newline" == f ]] && result=$result$NL
  to+=$result

  case $pipe_replay_state in
    recording)
      echo "$line" >>$replay_file || return 1
      log_debug "Recording line to replay file: $line" || fail
    ;;
    replaying)
      log_debug "Replaying line: $line" || fail
    ;;
  esac

  if [[ "${background_log:-}" ]]; then
    echo "$line" >>$background_log || return 1
  fi

  return 0
}

# sets found or failed
from_background_process__check_line() {
  begin_function

    if [[ "$fail_after" ]]; then
      begin_for ((i=0; i < succeed_after_count; i++)); doo
        if [[ "$line" =~ ${fail_after[$i]} ]]; then
          log_debug "Failed after [${fail_after[$i]}]" || fail
          failed=t
          succeed
        fi
      end_for
    fi

    if (( interact_count > 0 )); then
      local pretend=$pretending
      begin_for ((i=0; i < interact_count; i++)); doo
        if [[ "$line" =~ ${interact_in[$i]} ]]; then
          log_debug "Interact matched [${interact_in[$i]}]" || fail
          local output=${interact_out[$i]}
          pretend=$pretend secret="$secret" from_var=output to_background_process || fail
          interacted=t
          undefer "exec $back_fd>&-" || fail
          get_replay_file || fail
          exec {back_fd}<>$replay_file || fail
          defer "exec $back_fd>$-"
          break
        fi
      end_for
    fi

    if [[ "$succeed_after" ]]; then
      begin_for ((i=0; i < succeed_after_count; i++)); doo
        if [[ "$line" =~ ${succeed_after[$i]} ]]; then
          log_debug "Stopped after [${succeed_after[$i]}]" || fail
          succeeded=t
          succeed
        fi
      end_for
    fi

    if [[ "$required_output" ]]; then
      if [[ "$line" =~ ${required_output} ]]; then
        log_debug "Found required text: [$required_output]" || fail
        requirement_met=t
      fi
    fi

  end_function
  handle_return
}

from_background_process__prep() {

  if [[ "$interact" ]]; then

    split_to_array interact 
    interact_count=${#interact[*]}
    local c=0
    for ((i=0; i<interact_count; i++)); do
      s=${interact[$i]:-}
      s=${s##*( )}
      if [[ "$s" ]]; then
        if (( i % 2 == 0 )); then
          # escape_regex s
          interact_in+=( "$s" )
        else
          interact_out+=( "$s" )
          let c++
        fi
      fi
    done
    interact_count=$c

  fi

  if [[ "$succeed_after" ]]; then

    split_to_array succeed_after
    succeed_after_count=${#succeed_after[*]}
    local new_succeed_after=()
    for ((i=0; i < succeed_after_count; i++)); do
      s=${succeed_after[$i]##*( )}
      if [[ "$s" ]]; then
        # escape_regex s
        new_succeed_after+=( "$s" )
      fi
    done
    succeed_after=( "${new_succeed_after[@]}" )

  fi

  if [[ "$fail_after" ]]; then

    split_to_array fail_after
    fail_after_count=${#fail_after[*]}
    local new_fail_after=()
    for ((i=0; i < fail_after_count; i++)); do
      s=${fail_after[$i]##*( )}
      if [[ "$s" ]]; then
        # escape_regex s
        new_fail_after+=( "$s" )
      fi
    done
    fail_after=( "${new_fail_after[@]}" )

  fi

  if [[ ! -p $pipe_out ]]; then
    log_fatal "Invalid FIFO: $pipe_out"
    return 1
  fi

}

flush_background_process() {
  local pipe_in=${pipe}_in pipe_out=${pipe}_out \
    buffering=${buffering:-line} \
    timeout=${timeout:-0} \
    line char

  local log_show_vars='pipe timeout buffering'
  begin_function_hi

    local t=${timeout//./}
    if (( t > 0 )); then
      log_debug "Flushing background output with timeout of ${timeout}s" || fail
    else
      log_debug "Flushing background output with no timeout" || fail
    fi

    get_replay_file || fail

    line=
    case "$buffering" in
      char)
        while IFS= read -n1 -r -t $timeout -r char || [[ "$line" ]]; do
          if [[ "$char" ]]; then
            line+=$char
          else
            log_debug "Flushing: $line" || fail
            from_background_process__record_line || fail
            line=
          fi
        done <$pipe_out
        ;;
      line)
        while IFS= read -r -t $timeout -r line; do
          log_debug "Flushing: $line" || fail
          from_background_process__record_line || fail
        done <$pipe_out
        ;;
      *)
        log_fatal "Invalid buffering type: $buffering. Should be char or line"
        fail1
        ;;
    esac

  end_function
  handle_return
}

# input:
#   pipe             path to pipe to receive commands from
#   to_var           var to write result to
#   timeout          0=never timeout, >0=timeout after that many seconds (may be fractional)
#   fail_after       a newline separated list of regex strings. 
#                      If a line matches any of these, failed will be set to 't', 
#                      processing will stop and the remaining pipe output flushed.
#   succeed_after    a newline separated list of regex strings. If a line matches any of
#                      these. If a line matches any of these, processing will stop and
#                      the remaining pipe output flushed.
#   required_output  A regex string which must be found in the output or failed will be 
#                      set to 't'
#   pretend_out      fake data that gets fed into the reader for testing purposes
# output:
#   timed_out 
#   failed
# will flush output at end
from_background_process() {
  local log_vars='pipe interact pipe_replay' \
    log_show_vars='timeout required_output succeed_after fail_after'
  begin_function_hi

    local pipe_in=${pipe}_in pipe_out=${pipe}_out \
      buffering=${buffering:-line} \
      succeed_after=${succeed_after:-} \
      fail_after=${fail_after:-} \
      required_output=${required_output:-} \
      interact=${interact:-} \
      secret=${secret:-} \
      pretend_out=${pretend_out:-} \
      pretending=f \
      timeout=${timeout:-0} \
      flush_time=${flush_time:-0.5} \

    local -n to=$to_var

    if [[ ! "${pipe_replay_state:-}" ]]; then
      log_fatal "from_background_process was called without running start_background_process first"
      fail1
    fi

    timed_out=f \
    failed=f \
    succeeded=f \
    interacted=f \

    if [[ "$pretend_out" ]]; then
      pretending=t
    fi

    local line= char= i \
      interact_in=() interact_out=() \
      succeed_after_count=0 interact_count=0 s \
      requirement_met=f

    from_background_process__prep || fail

    get_replay_file || fail

    local back_fd
    if [[ $pretending == t ]]; then
      log_debug "Pretending to read background job output" || fail
    elif [[ $pipe_replay_state == replaying ]]; then
      if [[ -f $replay_file ]]; then
        log_debug "Replaying background interaction from $replay_file" || fail
        exec {back_fd}<>$replay_file || fail
        defer "exec $back_fd>$-"
      else
        log_fatal "Missing replay file, can't replay background process."
        fail1
      fi
    else
      log_vars=pipe_out \
        log_debug "Waiting for background job output" || fail
      exec {back_fd}<>$pipe_out || fail
      defer "exec $back_fd>$-"
    fi

    if [[ $buffering == line ]]; then

      begin_loop; doo

        interacted=f
        if [[ $pretending == t ]]; then
          if [[ "$pretend_out" ]]; then
            if [[ "$pretend_out" == *"$NL"* ]]; then
              line=${pretend_out%%$NL*}
              pretend_out=${pretend_out#*$NL}
            else
              line=$pretend_out
              pretend_out=
            fi
          else
            line=
          fi
        else
          IFS=$NL read -r -t $timeout -u $back_fd line
          if (( $? > 128 )); then 
            timed_out=t
            break
          fi
        fi

        if [[ "$line" ]]; then
          from_background_process__record_line || fail
          from_background_process__check_line || fail
          line=
          if [[ $succeeded == t || $failed == t ]]; then
            break
          fi
        else
          break
        fi

      end_loop
    elif [[ $buffering == char ]]; then
      line=
      begin_loop; doo

        interacted=f
        if [[ $pretending == t ]]; then
          if [[ "$pretend_out" ]]; then
            char=${pretend_out:0:1}
            pretend_out=${pretend_out:1}
          else
            char=
          fi
        else
          IFS= read -N1 -r -t $timeout -u $back_fd char 
        fi

        if (( $? > 128 )); then 
          timed_out=t
          break
        fi

        if [[ "$char" ]]; then
          line+=$char
          from_background_process__check_line || fail
          if [[ $succeeded == t || $failed == t ]]; then
            from_background_process__record_line || fail
            line=
            break
          elif [[ $interacted == t ]]; then
            from_background_process__record_line || fail
            line=
          fi
        else
          from_background_process__record_line || fail
          line=
        fi

      end_loop
    else
      log_fatal "Invalid buffering type: $buffering. Should be char or line"
      fail1
    fi

    if [[ $timed_out == t ]]; then
      if [[ "$line" ]]; then
        local remaining_hex="$(echo -n "$line" | hexdump -e '60/1 "%_c " "\n"')"
        log_vars=remaining_hex \
          log_debug "Timed out after $timeout seconds with remaining line:$NL$line"  || fail
      else
        log_debug "Timed out after $timeout seconds" || fail
      fi
    fi

    if [[ "$required_output" && $requirement_met == f ]]; then
      failed=t
    fi

    timeout=$flush_time flush_background_process

  end_function

  if [[ "$back_fd" ]]; then
    undefer "exec $back_fd>&-"
  fi

  handle_return
}

# This should be different enough from a default shell prompt so that it
#   can't possibly be confused
magic_shell_prompt='>=-=>'$NL

# input:
#   pipe
#   command
#   timeout
#   flush_time=0.5
# output: 
#   result
#   command_successful
# will flush output at end
run_pipe_command() {
  local pipe=$pipe \
    command=$command \
    buffering=${buffering:-line} \
    shell_prompt=${shell_prompt:-$magic_shell_prompt} \
    flush_time=${flush_time:-0.5} \

  local log_show_vars=command log_vars='pipe shell_prompt buffering'
  begin_function_hi

    timed_out=f failed=f command_successful=f
    from_var=command \
      to_background_process || fail

    if [[ $timed_out == t ]]; then
      break
    fi

    escape_regex shell_prompt
    shell_prompt=${shell_prompt%%*($NL| |$TAB)}
    shell_prompt=${shell_prompt##*($NL| |$TAB)}
    to_var=result \
      succeed_after="^0\ $shell_prompt" \
      fail_after="^[1-9][0-9]*\ $shell_prompt" \
      from_background_process || fail

  end_function

  if [[ $timed_out == t ]]; then
    log_vars=result \
      log_error "Timed out waiting for prompt from remote ssh session" || fail
  elif [[ "$failed" == t ]]; then
    log_vars=result \
      log_error "Command execution on remote ssh session returned a failure" || fail
  elif failed; then
    log_vars=result \
      log_fatal "Internal error while trying to execute remote command"
    fail1
  else 
    log_debug "Command was successful" || fail
    command_successful=t
  fi

  handle_return
}

up_delegate() {
  local cyto_up_path=$1 # .../.cyto/up/{dep_name}
  local cell_path=${cyto_up_path%/.cyto/up/*} \
    up_lock=$cyto_up_path/chosen/.cyto/lock \
    up_name=${cyto_up_path##*/}
  local log_show_vars='^cyto_up_path ^cell_path up_lock'
  begin_function_hi

    if [[ -e $up_lock ]]; then
      local locks_folder=$cell_path/.cyto/up-locks
      if [[ ! -d $locks_folder ]]; then
        mkdir $locks_folder || fail
      fi
      safe_link $up_lock $locks_folder/$up_name || fail
    fi

    local out_item
    out_items=$(find1 $cyto_up_path/chosen -not -name ".*") || fail
    begin_for out_item in $out_items; doo
      safe_link $out_item $cell_path/ || fail
    end_for

  end_function
  handle_return
}

# inputs:
#   table_fields       
#   table_data
#   row          which row to select from the table
#   field_count  
# outputs:
#   row_is_valid 
execute_auto_load_check_row() {
  begin_function    
    local f t
    row_is_valid=t
    begin_for (( f = 0; f < field_count; f++ )); doo

      local field=${table_fields[$f]}
      (( t = row * field_count + f ))
      local expected_value=${table_data[$t]}
      if [[ "$expected_value" == all || "$expected_value" == "" ]]; then
        continue # try next field, since this one matches
      fi

      local -n dim=d_$field
      local -n var=$field
      local actual_value=
      if [[ -v dim && "$dim" ]]; then
        actual_value=$dim
      elif [[ -v var && "$var" ]]; then
        actual_value=$var
      fi

      if [[ "$actual_value" && "$actual_value" != "$expected_value" ]]; then
        row_is_valid=f
        break
      fi

    end_for
  end_function
  handle_return
}

# inputs:
#   table_fields variable name holding array of fields
#   table_data   variable name holding array of cells
#   row          which row to select from the table
#   field_count
#   prefix       prefix of variable name to set
execute_auto_load_add_constraints() {
  begin_function
    local f t
    begin_for (( f = 0; f < field_count; f++ )); doo

      local field=${table_fields[$f]}
      (( t = row * field_count + f ))
      expected_value=${table_data[$t]}
      if [[ "$expected_value" == all || "$expected_value" == "" ]]; then
        continue # try next field, since this one matches
      fi

      keys["$field $expected_value"]=1

    end_for

  end_function
  handle_return
}

execute_auto_load_tab() {
  local table_name=$1 prefix=${prefix:-}
  begin_function
    local -n table_fields=${table_name}_fields table_data=${table_name}_data
    if [[ ! -v table_fields || ! -v table_data ]]; then
      log_fatal "Missing expected vars: ${table_name}_fields or ${table_name}_data"
      fail1
    fi
    local row \
      field_count=${#table_fields[*]} data_count=${#table_data[*]}
    local row_count=$((data_count/field_count))
    local -A keys
    begin_for (( row = 0; row < row_count; row++ )); doo
      execute_auto_load_check_row || fail
      if [[ $row_is_valid == t ]]; then
        execute_auto_load_add_constraints || fail
      fi
    end_for

    local value key key_field field value
    begin_for field in "${table_fields[@]}"; doo
      local -n target_field=$field
      if [[ "${target_field:-}" ]]; then
        continue
      fi
      begin_for key in "${!keys[@]}"; doo
        key_field=${key%% *}
        if [[ "$key_field" != "$field" ]]; then
          continue
        fi
        value=${key#$key_field }
        target_field+=( "$value" )
      end_for
    end_for
  end_function
  handle_return
}

execute_auto_loads() {
  local auto_loads=( "$@" )
  begin_function
    local table_name prefix i
    begin_for item in "${auto_loads[@]}"; doo
      case $item in
        *.tab)
          execute_auto_load_tab ${item%.tab} || fail
        ;;
        *)
          log_fatal "Can't auto load $item"
          fail1
        ;;
      esac
    end_for
  end_function
  handle_return
}

