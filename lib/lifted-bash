#!/usr/bin/env bash

##########################################################
# BASH-LIFTED
# A bash library of functions to increase debugability of bash scripts.
# depends on: omni-log bash-debugger bash-lib 
##########################################################

type -t bash_lifted_init >/dev/null && return 0

declare -A trace_var_old trace_var_sub
debug_id_current=0

# this is empty, meaning we haven't forked yet. the top level process having a blank id
fork_id_current=    

fork_debug_id=0

handle_special_vars() {
  local -n vars=$1
  local t new_vars=
  for t in $vars; do
    if [[ $t == ^* ]]; then
      t=${t#^}
      new_vars+="p_$t p_${t}s d_$t d_${t}s s_$t s_${t}s "
    else
      new_vars+="$t "
    fi
  done
  vars=${new_vars% }
}

# Run this near the top of scripts using this functionality, after the commandline parameters 
#   have been processed
bash_lifted_init() {
  autorepair_level=${autorepair_level:-${repair:-1}}
  log_var_entries_stack=()
  log_var_show_vars_stack=()

  trace_vars=${trace_vars:-${trace_var:-}}

  pause_at_functions=${pause_at_functions:-${pause_at_function:-}}
  pause_at_cells=${pause_at_cells:-${pause_at_cell:-}}
  pause_at_vars=${pause_at_vars:-${pause_at_var:-}}
  pause_at_debug_id=${pause_at_debug_id:-${pause_at_debug:-}}

  if [[ "${pause:-}" ]]; then
    if [[ "$pause" =~ / ]]; then
      if [[ ! "$pause_at_cells" ]]; then
        pause_at_cells=$pause
      fi
    elif [[ "$pause" =~ ^[0-9\.]+$ ]]; then
      if [[ ! "$pause_at_debug_id" ]]; then
        pause_at_debug_id=$pause
      fi
    elif [[ "$pause" =~ ^[a-zA-Z_0-9]+$ ]]; then
      if [[ ! "$pause_at_vars" ]]; then
        pause_at_vars=$pause
      fi
      if [[ ! "$pause_at_functions" ]]; then
        pause_at_functions=$pause
      fi
      if [[ ! "$pause_at_cells" ]]; then
        pause_at_cells=$pause
      fi
    elif [[ "$pause" =~ ^[a-zA-Z_0-9\^\ ]+$ ]]; then
      if [[ ! "$pause_at_vars" ]]; then
        pause_at_vars=$pause
      fi
    fi
  fi

  if [[ "$pause_at_vars" ]]; then
    trace_vars+=" $pause_at_vars"
  fi

  handle_special_vars trace_vars
  handle_special_vars pause_at_vars

  DEBUG_COLOR=$CYAN
  DIM_DEBUG_COLOR=$DIM_CYAN
  trace_structure=${trace_structure:-${trace_struct:-}}
  grip=${grip:-0}
  if [[ $grip == t ]]; then
    grip=1
  fi
  slow_down=${slow_down:-${slow:-}}
  if [[ $slow_down == t ]]; then
    slow_down=0.1
  fi
}

show_time_update() {
  if [[ "${show_time:-f}" == t && ${showed_something:-f} == f ]]; then
    new_time=${EPOCHREALTIME/./}
    if [[ "${show_time_prev:-}" ]]; then
      micro_time_diff $show_time_prev $new_time prefix
      prefix+=" "
    fi
    showed_something=t
    show_time_prev=$new_time
  fi
}

handle_user_interrupt() {
  local c silent=f prompt=${1:-Paused.}
  echo >&$fd_original_err
  while true; do
    if [[ $silent == t ]]; then
      read -u $fd_original_in -sr -N 1 c >&$fd_original_err
    else
      read -u $fd_original_in -sr -N 1 -p "${YELLOW}$prompt${RESET} (r)esume, (l)og level change, (d)ebug, (q)uit? " c >&$fd_original_err
    fi
    silent=f
    case "$c" in
      d)
        echo "debug" >&$fd_original_err
        debug_immediate=t
        unignore_this_function=f \
        debug_start n
      ;;
      l)
        echo "log level change" >&$fd_original_err
        local log=
        read -u $fd_original_in -e -p "New log level: " log >&$fd_original_err
        if [[ "$log" ]]; then
          if function_exists resolve_log_var; then
            resolve_log_var
          else
            log_level_filter=$log
          fi
          log_format=default
          log_level_filter_changed
          debug_log_level_filter=$log
          reply_to_caller "debug_log_level_filter=$debug_log_level_filter"
          echo "Log level changed to $log_level_filter" >&$fd_original_err
        else
          continue
        fi
      ;;
      q)
        echo "quit" >&$fd_original_err
        exit 100
      ;;
      r)
        echo "resume" >&$fd_original_err
        :
      ;;
      $NL)
        silent=t
        continue
      ;;
      *)
        echo "invalid key, try again" >&$fd_original_err
        continue
      ;;
    esac
    break
  done
}

show_trace_vars() {
  local indent=0 prefix= new_time

  if [[ ${show_debug_id:-f} == a ]]; then
    show_time_update
    echo -n " $prefix$DIM_DEBUG_COLOR$fork_debug_id$RESET" >&$fd_original_err
    showed_something=t
  fi

  if [[ $trace_structure == t && "${struct_type:-}" ]]; then
    show_time_update
    echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id$RESET ${struct_type:-}" >&$fd_original_err
    showed_something=t
  fi

  if [[ "${trace_fun:-}" ]]; then
    local fun
    for fun in $trace_fun; do
      if [[ "${struct_type:-}" == *" $fun" ]]; then
        show_time_update
        echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id ${struct_type:-}$RESET" >&$fd_original_err
        showed_something=t
      fi
    done
  fi

  stack_detail[$stack_pos]=
  if [[ "${log_show_vars:-}" ]]; then
    local var value show_vars
    for var in $log_show_vars; do
      value=
      local real_var=${var#^}
      real_var=${real_var#*=}
      get_var_value $real_var
      show_vars+="$real_var=$value "
    done
    stack_detail[$stack_pos]+="${show_vars% } "
  fi

  if [[ "${trace_vars:-}" ]]; then
    local var value
    for var in $trace_vars; do
      get_var_value $var
      local show_val=$value
      if [[ "${secret_vars:-}" && " ${secret_vars} " == *" $var "* ]]; then
        show_val='****'
      fi
      stack_detail[$stack_pos]+="$var=$show_val "
      if [[ -v trace_var_sub[$var] ]]; then
        if [[ "${trace_var_sub[$var]}" != "$value" ]]; then
          show_time_update
          echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id ${YELLOW}$var=$show_val$RESET" >&$fd_original_err
          showed_something=t
          if [[ " $pause_at_vars " == *" $var "* ]]; then
            handle_user_interrupt "Var changed: $var."
          fi
        fi
        unset trace_var_sub[$var]
        trace_var_old[$var]=$value
      elif [[ "${trace_var_old[$var]:-}" != "$value" || ${trace_var_always:-f} == t ]]; then
        if [[ $fork_debug_id != 1 || "$value" != '(unset)' ]]; then
          show_time_update
          echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id $var=$show_val$RESET" >&$fd_original_err
          showed_something=t
          if [[ " $pause_at_vars " == *" $var "* ]]; then
            handle_user_interrupt "Var changed: $var."
          fi
        fi
        unset trace_var_sub[$var]
        trace_var_old[$var]=$value
      fi
    done
  fi
  if [[ "${trace_condition:-}" ]]; then
    local result
    set +u
    eval "if $trace_condition; then result=t; else result=f; fi"
    set -u
    if [[ "${trace_var_old:-}" != "$result" ]]; then
      show_time_update
      echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id $trace_condition=$result$RESET" >&$fd_original_err
      showed_something=t
      trace_var_old=$result
    fi
  fi
  if [[ "${trace_expression:-}" ]]; then
    local result
    set +u
    eval "result=$trace_expression"
    set -u
    if [[ "${trace_var_old:-}" != "$result" ]]; then
      show_time_update
      echo " $prefix${DIM_DEBUG_COLOR}debug_id=$fork_debug_id expression=$result$RESET" >&$fd_original_err
      showed_something=t
      trace_var_old=$result
    fi
  fi
  stack_detail[$stack_pos]="${stack_detail[$stack_pos]% }"
}

reached_debug_id() {
  local r1 r2 p1 p2 i=0
  OIFS=$IFS
  IFS=. r1=( $fork_debug_id ) r2=( $1 )
  IFS=$OIFS
  while true; do
    p1=${r1[$i]:-} p2=${r2[$i]:-}
    (( i++ ))
    if [[ "$p1" ]]; then
      if [[ "$p2" ]]; then
        if (( p1 < p2 )); then
          return 1
        elif (( p1 > p2 )); then
          return 0
        fi
      else
        return 0
      fi
    else
      if [[ "$p2" ]]; then
        return 1
      else
        return 0
      fi
    fi
  done
}

# ALSO IN: CellOp
debug_id_inc() {
  (( no_trace_depth++ ))
  (( debug_id_current++ ))
  local showed_something=f 

  fork_debug_id=$debug_id_current
  if [[ "$fork_id_current" ]]; then
    fork_debug_id=$fork_id_current.$fork_debug_id
  fi

  if read -u $fd_original_in -t 0; then
    local c
    read -u $fd_original_in -sr -N 1 c
    if [[ "$c" == "$NL" ]]; then
      handle_user_interrupt
    fi
  fi
  show_trace_vars

  if [[ "$slow_down" ]]; then
    sleep $slow_down
  fi

  if [[ "${struct_type:-}" && "${pause_at_functions:-}" \
     && " $pause_at_functions " == *" ${FUNCNAME[1]} "* ]]; then
    handle_user_interrupt "Reached ${struct_type:-}."
  fi

  if [[ "${pause_at_debug_id:-}" ]] && reached_debug_id $pause_at_debug_id; then
    handle_user_interrupt "Reached ${pause_at_debug_id:-}."
  elif [[ "${debug_id:-}" && $debug_id != t ]] && reached_debug_id $debug_id; then
    if [[ "${debug_bisect_min:-}" ]]; then
      local response new_bisect
      if [[ "${bisect_test:-}" ]]; then
        eval "$bisect_test"
      fi
      prompt_ynq "${NL}Debug bisect: Did the problem happen?" response
      case $response in
        y)
          new_bisect=${debug_bisect_min}..${debug_id}
        ;;
        n)
          new_bisect=$(( debug_id + 1 ))..${debug_bisect_max}
        ;;
        q)
          exit 1
        ;;
      esac
      debug_get_new_bisect
      debug_restart_command=$new_command debug_exit=t debugging=
      exit 100
    else
      debug_id=t
      debug_immediate=t
      unignore_this_function=f \
      debug_start n
    fi
  elif [[ "${debug_quick_function:-}" && $debug_quick_function == ${FUNCNAME[1]} ]]; then
    #debug_ignore_remove ${FUNCNAME[*]:1:4}
    debug_function_old=$debug_quick_function
    debug_quick_function=
    debug_immediate=t
    unignore_this_function=f \
    debug_start n
  fi

  if [[ "${debug_quick_stop_less_than_depth:-}" ]] && \
     (( ${#FUNCNAME[*]} <= debug_quick_stop_less_than_depth )); then
    debug_quick_stop_less_than_depth=
    debug_immediate=t
    unignore_this_function=f \
    debug_start n
  fi

  (( no_trace_depth-- ))
}

trace_time_summarize() {
  eval "exec $trace_time_fd>&-"
  trace_time_fd=

  if [[ ! "$trace_time_log" ]]; then
    echo "Internal error: Missing trace_time_log" >&$fd_original_err
    return 1
  fi

  echo "$NL$hbar_equals" >&$fd_original_err
  echo "trace_time summary by function instance in chronological order:$NL" >&$fd_original_err
  { echo "duration(µs) function id_start id_end"; 
    awk '
    /^[0-9]/ { 
      x=$3; gsub("\\.", " ", x)
      y=x
      gsub("[^ ]", "", y)
      result=($1 " " $2 " " $3 " " $4 " " x)
      for(i=6-length(y); i>1; i--) {
        result=(result " 0")
      }
      print result
    }
    ' $trace_time_log | sort -n -k5 -k6 -k7 -k8 -k9 -k10 \
    | awk '{ print $1, $2, $3, $4 }' \
    | field=0 format_number_stream \
    | field=4 format_number_stream;
  } | column -t >&$fd_original_err

#  echo "$NL$hbar_equals"
#  echo "trace_time summary by function instance sorted by name:$NL"
#  { echo "duration(µs) function id_start id_end"; sort -k2 $trace_time_log } \
#    | field=0 format_number_stream | field=4 format_number_stream | column -t 
#
#  echo "$NL$hbar_equals"
#  echo "trace_time summary by function instance sorted by time:$NL"
#  { echo "duration(µs) function id_start id_end"; sort -n $trace_time_log } \
#    | field=0 format_number_stream | field=4 format_number_stream | column -t 

  echo "$NL$hbar_equals" >&$fd_original_err
  echo "trace_time summary by function sorted by time:$NL" >&$fd_original_err
  { echo "duration(µs) function executions"; sort -k2 $trace_time_log \
    | awk '
  BEGIN {
    prev=""
  }
  prev != $2 {
    if ( prev != "" && total > 0 ) print total " " prev " x" count
    prev=$2
    total=0
    count=0
  }
  {
    total+=$1
    count+=1
  }
  END {
    if ( prev != "" && total > 0 ) print total " " prev " x" count
  }
  ' | sort -n | field=0 format_number_stream; } \
  | column -t >&$fd_original_err

}

: ${trace_time:=f}

alias timebox_open='
  (( no_trace_depth++ ))
  timebox_stack+=( $timebox )
  trace_time_open
  (( no_trace_depth-- ))
'

alias timebox_close='
  (( no_trace_depth++ ))
  trace_time_close
  unset timebox_stack[-1]
  timebox=${timebox_stack[-1]}
  (( no_trace_depth-- ))
'

alias trace_time_open='
  if [[ $trace_time == t ]]; then
    if [[ ! ${trace_time_fd:-} ]]; then
      : ${trace_time_log:=/tmp/trace_time.log}
      [[ -e $trace_time_log ]] && rm $trace_time_log
      exec {trace_time_fd}<>$trace_time_log
    fi
    trace_time_start=${EPOCHREALTIME/./}
    trace_time_start_debug_id=$fork_debug_id
  fi
'

alias trace_time_close='
  if [[ $trace_time == t && "${trace_time_fd:-}" ]]; then
    trace_time_stop=${EPOCHREALTIME/./}
    (( time_dur = trace_time_stop - trace_time_start ))
    echo "$time_dur $timebox $trace_time_start_debug_id $fork_debug_id" >&$trace_time_fd
  fi
'

# The local vars in this alias MUST be on the same line (no \ separators) or debugging doesn't have correct line numbers
alias begin_function_hi='
  (( no_trace_depth++ ))
  local return_value=0 break_out=f function_level=2 repair_attempted=f current_function=${function_override:-$FUNCNAME} function_override= timebox_stack=( $FUNCNAME ) trace_time_start trace_time_start_debug_id trace_time_stop time_dur stack_pos=$(( ${#FUNCNAME[*]} - 1 ))
  write_to_log_and_save 
  (( log_depth_current++ ))
  trace_time_open
  struct_type="start of $current_function" debug_id_inc
  log_vars= log_show_vars=
  stack_debug_id[$stack_pos]=$fork_debug_id
  stack_high_level[$stack_pos]=1
  while true; do
  if [[ ${debug_step_to_hi_function:-f} == t || ${debug_step_to_mid_function:-f} == t ]]; then
    debug_id=t
    debug_immediate=t
    local unignore_this_function=f
    debug_start n
  fi
  (( no_trace_depth-- ))
'

# The local vars in this alias MUST be on the same line (no \ separators) or debugging doesn't have correct line numbers
alias begin_function='
  (( no_trace_depth++ ))
  local return_value=0 break_out=f function_level=1 repair_attempted=f current_function=${function_override:-$FUNCNAME} function_override= timebox_stack=( $FUNCNAME ) trace_time_start trace_time_start_debug_id trace_time_stop time_dur stack_pos=$(( ${#FUNCNAME[*]} - 1 ))
  trace_time_open
  struct_type="start of $current_function" debug_id_inc
  log_vars= log_show_vars=
  stack_debug_id[$stack_pos]=$fork_debug_id
  while true; do
  if [[ ${debug_step_to_mid_function:-f} == t ]]; then
    debug_id=t
    debug_immediate=t
    local unignore_this_function=f
    debug_start n
  fi
  (( no_trace_depth-- ))
'
  
# The local vars in this alias MUST be on the same line (no \ separators) or debugging doesn't have correct line numbers
# This one switches between a low level and a mid level function, based on the grip variable
# grip=0 is default, where these functions will be low level
# grip=1 makes these functions mid level
alias begin_function_grip='
  (( no_trace_depth++ ))
  local return_value=0 break_out=f function_level=0 repair_attempted=f current_function=${function_override:-$FUNCNAME} function_override= timebox_stack=( $FUNCNAME ) trace_time_start trace_time_start_debug_id trace_time_stop time_dur stack_pos=$(( ${#FUNCNAME[*]} - 1 ))
  if (( grip > 0 )); then
    function_level=1
    trace_time_open
    struct_type="start of $current_function" debug_id_inc
    log_vars= log_show_vars=
    stack_debug_id[$stack_pos]=$fork_debug_id
  fi
  while true; do
  if (( grip > 0 )); then
    if [[ ${debug_step_to_mid_function:-f} == t ]]; then
      debug_id=t
      debug_immediate=t
      local unignore_this_function=f
      debug_start n
    fi
  fi
  (( no_trace_depth-- ))
'
  
# The local vars in this alias MUST be on the same line (no \ separators) or debugging doesn't have correct line numbers
alias begin_function_lo='
  (( no_trace_depth++ ))
  local return_value=0 break_out=f function_level=0 repair_attempted=f function_override= timebox_stack=( $FUNCNAME ) trace_time_start trace_time_start_debug_id trace_time_stop time_dur log_show_vars= log_vars=
  while true; do
  (( no_trace_depth-- ))
'

alias end_function='
  (( no_trace_depth++ ))
  break
  done
  local log_return_vars=
  if (( function_level > 0 )); then
    stack_pos=$(( ${#FUNCNAME[*]} - 1 ))
    struct_type="end of $current_function" debug_id_inc
    unset stack_debug_id[$stack_pos] stack_detail[$stack_pos] stack_high_level[$stack_pos]
  fi
  (( no_trace_depth-- ))
'

alias handle_return='
  (( no_trace_depth++ ))
  case ${function_level:-0} in
    2)
      timebox=$FUNCNAME
      trace_time_close
      load_log_vars_and_write_to_log
      (( log_depth_current-- ))
    ;;
    1)
      timebox=$FUNCNAME
      trace_time_close
    ;;
    0)
      if (( no_trace_depth-- <= 1 )); then 
        no_trace_depth=1
      fi
    ;;
  esac
  debug_return_vars=${log_return_vars:-}
  (( no_trace_depth-- ))
  return ${return_value:-0}
'

alias begin_while='break_out=f; while'
alias   begin_for='break_out=f; for'
alias  begin_loop='break_out=f; while true'
alias   end_while='done; debug_id_inc; [[ $break_out == t ]] && break'
alias     end_for='done; debug_id_inc; [[ $break_out == t ]] && break'
alias    end_loop='done; debug_id_inc; [[ $break_out == t ]] && break'

# end_while or end_for or end_loop should usually be used instead of this.
# This is helpful though if the done part needs to be separated from the break part
alias maybe_break='[[ $break_out == t ]] && break'

alias handle_exit='exit $return_value'

# to avoid bash syntax parsing problems, and provide a hook for loop beginning
alias         doo=do

#  instead of this, just put a fence at beginning of loop if an extra debug step is needed
#alias         doo='do debug_id_inc;'

# This performs the same debug_id advancement that begin_function and others do,
#   except unlike begin_function this may be placed anywhere within a function,
#   providing a stopping point for debugging of larger blocks of code that otherwise
#   can't be split up.
alias fence='debug_id_inc; log_show_vars='
alias fence_grip='(( grip > 0 )) && debug_id_inc; log_show_vars='

# used after a direct command which may fail: cd /somewhere || fail
alias fail='{ return_value=$?; (( return_value < 100 )) && attempt_autorepair $FUNCNAME && { repair_attempted=t; continue; }; break_out=t; break; }'
alias fail_later='{ return_value=$?; break_out=t; }'
alias fail_later1='{ return_value=1; break_out=t; }'

# used as a standalone command triggering the failed state and exiting the block
alias fail1='{ return_value=1; attempt_autorepair $FUNCNAME && { repair_attempted=t; continue; }; break_out=t; break; }'
alias fail2='{ return_value=2; attempt_autorepair $FUNCNAME && { repair_attempted=t; continue; }; break_out=t; break; }'
alias succeed='{ return_value=100; break_out=t; break; }'

# used to check if something failed: failed && break
alias failed='(( return_value > 0 && return_value < 100 ))'
alias abort='{ return_value=0; break_out=t; break; }'
alias succeeded='(( return_value == 0 || return_value >= 100 ))'
alias handle_break='[[ $break_out == t ]] && break'

attempt_autorepair() {
  local repair_successful=f func_name=$1

  if [[ "${debug_quick_function:-}" == fail ]]; then
    debug_immediate=t
    debug_start
  fi

  if [[ $autorepair_level > 0 && ${repair_attempted:-f} == f ]] \
    && declare -pf repair_$func_name &>/dev/null
    then
    log_debug "Attempting auto-repair of $func_name"
    repair_$func_name

    if [[ $repair_successful == t ]]; then
      log_debug "Autorepair of $func_name successful."
      return_value=0 break_out=f
    else
      log_debug "Autorepair of $func_name failed."
    fi

  fi

  [[ $repair_successful == t ]]
}

