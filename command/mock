#!/usr/bin/env bash

mock_cell() {
  begin_function
    log_verbose "Checking $short_cell"
    local mock_changed=f current_mock=f

    if [[ -e $cell_path/.mock ]]; then
      current_mock=$(<$cell_path/.mock)
    fi

    if [[ $current_mock == f ]]; then
      if [[ $mock != f ]]; then
        mock_changed=t
        log_info "$short_cell: Changing mock $current_mock -> $mock"
      else # both are f
        log_verbose "$short_cell: Keeping previous unmocked state"
      fi
    else # current_mock != f
      if [[ $mock != f ]]; then
        if [[ $mock != $current_mock ]]; then
          mock_changed=t
          log_info "$short_cell: Changing mock $current_mock -> $mock"
        else
          log_verbose "$short_cell: Keeping previous mock: $current_mock"
        fi
      else # current_mock != f && mock == f
        log_info "$short_cell: Removing mock $current_mock"
        rm $cell_path/.mock || fail
        kind=data clean_cell $cell_path || fail
      fi
    fi

    if [[ $mock_changed == t ]]; then
      echo "$mock" >$cell_path/.mock || fail
    fi

    if [[ $recursive_command == t ]]; then
      mock_branch || fail
    fi
  end_function
  handle_return
}

mock_branch() {
  begin_function
    local branch_cell branch_cells
    branch_cells=$(find1 $cell_path -name '*:*') || fail
    begin_for branch_cell in $branch_cells; doo
      cell_path=$branch_cell
      load_branch_info $cell_path || fail
      find_seed_path $cell_path || fail
      mock_cell || fail
    end_for
  end_function
  handle_return
}

mock_command() {
  begin_function

    local mock=${mock:-} ignore_missing=${ignore_missing:-t} \
    local seed_path mock_path
    find_seed_path $cell_path || fail
    mock_path=$seed_path/.mock

    if [[ ! "$mock" ]]; then
      if [[ -d $mock_path ]]; then
        local options=( $(find1 $mock_path -not -name export -printf "%f ") )
        if (( ${#options[*]} > 0 )); then
          choose "Which mock? " mock "${options[@]}" f || fail
        else
          log_fatal "There are no mocks available for this cell. To create one, create a folder here: $mock_path"
          fail1
        fi
      else
        log_fatal "There are no mocks available for this cell. To create one, create a folder here: $mock_path"
        fail1
      fi
    fi

    if [[ $mock != f && ! -d $mock_path/$mock ]]; then
      if [[ $ignore_missing == t ]]; then
        log_verbose "Mock doesn't exist for this folder, skipping."
        succeed
      else
        log_fatal "Invalid mock: $mock"
        if [[ -d $mock_path ]]; then
          local options=( $(find1 $mock_path -printf "%f") )
          if (( ${#options[*]} > 0 )); then
            log_fatal "You must choose one of these mocks: ${options[*]} or use f to unmock this cell, or just leave the mock field blank to get a menu"
          else
            log_fatal "There are no mocks available for this cell. To create one, create a folder here: $mock_path"
          fi
        else
          log_fatal "There are no mocks available for this cell. To create one, create a folder here: $mock_path"
        fi
        fail1
      fi
    fi

    mock_cell || fail

    command_successful=t

  end_function
  handle_return
}

