#!/usr/bin/env bash

[[ -v all_info_loaded ]] && return 0
all_info_loaded=t

type=global name=log default= description="Log shortcuts
shortcuts for log_level_filter=... (can also use first letter of each as a shortcut)
  off
  fatal
  error
  warn
  info
  verbose
  trace
  all
shortcuts for log_to_file and log_to_out:
  file   send logs to a file (default) (log_to_file=t)
  out    send logs to console (log_to_out=t)
shortcuts for show_debug_id
  id     show debug ids per log line output (show_debug_id=t)
  id2    show all debug ids (show_debug_id=a)
" add_parameter 

type=global name=trace_vars alias=trace_var default= description="Trace a variables changes throughout the execution of a command.
May include one or more vars or arrays or sets.
If var is prepended with ^, then it will include all dimensional forms of that variable: d_var s_var d_vars s_vars, etc.
" add_parameter 

type=global name=pause_at_debug_id aliases='pause pause_at_debug' default= description="Will pause when the given debug_id is reached. Automatically adds these vars to trace_vars." add_parameter 

type=global name=pause_at_cells aliases='pause pause_at_cell' default= description="Will pause each time one of the given cells are executed." add_parameter 

type=global name=pause_at_functions aliases='pause pause_at_function' default= description="Will pause each time one of the given functions are entered." add_parameter 

type=global name=pause_at_vars aliases='pause pause_at_var' default= description="Will pause each time one of the given vars are changed. Automatically adds these vars to trace_vars." add_parameter 

type=global name=clean_cells aliases='clean clean_cell' default= description="Will clean the cells it comes across as it's executing the given command." add_parameter 

type=global name=autorepair_level alias=repair default= description="Autorepair level
0 = don't autorepair ever
1 = autorepair when it is guaranteed to fix something and will be reasonably fast to check
2 = autorepair when it could fix something, but still will execute fairly quickly
3 = autorepair if at all possible, even if it takes time
" add_parameter 

type=global name=trace_fun default= description="Trace when a function is entered or exited.
May include one or more functions.
" add_parameter 

type=global name=trace_time default= description="Set to 't' to see how much time is spent executing each function." add_parameter 
type=global name=show_time default= description="Set to 't' to show a timestamp next to each log line / debug_id output" add_parameter 

type=global name=grip default=0 description="Set to 1 to cause more debug increments to happen, making narrowing down problems and pausing easier, but slowing down execution. Use if you're having trouble pausing or getting a debug_id close enough to a problem." add_parameter 
type=global name=slow_down alias=slow default=0 description="Number of seconds (can be fractional) to pause after each log line, greatly slowing down execution. Recommend starting with something like 0.02 and see if that's slow enough" add_parameter 

name=clean0 command='clean kind=context' add_command_alias
name=clean1 command='clean kind=invalidate' add_command_alias
name=clean2 command='clean kind=data' add_command_alias

type=global name=debug_id alias=debug default= description="start debugger at a given id or function
debug_id is used to stop at a specific debugger id
debug_quick_function can stop at a specific function
but the debug alias can be used for both. It can tell automatically which type it is. 
" add_parameter 

type=global name=debug_on_exit default=f description="start debugger when process exits for any reason.
-x is a shortcut flag for this.
" add_parameter 

mock_get_choices() {
  choices=
  local mock_path=${mock_path:-}

  if [[ ! "$mock_path" ]]; then
    local seed_path=${seed_path:-}
    if [[ ! "$seed_path" ]]; then
      local cell_path=${cell_path:-$PWD}
      find_seed_path $cell_path || return 0
      mock_path=$seed_path/.mock
    fi
  fi

  if [[ "${mock_path:-}" && -d "${mock_path:-}" ]]; then
    choices=( $(find1 $mock_path -not -name export -printf "%f\n" | sort) ) || return 0
  fi
}

