#!/usr/bin/env bash

get_formatted_data() {
  begin_function

    local i field value o c row row_type row_begin \
      pretty=${pretty:-t}
    local -A pretty_function pretty_form

    o=
    row_type=header
    if function_exists each_field; then
      begin_for (( c = 0; c < selected_count; c++ )); doo
        i=${selected_field_indices[$c]}
        field=${table_fields[$i]}
        value=$field

        local -n dim_type=${field}_dim_type
        if [[ "${dim_type:-}" ]]; then
          local pretty_function_name=${dim_type}_${field}_pretty_function
          local -n pretty_form_name=${dim_type}_${field}_pretty_form
          if function_exists $pretty_function_name; then
            pretty_function[$field]=$pretty_function_name
          elif [[ "${pretty_form_name:-}" ]]; then
            pretty_form[$field]=$pretty_form_name
          fi
        fi
        each_field || fail
      end_for
    fi

    execute_if_exists after_row || fail

    row_type=data
    local row_count=$row_count
    if [[ "$out_limit" ]]; then
      row_count=$out_limit
    fi

    begin_for (( row = 0; row < row_count; row++ )); doo
      o=
      (( row_begin = field_count * row ))
      local is_valid
      offset=$row_begin \
      check_table_row || fail
      if [[ $is_valid == t ]]; then
        if function_exists each_field; then
          begin_for (( c = 0; c < selected_count; c++ )); doo

            fence_grip

            i=${selected_field_indices[$c]}
            field=${table_fields[$i]}
            value=${table_data[$((i + row_begin))]}

            if [[ $pretty == t ]]; then
              if [[ -v pretty_function[$field] ]]; then
                ${pretty_function[$field]} $dim_var || fail
              elif [[ -v pretty_form[$field] ]]; then
                format_var ${pretty_form[$field]} value
              fi
            fi

            each_field || fail
          end_for
        fi
        execute_if_exists after_row || fail
      fi
    end_for

  end_function
  local log_return_vars=formatted_data
  handle_return
}

display_data_raw() {
  begin_function

    each_field() {
      if [[ $row_type == header ]]; then
        value=${value^^}
      fi
      o+="$value "
    }

    local formatted_data=
    get_formatted_data || fail
    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_simple() {
  begin_function

    local formatted_data= o c r v row

    each_field() {
      if [[ $row_type == header ]]; then
        value=${value^^}
      fi
      apad o "$field" "$value "
    }

    get_formatted_data || fail
    formatted_data=
    # done twice, first time it calculates the boundaries
    get_formatted_data || fail
    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_long() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type != header ]]; then
        formatted_data+="  $WHITE$field:$RESET $value$NL"
      fi
    }

    after_row() {
      if [[ $row_type != header ]]; then
        formatted_data+="$NL"
      fi
    }

    formatted_data=
    get_formatted_data || fail
    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_tsv() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type == header ]]; then
        value=${value^^}
      fi
      o+="$value$TAB"
    }

    after_row() {
      o=${o%$TAB}
      formatted_data+="$o$NL"
    }

    get_formatted_data || fail
    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_csv() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type == header ]]; then
        value=${value^^}
      fi
      o+="$value,"
    }

    after_row() {
      o=${o%,}
      formatted_data+="$o$NL"
    }

    get_formatted_data || fail
    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_table() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type == header ]]; then
        value=${value^^}
      fi
      apad o "$field" "| $value "
    }

    formatted_data=
    get_formatted_data || fail

    after_row() {
      o+="|"
      formatted_data+="$o$NL"
      if [[ $row_type == header ]]; then
        formatted_data+="$bar$NL"
      fi
    }

    local c i f bar="+" length pad
    begin_for (( c = 0; c < selected_count; c++ )); doo
      i=${selected_field_indices[$c]}
      f="${table_fields[$i]}"
      length=${apad_size[$f]}
      printf -v pad %$((length-1))s
      pad=${pad// /-}
      bar+="$pad+"
    end_for

    formatted_data="$bar$NL"
    # done twice, first time it calculates the boundaries
    get_formatted_data || fail
    formatted_data+="$bar$NL"

    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_json() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type == data ]]; then
        o+="\"$field\":\"$value\","
      fi
    }

    after_row() {
      if [[ $row_type == data ]]; then
        o=${o%,}
        o+="},{"
        formatted_data+="$o"
      fi
    }

    formatted_data="[{"
    get_formatted_data || fail
    formatted_data=${formatted_data%'},{'}
    formatted_data+="}]$NL"

    out_no_nl "$formatted_data"

  end_function
  handle_return
}

display_data_kv() {
  begin_function

    local formatted_data o c r v row

    each_field() {
      if [[ $row_type == data ]]; then
        quotes=double shell_quote_var value
        o+="$field=$value "
      fi
    }

    after_row() {
      if [[ $row_type == data ]]; then
        formatted_data+="${o% }$NL"
      fi
    }

    formatted_data=
    get_formatted_data || fail

    out_no_nl "$formatted_data"

  end_function
  handle_return
}

get_selected_field_indices() {
  begin_function
    local field i found

    out_fields=" $out_fields "
    out_fields=${out_fields// all / ${table_fields[*]} }
    out_fields=${out_fields# }
    out_fields=${out_fields% }

    begin_for field in ${out_fields}; doo
      log_show_vars='field'
      fence

      found=f
      begin_for (( i = 0; i < field_count; i++ )); doo
        if [[ "${table_fields[$i]}" == "$field" ]]; then
          found=t
          selected_field_indices+=( $i )
          break
        fi
      end_for
      if [[ $found == f ]]; then
        log_fatal "Field not found: $field. Must be one of: ${table_fields[*]}"
        fail1
      fi
    end_for
    selected_count=${#selected_field_indices[*]}
  end_function
  handle_return
}

# inputs:
#   $1           field index
#   field_count
# output:
#   single_column
get_single_column() {
  local field_index=$1
  begin_function

    local value row t

    single_column=
    begin_for (( row = 0; row < row_count; row++ )); doo
      (( t = row * field_count + field_index ))
      value=${table_data[$t]}
      single_column+="$value$NL"
    end_for

  end_function
  local log_return_vars=single_column
  handle_return
}

# inputs:
#   row_count
#   field_count
#   out_sort
#   table_data
# outputs:
#   table_data
handle_sorting() {
  begin_function
    local sort_flags=
    if [[ $out_sort == -* ]]; then
      out_sort=${out_sort#-}
      sort_flags='-r'
    fi

    local i sort_field_index=
    begin_for (( i = 0; i < field_count; i++ )); doo
      if [[ "${table_fields[$i]}" == "$out_sort" ]]; then
        sort_field_index=$i
        break
      fi
    end_for

    if [[ ! "$sort_field_index" ]]; then
      log_fatal "Invalid sort field: $out_sort"
      fail1
    fi

    local single_column result
    get_single_column $sort_field_index || fail
    result=$(echo -n "$single_column" | sort -u $sort_flags) || fail
    local from_data=( "${table_data[@]}" ) 

    table_data=( )
    OIFS=$IFS
    IFS="$NL"
    local v sort_field_value row t beginning_of_row
    begin_for v in ${result}; doo
      IFS=$OIFS
      local from_data_size=${#from_data[*]}
      begin_for (( row = 0; row < row_count; row++ )); doo
        (( beginning_of_row = row * field_count ))
        (( t = beginning_of_row + sort_field_index ))
        sort_field_value=${from_data[$t]}
        if [[ "$sort_field_value" == "$v" ]]; then
          table_data+=( "${from_data[@]:beginning_of_row:field_count}" )
        fi
      end_for
    end_for
    IFS=$OIFS
  end_function
  handle_return
}

get_command_output() {
  begin_function

    log_verbose "Preparing output..."
    if [[ "$get_show_file" && -f "$out_path/$get_show_file" ]]; then
      if [[ "$out_limit" ]]; then
        cat $out_path/$get_show_file | head -n $out_limit || fail
      else
        cat $out_path/$get_show_file || fail
      fi
    else
      if is_array table_data; then

        local selected_field_indices=() \
          field_count=${#table_fields[*]} \
          selected_count \
          row_count=${#table_data[*]} \

        if (( field_count == 0 )); then
          log_fatal "field_count can't be 0."
          fail1
        fi

        log_verbose "Indexing and sorting..."
        (( row_count /= field_count ))
        get_selected_field_indices || fail
        if [[ "$out_sort" ]]; then
          handle_sorting || fail
        fi

        unset each_field

        after_row() {
          formatted_data+="$o$NL"
        }

        log_verbose "Displaying data in $out_form form..."
        case $out_form in 
          c|csv)
            display_data_csv || fail
          ;;
          tsv)
            display_data_tsv || fail
          ;;
          r|raw)
            display_data_raw || fail
          ;;
          s|simple)
            display_data_simple || fail
          ;;
          t|table)
            display_data_table || fail
          ;;
          j|json)
            display_data_json || fail
          ;;
          k|kv)
            display_data_kv || fail
          ;;
          l|long)
            display_data_long || fail
          ;;
          *)
            log_fatal "Unknown form: $out_form. Choose from one of: raw simple table json kv"
            fail1
          ;;
        esac
      elif [[ -v table_data ]]; then
        out "$table_data"
      else
        out "No data"
      fi
    fi
  end_function
  handle_return
}

get_command_load_data_branch() {
  begin_function

    local short_cell
    get_short_cell
    log_verbose "Loading branch $short_cell..."
    local subs
    subs=$(find1 $cell_path -type d -not -name '.*' | sort -g) || fail1
    local cell_path=

    begin_for cell_path in $subs; doo
      if [[ -f $cell_path/output.tab ]]; then
        get_command_load_data_leaf || fail
      else
        get_command_load_data_branch || fail
      fi
    end_for

  end_function
  handle_return
}

get_command_load_data_leaf() {
  begin_function

    local short_cell
    get_short_cell
    log_verbose "Loading leaf data for $short_cell"
    local context_type= output_data output_fields
    load_dna_item $cell_path/output.tab || fail

    if (( ${#table_fields[*]} == 0 )); then
      table_fields=( ${output_fields[*]} )
    elif [[ "${table_fields[*]}" != "${output_fields[*]}" ]]; then
      log_fatal "Fields are different across sub cells. This should not be possible. Try clean updating."
      fail1
    fi

    table_data+=( "${output_data[@]}" )

  end_function
  handle_return
}

get_command_load_data() {
  begin_function

    local \
      original_anchor_dims=$anchor_dims \
      original_cell_path=$cell_path \
      extra_fields=${extra_fields:-} \

    localize
    if [[ "${localize_dims:-}" ]]; then
      eval "local $localize_reverse_dims" || fail
    fi

    if [[ $cell_is_leaf == t || -f $out_path/output.tab ]]; then
      get_command_load_data_leaf || fail
    else
      get_command_load_data_branch || fail
    fi

  end_function
  handle_return
}

default_out_fields=
get_command() {
  begin_function

    local cell_path=${cell_path:-}

    load_branch_info || fail
    switch_context $cell_path || fail
    setup_dims || fail
    expand_dims ${all_dims[*]:-} || fail

    #if [[ $cell_is_leaf == f ]]; then
    #  # If the cell is a leaf, this has already been done in switch_context
    #  calc_coords_branch || fail
    #fi
    fence

    local out_form=${out_form:-${form:-${default_out_form:-simple}}} \
      out_fields=${out_fields:-${fields:-${field:-}}} \
      out_sort=${out_sort:-${sort:-${default_out_sort:-}}} \
      out_limit=${out_limit:-${limit:-}} \
      table_data=() \
      table_fields=() \
      used_default_fields=f \

    out_fields=${out_fields,,}
    if [[ ! "$out_fields" || $out_fields == \? ]]; then
      out_fields=${default_out_fields:-all} \
      used_default_fields=t
    fi

    if [[ -v out_fields_append ]]; then
      out_fields+=" $out_fields_append"
    fi

    if [[ -v out_fields_prepend ]]; then
      out_fields="$out_fields_prepend $out_fields"
    fi

    if [[ -v out_fields_remove ]]; then
      local f
      for f in $out_fields_remove; do
        remove_word_from_string out_fields $f 
      done
    fi

    if function_exists get_op; then
      execute_op get || fail
    else

      get_command_load_data || fail
      fence

      local get_show_file=${get_show_file:-}
      get_command_output

    fi

    command_successful=t

  end_function
  handle_return
}

