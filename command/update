#!/usr/bin/env bash

break_if_not_changed() {
  begin_function
    if [[ ! "${needs_update:-}" ]]; then
      if [[ "$status_path" ]]; then
        get_needs_update $cell_path || fail
      else
        needs_update=t
      fi
    fi
    if [[ $needs_update == f ]]; then
      if [[ "${downstream_ref_path:-}" ]]; then
        log_debug "Linking upstream cell to it's downstream cell cyto up folder"
        force=t safe_link $cell_path $downstream_ref_path/chosen || fail
      fi
      leave_loop=1
    fi
  end_function
  handle_return
}

pre_update() {
  begin_function

    update_successful=
    something_changed=f
    member_count=0
    cell_locks=

    write_lock=t \
      timeout=$lock_timeout \
      cell_lock $cell_path || fail

    if [[ -v current_job_path ]]; then
      safe_link $current_job_path $running_job_path || fail
    fi

    touch $status_path/last-update-start || fail
    # this needs to be at the beginning of the update so other processes
    #   could potentially invalidate it, requiring another update
    touch $status_path/up-to-date || fail

    if [[ $reuse_existing_out == t && -f $status_path/last-good-update-end ]]; then
      # Don't allow cells to reuse old data when it is mid-modification and this update fails
      rm $status_path/last-good-update-end || fail
    fi

  end_function
  handle_return
}

create_downstream_links() {
  begin_function

    if [[ "${downstream_ref_path:-}" ]]; then
      local cell_path down_cell_path down_cell_name

      get_cell_path ${downstream_ref_path%/*} || fail
      down_cell_path=$cell_path

      get_cell_name $down_cell_path || fail
      down_cell_name=${cell_name%% *}

      local down_link=$down_path/$down_cell_name
      if [[ ! -e $down_link ]]; then
        if [[ ! -d $down_path ]]; then
          mkdir $down_path || fail
        fi
        safe_link $down_cell_path $down_link || fail
      else
        local link_target=$(readlink $down_link) || fail
        if [[ $link_target != $down_cell_path ]]; then
          log_fatal "Link conflict: A link already exists but doesn't point to the same place."
          log_fatal "  $link_target is expected to point to $down_cell_path"
        fi
      fi
    fi

  end_function
  handle_return
}

# inputs: 
#   up_dna
prep_upstream() {
  # down_fresh may be used by prep script to propagate freshness requirements to upstream
  down_fresh=$required_freshness

  # Don't inherit parent's freshness requirements, 
  #   only what upstream prep explicitly states
  # extra_dims includes dimensions that need to be promoted in upstream that don't
  #   exist in branch_dims
  fresh=$down_fresh required_freshness= default_freshness= extra_dims=

  local log_show_vars=^up_dna
  begin_function
    unset prep
    if [[ -f $up_dna/prep ]]; then
      log_debug "Executing upstream prep: $up_dna/prep"
      source $up_dna/prep || fail
      if ! type -t prep &>/dev/null; then
        log_fatal "$up_dna/prep must have a function named prep"
        fail1
      fi
      prep || fail
      setup_dep_defaults || fail
    fi
  end_function
  handle_return
}

update_upstream_prep() {

  local log_show_vars="^up_cyto"
  begin_function

    if [[ ! -d $cyto_up_path ]]; then
      mkdir $cyto_up_path || fail
    fi

    # This may be overridden by upstream prep file to customize how failure of this upstream is handled
    handle_upstream_result() {
      if [[ $update_successful == f ]]; then
        log_error "Failed to update upstream cell $up_dna"
      fi
    }

    if [[ -d $up_cyto ]]; then

      if [[ $previous_upstream_changed == t ]]; then
        log_debug "Previous upstream changed, removing cyto upstream"
        rm -r "$up_cyto" || fail
      fi

    fi

    if [[ ! -d $up_cyto ]]; then

      log_debug "Cyto upstream is missing, will need to update"
      mkdir $up_cyto || fail
      local needs_update=t
      prep_upstream || fail

    fi

  end_function
  handle_return

}

update_upstream_choose() {
  begin_function

    if [[ -d $up_dna/cell ]]; then
      chosen=$up_dna/cell
    elif [[ -d $up_dna/choices ]]; then
      local choices=$(find1 $up_dna/choices -not -name ".*" | sort -g) || fail

      if [[ ! "$choices" ]]; then
        log_fatal "No choices defined for upstream $up_dna"
        fail1
      fi

      # are any already updated?
      local choice
      begin_for choice in $choices; doo

        get_needs_update $choice || fail
        if [[ "$needs_update" == f ]]; then
          chosen=$choice
          break
        fi

      end_for

      if [[ ! "$chosen" ]]; then
        chosen=${choices%% *}
        needs_update=t
      fi
    else
      log_fatal "Missing either cell or choices folder for dependency: $up_dna"
      fail1
    fi

    local log_show_vars=chosen
  end_function
  handle_return
}

update_upstream_get_locks() {
  local log_show_vars=^up_cyto
  begin_function

    local lock 
    local -r shared_lock_path=$up_cyto/chosen/.cyto/shared-locks
    if [[ -d $shared_lock_path ]]; then
      local shared_locks=$(find1 $shared_lock_path -not -name ".*" | sort -g) || fail
      begin_for lock in $shared_locks; doo
        write_lock=f \
          timeout=$lock_timeout \
          cell_lock $lock || fail
      end_for
    fi

    local -r exclusive_lock_path=$up_cyto/chosen/.cyto/exclusive-locks
    if [[ -d $exclusive_lock_path ]]; then
      local exclusive_locks=$(find1 $exclusive_lock_path -not -name ".*" | sort -g) || fail
      begin_for lock in $exclusive_locks; doo
        write_lock=t \
          timeout=$lock_timeout \
          cell_lock $lock || fail
      end_for
    fi

    # obtain lock from upstream cell
    write_lock=f \
      timeout=$lock_timeout \
      cell_lock $up_cyto/chosen || fail

  end_function
  handle_return
}

# inputs: 
#   upstream: a folder in .dna/up
update_upstream() {

  local required_freshness=$required_freshness fresh=$fresh \
    default_freshness=$default_freshness up_dna=$upstream

  if [[ -e $up_dna/.dna ]]; then
    log_fatal "update_upstream upstream field should be a path to a upstream spec, not a cell"
    fail1
  fi

  local log_show_vars=^up_dna 
  begin_function

    local up_part=${up_dna##*/}
    local up_cyto=$cyto_up_path/$up_part

    update_upstream_prep || fail

    local chosen=
    update_upstream_choose || fail

    if [[ ! "$chosen" ]]; then
      log_fatal "chosen was not set."
      fail1
    fi

    if [[ ! -e $up_cyto/chosen ]]; then
      needs_update=t
    fi

    if [[ ! "$needs_update" ]]; then
      get_needs_update $chosen || fail
    fi

    if [[ "${localize_dim_vars:-}" ]]; then
      eval "$localize_dim_vars"
    fi

    if [[ $needs_update == t ]]; then

      downstream_ref_path=$up_cyto \
        execute_command "$(realpath $chosen)" update || fail

      if [[ $something_changed == t ]]; then
        previous_upstream_changed=t
      fi

      handle_upstream_result || fail

      if [[ $update_successful == f ]]; then
        break
      fi

    fi
    
    update_upstream_get_locks || fail

  end_function
  handle_return
}

update_upstreams() {
  begin_function

    if [[ "$update_successful" == f ]]; then
      succeed
    fi

    touch $status_path/deps-up-to-date || fail
    update_successful=t

    if [[ -d "${dna_up_path:-}" ]]; then

      local previous_upstream_changed=f upstream upstreams

      upstreams=$(find1 $dna_up_path -not -name '.*' | sort -g) || fail
      begin_for upstream in $upstreams; doo
        update_upstream || fail
        if [[ $update_successful == f ]]; then
          break
        fi
      end_for

    fi

  end_function

  if failed || [[ $update_successful == f ]]; then
    rm $status_path/deps-up-to-date 
    update_successful=f
  fi

  handle_return
}

update_members() {
  begin_function
    if [[ "${leaf_dims:-}" ]]; then
      par=t fork=t function=update_member for_each_member "${leaf_dims[0]}" || fail
    fi
  end_function
  handle_return
}

update_member() {
  local sane_value member_path \
    log_vars=member log_show_vars=member \
    downstream_ref_path=${downstream_ref_path:-}

  begin_function_flat

    get_sane_value "$member" || fail
    member_path=$cell_path/.dim/$sane_value
    if [[ ! -d $member_path ]]; then
      if [[ ! -d $cell_path/.dim ]]; then
        mkdir $cell_path/.dim || fail
      fi
      create_sub_cell $member_path || fail
    fi
    local needs_update=
    get_needs_update $member_path || return 1
    if [[ $needs_update == t ]]; then

      if (( member_count > 1 )); then
        log_debug "More than one member found ($member_count), not passing downstream_ref_path."
        downstream_ref_path=
      elif [[ "$downstream_ref_path" ]]; then
        log_debug "Only one member found, passing downstream_ref_path: $downstream_ref_path"
      fi
      fork_fg execute_command $member_path update || fail

      if [[ $update_successful == f ]]; then
        error "Failed to update member cell $member"
        reply_to_caller "update_successful=f" || fail
      else 
        update_successful=
      fi
    fi

    if (( member_count == 1 )); then
      downstream_ref_path=
    fi

  end_function
  handle_return
}

no_change_in_dirs() {
  local left=$1 right=$2
  if [[ -d $left ]]; then
    if [[ -d $right ]]; then
      local sub_full sub already_checked

      for sub_full in $(find1 $left -not -name .dna -not -name .cyto); do
        sub=${sub_full##*/}
        if ! no_change_in_dirs $left/$sub $right/$sub; then
          return 1
        fi
        already_checked+=" $sub"
      done
      already_checked+=' '

      for sub_full in $(find1 $right -not -name .dna -not -name .cyto); do
        sub=${sub_full##*/}
        if [[ "$already_checked" =~ \ $sub\  ]]; then
          continue
        fi
        if ! no_change_in_dirs $right/$sub $left/$sub; then
          return 1
        fi
      done

    else
      return 1
    fi
  elif [[ -f $left ]]; then
    if [[ -f $right ]]; then
      diff $left $right &>/dev/null
    else
      return 1
    fi
  else
    return 0
  fi
}

update_self_move_out_path() {
  begin_function_flat

    if [[ -e $out_path/.dna ]]; then
      if [[ ! -e $out_path.new/.dna ]]; then
        mv $out_path/.dna $out_path.new/.dna || fail
      else
        log_fatal "Target .dna folder already exists, when it shouldn't"
        fail1
      fi
    fi

    if [[ -e $out_path/.cyto ]]; then
      if [[ ! -e $out_path.new/.cyto ]]; then
        mv $out_path/.cyto $out_path.new/.cyto || fail
      else
        log_fatal "Target .cyto folder already exists, when it shouldn't"
        fail1
      fi
    fi

    if [[ -e $out_path.old ]]; then
      rm -rf $out_path.old || fail
    fi

    if [[ -d $out_path ]]; then
      mv $out_path $out_path.old || fail
    fi

    mv $out_path.new $out_path || fail
    something_changed=t

  end_function
  handle_return
}

update_self() {
  local log_vars='short_cell'
  begin_function_flat

    update_successful=
    can_retry=f

    if [[ $can_update == t ]]; then

      local reuse_existing_out=${reuse_existing_out:-f}

      local out_path=$cell_path
      if [[ $reuse_existing_out == f ]]; then
        out_path=$cell_path.new
        if [[ -d $out_path ]]; then
          rm -rf $out_path || fail
        fi
      else
        # allow update code to set this, since we can't compare when changes are made in place
        something_changed=
      fi
      if [[ ! -d $out_path ]]; then
        mkdir $out_path || fail
      fi

      tee_output_to_log || fail
      execute_op update || fail
      completion_time=$EPOCHSECONDS
      untee_output || fail

      update_successful=${update_successful:-f}

      if [[ $reuse_existing_out == f ]]; then
        out_path=$cell_path
        if [[ $update_successful == t ]]; then
          if no_change_in_dirs $out_path $out_path.new; then
            rm -rf $out_path.new || fail
          else
            update_self_move_out_path || fail
          fi
        fi
      else # $reuse_existing_out == t
        # if update code didn't set this, we must assume the worst
        if [[ ! "$something_changed" ]]; then
          something_changed=t
        fi
      fi

    fi

  end_function
  untee_output  # in case update failed and block was exited early
  handle_return
}

update_self_retry_loop() {
  begin_function

    ref_group=none
    delay=$retry_delay

    can_update=f
    find_op_or_function update || return 1
    if [[ "$found_op_function" || "$found_op" ]]; then
      can_update=t
    fi

    if [[ "$update_successful" ]]; then
      can_update=f
    fi

    local action=local_update
    if [[ $can_update == t ]]; then
      for ((retry=0; retry < retry_max; retry++)); do

        if [[ $retry -gt 0 ]]; then
          log_info "Waiting $delay seconds before trying again" 
          sleep $delay
          let 'delay *= retry_scale' || true
        fi

        local attempt_string=
        if (( retry_max > 1 )); then
          attempt_string=", attempt $((retry+1)) of $retry_max"
        fi
          
        log_debug "Executing local update of $short_cell$attempt_string" 

        update_self || fail

        [[ $can_retry == f || $update_successful == t ]] && break

      done
    fi

    update_successful=${update_successful:-t}

  end_function
  handle_return
}

check_results() {
  begin_function

    if [[ $can_update == t ]]; then
      if [[ $update_successful == t && $post_validate == t ]]; then
        log_debug "Post validating"
        local check_successful=f
        can_retry=f
        execute_op check || return 1
        if [[ $check_successful == f ]]; then
          log_debug "Validation failed"
          update_successful=f
        fi
      fi
    else
      update_successful=t
    fi

  end_function
  handle_return
}

post_update() {
  local result_string
  begin_function

    completion_time=${completion_time:-$EPOCHSECONDS}
    if [[ $update_successful == t ]]; then
      result_string="successful"
    else
      result_string="failed"
      update_successful=f
    fi

    if [[ $pretend == f ]]; then

      if [[ $update_successful == t ]]; then
        touch -d @$completion_time $status_path/last-good-update-end || fail
        cp -a $status_path/last-update-start \
              $status_path/last-good-update-start || fail
        if [[ -v current_job_path ]]; then
          force=t safe_link $current_job_path $job_path/last-success || fail
        fi
        if [[ "${props:-}" ]]; then
          update_prop_hash || fail
        fi
        if [[ $something_changed == t ]]; then
          from_cell=$cell_path \
            propagate_change_to_downstream || fail
        fi
        if [[ "${downstream_ref_path:-}" ]]; then
          log_debug "Linking upstream cell to it's downstream cell cyto up folder"
          force=t safe_link $cell_path $downstream_ref_path/chosen || fail
        fi
      else
        touch -d @$completion_time $status_path/last-bad-update-end || fail
        force=t safe_link $current_job_path $job_path/last-failure || fail
        cp -a $status_path/last-update-start \
              $status_path/last-bad-update-start || fail
      fi

      if [[ $cell_is_leaf == t || $show_branches == t ]]; then
        log_info "Update $result_string. ($short_cell)"
      else
        log_debug "Update $result_string. ($short_cell)"
      fi

    else
      log_info "Pretend update $result_string."
    fi

    if [[ "${reply_file:-}" ]]; then
      echo "update_successful=${update_successful:-}" >>$reply_file || fail
    fi

    cell_unlock $cell_path || fail

    if [[ -v running_job_path ]]; then
      rm $running_job_path || fail
    fi

  end_function
  handle_return
}

create_sub_branch() {
  local log_show_vars=^sub_dna_path
  begin_function

    mkdir $sub_dna_path/dim || fail

    local from_dim
    begin_for from_dim in ${super_dims[*]:1}; doo
      local to_dim=$sub_dna_path/dim/${from_dim##*/}
      safe_link $(realpath $from_dim) $to_dim || fail
    end_for

    local contents=$(find1 $dna_path -not -name '.*') || fail
    begin_for part in $contents; doo
      if [[ "$part" == */dim \
         || "$part" == */context* \
         || "$part" == */up \
         || "$part" == */down \
         || "$part" == */leaf \
         || "$part" == */cyto-template \
         ]]; then
        continue
      fi
      safe_link $(realpath $part) $sub_dna_path/ || fail
    end_for 

    if [[ -d $dna_path/leaf ]]; then
      local contents=$(find1 $dna_path/leaf -not -name '.*') || fail
      mkdir $sub_dna_path/leaf || fail
      begin_for part in $contents; doo
        if [[ "$part" == */up \
           || "$part" == */down \
           ]]; then
          continue
        fi
        safe_link $(realpath $part) $sub_dna_path/leaf/ || fail
      end_for 
    fi

  end_function
  handle_return
}

create_sub_leaf() {
  local log_show_vars=^sub_dna_path
  begin_function

    if [[ -d $dna_path/leaf ]]; then
      local contents=$(find1 $dna_path/leaf -not -name '.*') || fail
      local part
      begin_for part in $contents; doo
        if [[ "$part" == */up \
           || "$part" == */down \
           ]]; then
          continue
        fi
        safe_link $(realpath $part) $sub_dna_path/ || fail
      end_for 
    fi

    if [[ -d $dna_path/key ]]; then
      safe_link $(realpath $dna_path/key) $sub_dna_path/ || fail
    fi

  end_function
  handle_return
}

append_dim_var_to_context() {
  local dim=$1
  begin_function_flat
    dim=${dim##*/}
    dim=${dim#*-}

    local plural
    get_plural $dim
    local dims=$plural
    local ddim=d_$dim ddims=d_$dims

    if [[ ! -v $ddim ]]; then
      log_fatal "Internal error: While trying to create a branch sub cell, required dim value $dim is missing."
      fail1
    fi
    local value=${!ddim}
    if [[ "$value" == $empty_member ]]; then
      value=
    fi
    echo "# Generated by create_sub_branch from $cell_path
$ddim='$value'
localize_dim_vars+=' $ddim=\${$ddim:-\${$dim:-}} $ddims=\${$ddims:-\${$dims:-\${$ddim:-\${$dim:-}}}}'" >$sub_dna_path/context-before || fail
    log_debug "Appending dim $ddim=$value to $sub_dna_path/context-before"
  end_function
  handle_return
}

promote_dep_cell() {
  local log_show_vars=^from
  begin_function

    local trunk_cell=
    get_trunk_cell $from || fail

    local dims= last_cell_dims_loaded
    load_dims $trunk_cell/.dna/dim || fail

    local dep_dim already_promoted_path=$from

    # We don't need to promote all dims in target, but only the dims in the source
    # e1 -> e1, not e1 -> e1/ods
    # only promote what is in source + provided by prep
    #   can't just promote because a var exists, only if it's actually used at that point

    begin_for dep_dim in ${dims[*]}; doo

      log_debug "Considering promotion of $dep_dim"

      # is this dim already promoted?
      if [[ $already_promoted_path == */.dim/* ]]; then
        already_promoted_path=${already_promoted_path%/.dim/*}
        log_debug "Already promoted: $dep_dim"
        continue
      fi

      local branch_dim found_branch_dim=f
      # upstream prep script can add extra_dims as needed
      # branch_dims here is the full set of dims for the subject cell, whereas 
      #   dims is the full set of dims for the upstream cell being promoted
      begin_for branch_dim in ${branch_dims[*]} ${extra_dims[*]}; doo
        if [[ $branch_dim == $dep_dim ]]; then
          log_debug "Found branch dim for $dep_dim"
          found_branch_dim=t
          break
        fi
      end_for

      local values=
      if [[ $found_branch_dim == f ]]; then
        # can't promote if dep dim doesn't exist on the branch 
        log_debug "Upstream dim not found in base branch dims: $dep_dim"
        if [[ $cell_is_leaf == t ]]; then
          if type -t ${dep_dim}_member_expand >/dev/null; then
            value= ${dep_dim}_member_expand 
            if [[ "$values" ]]; then
              log_debug "Found default for $dep_dim = $values"
            fi
          fi
          if [[ ! "$values" ]]; then
            log_fatal "Leaf cell was unable to resolve upstream dep to a leaf also. Missing dim $dep_dim"
            fail1
          fi
        else
          break
        fi
      fi

      local dep_dim_var=d_$dep_dim

      if [[ -v $dep_dim_var ]]; then
        values=${!dep_dim_var}
        if type -t ${dep_dim}_member_expand >/dev/null; then
          value=$values ${dep_dim}_member_expand
        fi
      fi

      values=( $values )

      if [[ "${#values[*]}" -gt 1 ]]; then
        log_fatal "Multiple values in dependency dims not yet supported (dim=$dep_dim)"
        fail1
      fi

      if [[ "${values:-}" ]]; then
        local sane_value
        get_sane_value "$values" || fail
        local old_from=$from
        from=$from/.dim/$sane_value
        log_debug "Promoted $dep_dim"
        if [[ ! -d $from ]]; then
          eval "$dep_dim_var=\"$values\""
          log_debug "Creating sub for $from"
          fork_fg "load_context_and_create_sub $old_from $from" || fail
        fi
      else
        log_debug "Did not promote $dep_dim because no value is found for it yet"
        break
      fi

    end_for
  end_function
  handle_return
}

# should be forked because dims will be altered
# from and to are paths to up/choices/{upstream} which must be a cell
migrate_cell() {
  local -r dep_link=$1 to=$2
  local from=$(realpath $dep_link) 
  local log_vars=from log_show_vars="^dep_link ^to"
  begin_function

    if [[ "$from" == */.dna/sub/* ]]; then
      local fixed_from=${from//.dna\/sub\//}
      if [[ -d $fixed_from ]]; then
        rm $dep_link || fail
        safe_link $fixed_from $dep_link || fail
        from=$fixed_from
      else
        log_fatal "Dependencies must link to planted cells, not seeds: $from"
        fail1
      fi
    fi

    promote_dep_cell || fail
    safe_link $from $to || fail

  end_function
  handle_return
}

# from and to are paths to cells
migrate_dep2() {
  local from=$1 to=$2
  begin_function_flat

    if [[ -f $from || -f $from/.dna ]]; then
      safe_link $(realpath $from) $to || fail

    elif [[ -d $from/.dna ]]; then
      # recursive
      fork_fg "migrate_cell $from $to" || fail

    elif [[ -d $from ]]; then
      log_fatal "Directory inside of dependency not supported yet"
      fail1
    
    fi

  end_function
  handle_return
}

# migrates a dependency given a .dna/up or .dna/leaf/up or .dna/down folder
migrate_dep() {
  local -r from=$1 to=$2

  local log_show_vars='^from ^to'
  begin_function
    if [[ -d $from ]]; then

      if [[ ! -d $to ]]; then
        mkdir $to || fail
      fi

      local dep deps
      deps=$(find1 $from -type d -not -name '.*') || fail
      begin_for dep in $deps; doo

        local dep_name=${dep##*/}

        if [[ ! -d $to/$dep_name ]]; then
          mkdir $to/$dep_name || fail
        fi

        if [[ -f $dep/prep ]]; then
          safe_link $dep/prep $to/$dep_name/prep || fail
        fi

        if [[ -d $dep/cell ]]; then
          migrate_dep2 $dep/cell $to/$dep_name/cell || fail 
        elif [[ -d $dep/choices ]]; then
          local choice choices
          if [[ ! -d $to/$dep_name/choices ]]; then
            mkdir $to/$dep_name/choices || fail
          fi
          choices=$(find1 $dep/choices -not -name '.*') || fail
          begin_for choice in $choices; doo
            local choice_name=${choice##*/}
            if [[ ! -d "$choice" ]]; then
              log_fatal "Invalid config for $dep: $choice_name is not a folder"
              fail1
            fi
            migrate_dep2 $choice $to/$dep_name/choices/$choice_name || fail
          end_for
        else
          log_fatal "Dependency is missing choices or cell folder: $dep"
          fail1
        fi

      end_for

    fi
  end_function
  handle_return
}

migrate_out() {
  local from=$1
  local -r to=$2

  local log_show_vars='^from ^to'
  begin_function

    if [[ -d $from ]]; then
      local -r dim_var=d_${leaf_dims}
      local -r value=${!dim_var}
      local sane_value
      get_sane_value "$values" || fail
      from+=/$sane_value
      from=$(realpath $from)
      if [[ ! -d $from ]]; then
        log_fatal "dna out dim path is missing: $from"
        fail1
      fi
      safe_link $from $to || fail
    fi

  end_function
  handle_return
}

migrate_deps() {
  local log_show_vars='^dna_path ^sub_dna_path'
  begin_function

    migrate_dep $dna_path/up $sub_dna_path/up || fail
    migrate_dep $dna_path/down $sub_dna_path/down || fail
    migrate_out $dna_path/out $sub_dna_path/out || fail

    if [[ $is_branch == t ]]; then
      migrate_dep $dna_path/leaf/up $sub_dna_path/leaf/up || fail
      migrate_dep $dna_path/leaf/down $sub_dna_path/leaf/down || fail
      migrate_out $dna_path/leaf/out $sub_dna_path/leaf/out || fail
    else
      migrate_dep $dna_path/leaf/up $sub_dna_path/up || fail
      migrate_dep $dna_path/leaf/down $sub_dna_path/down || fail
      migrate_out $dna_path/leaf/out $sub_dna_path/out || fail
    fi

  end_function
  handle_return
}

create_sub_branch_or_leaf() {
  local seed=$seed cell=$cell 
  local log_vars=cell log_show_vars=short_cell
  begin_function
    if [[ -d $cell ]]; then
      log_fatal "Cell already exists $cell"
      fail1
    fi
    mkdir -p $cell || fail
    if [[ "$seed" ]]; then
      local seed_dna
      find_seed_dna $seed ${cell#$seed/} || fail
    fi
    if [[ "$seed_dna" ]]; then
      safe_link $(realpath $seed_dna) $cell/ || fail
    else
      local branch_dims=( ${branch_dims[*]} )
      if (( branch_dim_count >= trunk_dim_count )); then
        log_fatal "Interal error: there are more branch dims than trunk dims defined for this cell: $cell_path"
        fail1
      fi
      branch_dims+=( ${trunk_dims[$branch_dim_count]} )
      
      local sub_dna_path=$cell/.dna 
      mkdir $sub_dna_path || fail
      local -r super_dims=( $(find1 $dna_path/dim -not -name '.*' | sort -g) ) || fail
      local -r super_dim_count=${#super_dims[*]}
      if [[ "$super_dims" ]]; then
        local is_branch=f
        if (( super_dim_count > 1 )); then
          is_branch=t
          create_sub_branch || fail
        else
          create_sub_leaf || fail
        fi
        append_dim_var_to_context ${super_dims[0]} || fail
        migrate_deps || fail
      fi
    fi
  end_function
  handle_return
}

create_sub_cell_with_seed() {
  # seed is allowed to be empty, meaning no seed exists at this location
  local seed=$1 sub_cell=$2

  local log_show_vars='^seed ^sub_cell'
  begin_function

    if [[ "$sub_cell" =~ .dna ]]; then
      log_fatal "Internal error: Invalid sub_cell $sub_cell."
      log_fatal "We should not be creating a sub cell inside of a dna folder"
      fail1
    fi

    if [[ ! -d $sub_cell ]]; then

      local short_cell
      get_short_cell $sub_cell 
      log_debug "Creating sub cell $short_cell"

      if [[ -d $sub_cell.new ]]; then
        rm -rf $sub_cell.new || fail
      fi

      local parent=${sub_cell%/*}
      if [[ "$parent" == "$sub_cell" ]]; then
        log_fatal "Can't create sub cells in a cell without parents: $sub_cell"
        stack_trace
        fail1
      fi

      local parent_part=${parent##*/}
      if [[ "$parent_part" == .dim ]]; then
        seed=$seed \
          cell=$sub_cell.new \
          create_sub_branch_or_leaf || fail
      else
        mkdir -p $sub_cell.new || fail
        seed=${seed:-$parent}
        find_seed_dna $seed ${sub_cell#$seed/} || fail
        if [[ "$seed_dna" ]]; then
          safe_link $(realpath $seed_dna) $sub_cell.new/.dna || fail
        fi
      fi
      mv $sub_cell.new $sub_cell || fail
    fi
  end_function
  handle_return
}

# seed must not be empty here
create_sub_cells2() {
  local seed=$1 relative_path=$2 sub_full sub 
  [[ "$relative_path" ]] && relative_path=/$relative_path
  local sub_path=$seed/.dna/sub$relative_path
  local subs=$(find1 $sub_path -not -name ".*" -not -name "$wild_sub_path" | sort -g) || return 1
  for sub_full in $subs; do
    sub=${sub_full##*/}
    if [[ -f $sub_full ]]; then
      safe_link $(realpath $sub_full) $seed$relative_path/$sub || return 1
    elif [[ -L $sub_full ]]; then
      cp $sub_full $seed$relative_path/$sub || return 1
    elif [[ -d $sub_full ]]; then
      create_sub_cell_with_seed $seed $seed$relative_path/$sub || return 1
      if [[ "$relative_path" ]]; then
        # recursive
        create_sub_cells2 $seed ${relative_path#/}/$sub || return 1
      else
        # recursive
        create_sub_cells2 $seed $sub || return 1
      fi
    fi
  done
}

create_sub_cells() {
  if [[ -f "$status_path/subs-up-to-date" ]]; then
    return 0
  fi
  if [[ "${sub_path:-}" ]]; then
    create_sub_cells2 $cell_path '' || return 1
  fi
  if [[ "$status_path" ]]; then
    touch $status_path/subs-up-to-date || return 1
  fi
  return 0
}

create_sub_cell() {
  local sub_cell=$1
  find_seed $sub_cell || return 1
  # recursive
  create_sub_cell_with_seed $seed $sub_cell || return 1
  return 0
}

load_context_and_create_sub() {
  local parent_cell=$1 sub_cell=$2
  local log_show_vars='^parent_cell ^sub_cell'
  begin_function
    cell_path=$parent_cell cell_context_load || fail
    if [[ "$localize_dim_vars" != local ]]; then
      eval "$localize_dim_vars" || fail
    fi
    # recursive
    create_sub_cell $sub_cell || fail
  end_function
  handle_return
}

is_leaf_cell() {
  local cell_path=$1
  [[ ! -d $cell_path/.dna/dim ]]
}

get_dep_member() {

  if [[ -f $dep_cell/.dna/context-before ]]; then
    source $dep_cell/.dna/context-before || return 1
  else
    log_fatal "Missing context-before in $dep_cell/.dna."
    log_fatal "Should have been generated by update of it's trunk."
    log_fatal "Maybe try to run a clean on it and update again."
    return 1
  fi

  if [[ ! -v $dep_dim ]]; then
    log_fatal "Missing member for $dep_dim."
    log_fatal "This should have been defined in $dep_cell/.dna/context-before"
    return 1
  fi

  dep_member=${!dep_dim}
  return 0
}

# given a cell, find the nearest seed searching it's ancestors
# returns: seed
find_seed() {
  local cell=$1
  seed=
  if [[ -d $cell/.dna/sub ]]; then
    seed=$cell
  else
    local parent=${cell%/*}
    if [[ "${#parent}" -gt 1 && "$parent" != $cell ]]; then
      find_seed $parent || return 1
    fi
  fi
  return 0
}

# returns seed_dna
find_seed_dna() {
  local seed=$1
  local parent=${seed%/*}
  local path_to_cell=$2
  path_to_cell=${path_to_cell%.new}
  seed_dna=$seed/.dna/sub/$path_to_cell/.dna
  if [[ ! -e $seed_dna ]]; then
    seed_dna=
    if [[ -d $seed/.dna/sub ]]; then
      seed_dna=$seed/.dna/sub
      local path_array=( ${path_to_cell//\// } ) \
        failed=f
      for path_part in "${path_array[@]}"; do
        if [[ -d $seed_dna/$path_part ]]; then
          seed_dna+=/$path_part
        elif [[ -d $seed_dna/$wild_sub_path ]]; then
          seed_dna+=/$wild_sub_path
        else
          failed=t
          break
        fi
      done
      seed_dna+=/.dna
      if [[ $failed == t || ! -d $seed_dna ]]; then
        seed_dna=
      fi
    elif [[ ${#parent} -gt 1 ]]; then
      # recursive
      find_seed_dna $parent ${seed#$parent/}/$path_to_cell || return 1
    fi
  fi
  return 0
}

update() {
  begin_function_flat
    local leave_loop=0 needs_update=
    break_if_not_changed || fail
    if (( leave_loop > 0 )); then
      break
    fi
    pre_update || fail
    create_downstream_links || fail
    update_upstreams || fail
    if [[ $update_successful == t ]]; then
      update_successful=
      update_members || fail
      create_sub_cells || fail
      update_self_retry_loop || fail
      check_results || fail
    fi
    post_update || fail
  end_function
  handle_return
}

