#!/usr/bin/env bash

source $SIMPLETON_LIB/update-lib

quick_switch() {
  begin_function

    cyto_path=$cell_path/.cyto

    status_path=$cyto_path/status \
    context_check_file=$cyto_path/context-check \

    if [[ ! -f $context_check_file ]]; then
      switch_context $cell_path || fail
    else
      source $context_check_file || fail
    fi

  end_function
  handle_return
}

compute_age() {
  begin_function
    local last_good_update_file=$status_path/last-good-update-end
    if [[ -e $last_good_update_file ]]; then
      last_good_ts=$(date -r $last_good_update_file +%s) || fail
      last_good_date=$(date -r $last_good_update_file) || fail
      (( age_s = EPOCHSECONDS - last_good_ts ))
      convert_from_seconds $age_s age
    fi
  end_function
  handle_return
}

output_age_upstream_single() {
  local upstream=$1 indent=${indent:-0}
  begin_function
    local cell_is_leaf cyto_path status_path context_check_file cell_path
    cell_path=$(realpath $upstream)
    quick_switch $cell_path || fail

    local age='-' \
      last_good_ts \
      last_good_date \
      age_s \

    compute_age || fail

    local pad
    printf -v pad %${indent}s
    message+="${pad}${upstream##*/} age:$age$NL"

    # recursive
    output_age_upstream $cell_path || fail

  end_function
  handle_return
}

output_age_upstream() {
  local cell_path=$1 indent=${indent:-0}
  begin_function
    local upstreams upstream
    if [[ -d $cyto_path/up-chosen ]]; then
      upstreams=$(find1 $cyto_path/up-chosen -type d -not -name ".*" | sort) || fail
      (( indent += 2 ))
      begin_for upstream in $upstreams; doo
        output_age_upstream_single $upstream || fail
      end_for
      (( indent -= 2 ))
    fi
  end_function
  handle_return
}

output_age() {
  begin_function

    local age='-' \
      last_good_ts \
      last_good_date \
      age_s \

    compute_age || fail

    if (( command_detail < 1 )); then
      message+="age:$age "
    else
      message+="  Data Age$COL30: $age$NL"
      message+="  Last Good Update$COL30: $last_good_date$NL"
      if (( command_detail > 1 )); then
        message+="  Upstream Ages:$NL"
        indent=$((indent+2)) output_age_upstream $cell_path || fail
      fi
    fi

  end_function
  handle_return
}

output_needs_update() {
  begin_function

    local up_path=$cyto_path/up \
      log_message="No update needed" \
      needs_update= \

    get_needs_update_internal $cell_path || fail

    local freshness=fresh
    if [[ $needs_update == t ]]; then
      freshness=stale
    fi

    if (( command_detail < 1 )); then
      message+="$freshness "
    else
      message+="  Freshness$COL30: $freshness$NL"
      local default_freshness=${default_freshness:-inf}
      message+="  Default Freshness$COL30: $default_freshness$NL"
    fi

    if (( command_detail == 0 )); then
      message+="$log_message "
    elif (( command_detail > 0 )); then
      message+="  Update Status$COL30: $log_message$NL"
    fi

  end_function
  handle_return
}

output_status_leaf() {
  begin_function

    local indent=${indent:-0} \
      message= \
      short_cell=${cell_path#$base_path/} \

    if (( command_detail < 1 )); then
      message+="${short_cell:-.} "
    else
      message+="Cell: ${cell_path#/work/*/}$NL"
    fi

    if (( command_detail >= 0 )); then
      output_age || fail
    fi
    output_needs_update || fail

    message=${message%%*( )}
    echo "$message"

  end_function
  handle_return
}

output_status_branch() {
  begin_function

    local indent=${indent:-0}
    local subs sub
    subs=$(find1 $cell_path -not -name ".*" -type d | sort) || fail
    for sub in $subs; do
      output_status_folder $sub || fail
    done

  end_function
  handle_return
}

output_status_folder() {
  local cell_path=$1 indent=${indent:-0}
  begin_function

    log_verbose "Checking status of $cell_path"
    local cell_is_leaf cyto_path status_path context_check_file
    quick_switch $cell_path || fail

    if [[ $cell_is_leaf == t ]]; then
      output_status_leaf || fail
    else
      output_status_branch || fail
    fi

  end_function
  handle_return
}

status_command() {
  begin_function

    local cell_path=$cell_path
      base_path=$cell_path

    if (( command_detail < 0 )); then
      output_status_folder $cell_path | column -t || fail
    elif (( command_detail == 0 )); then
      output_status_folder $cell_path | column -t -l4 || fail
    else
      output_status_folder $cell_path || fail
    fi

    command_successful=t

  end_function
  handle_return
}

