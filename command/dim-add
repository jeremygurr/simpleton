#!/usr/bin/env bash

dim_add_find_shared_dim() {
  local d=$seed_path
  while [[ ${#d} -gt 3 ]]; do
    if [[ -d $d/.shared/dim ]]; then
      shared_dim_folder=$d/.shared/dim
      break
    fi
    d=${d%/*}
  done
}

dim_add_choose_dim() {
  begin_function
    if [[ "$shared_dim_folder" ]]; then
      echo "Choose a dim to add to this cell:" >&2
      echo "(to create a new one, you'll need to specify the dim parameter directly)" >&2
      local PS3="dim: " 
      select dims in \
        $(find $shared_dim_folder -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort)
        do break; done
      if [[ ! "$dims" ]]; then
        log_fatal "Invalid dim selected"
        fail1
      fi
    else
      log_fatal "Must specify a dim parameter containing the dim to add."
      fail1
    fi
  end_function
  handle_return
}

dim_add_create_branches() {
  begin_function
    local create_other=t create_each=f members=( )
    if [[ -f $dim_path/members.arr ]]; then
      load_arr $dim_path/members.arr members || fail
      local answer

      prompt_ynq "Do you want a $base_dim:_other folder created?" answer
      case $answer in
        n)
          create_other=f
        ;;
        q)
          out "Aborting."
          fail1
        ;;
      esac

      prompt_ynq "Do you want a $base_dim:* folder created for each member?" answer
      case $answer in
        y)
          create_each=t
        ;;
        q)
          out "Aborting."
          fail1
        ;;
      esac
    fi

    local folders= real_members=( ) member
    if [[ $create_other == t ]]; then
      folders+="_other "
      member+=( _other )
    fi
    if [[ $create_each == t ]]; then
      begin_for member in "${members[@]}"; doo
        local value
        get_sane_value "$folder"
        folders+="$value "
        real_members+=( "$member" )
      end_for
    fi

    local i folder target
    begin_for (( i = 0; i < ${#folders[*]}; i++ )); doo
      folder=${folders[$i]}
      member=${real_members[$i]}
      target=$seed_path/$base_dim:$folder
      mkdir $target || fail
      safe_link $seed_path/.dna $target/ || fail
      if [[ "$member" != "$folder" ]]; then
        echo "$member" >$target/.member || fail
      fi
    end_for

  end_function
  handle_return
}

dim_add_command() {
  begin_function
    local shared_dim_folder= seed_path trunk_seed_path
    setup_cell_path_vars $cell_path || fail
    find_seed_path $cell_path || fail
    trunk_seed_path=$seed_path

    dim_add_find_shared_dim

    local dims=${dims:-${dim:-}} dim
    if [[ ! "${dim:-}" ]]; then
      dim_add_choose_dim || fail
    fi

    begin_for dim in $dims; doo

      local base_dim=${dim%%-*}
      log_info "Adding dim $base_dim"

      local dim_path=$shared_dim_folder/$dim
      if [[ -d $dim_path ]]; then
        if [[ -e $trunk_seed_path/.dna/${base_dim}_ ]]; then
          log_fatal "Dim $base_dim has already been added to this cell"
          fail1
        fi
        safe_link $dim_path $trunk_seed_path/.dna/${base_dim}_ || fail
        dim_add_create_branches || fail
      else
        log_fatal "Dim not found: $dim in $shared_dim_folder"
        log_fatal "You can run this command without specifying dim to get a list of options"
        fail1
      fi

    end_for

    command_successful=t

  end_function

  if failed; then
    if [[ "${base_dim:-}" && -e $trunk_seed_path/.dna/${base_dim}_ ]]; then
      rm -rf $trunk_seed_path/.dna/${base_dim}_ 
    fi
  fi

  handle_return
}

