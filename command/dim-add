#!/usr/bin/env bash

dim_add_find_shared_dim() {
  local d=$seed_path
  while [[ ${#d} -gt 3 ]]; do
    if [[ -d $d/.shared/dim ]]; then
      shared_dim_folder=$d/.shared/dim
      break
    fi
    d=${d%/*}
  done
  return 0
}

dim_add_choose_dim() {
  begin_function
    if [[ "$shared_dim_folder" ]]; then
      echo "Choose a dim to add to this cell:" >&2
      echo "(to create a new one, you'll need to specify the dim parameter directly)" >&2
      local PS3="dim: " 
      select dims in \
        $(find $shared_dim_folder -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort)
        do break; done
      if [[ ! "$dims" ]]; then
        log_fatal "Invalid dim selected"
        fail1
      fi
    else
      log_fatal "Must specify a dim parameter containing the dim to add."
      fail1
    fi
  end_function
  handle_return
}

dim_add_create_branches_at_seed() {
  begin_function
    local branches=$(find1 $seed_path -name "*:*" | sort) || fail
    if [[ "$branches" ]]; then
      local branch branch_dim
      begin_for branch in $branches; doo
        branch_dim=${branch##*/}
        branch_dim=${branch_dim%%:*}
        if [[ $branch_dim == $dim ]]; then
          # dim is already added here
          break
        else
          seed_path=$branch dim_add_create_branches_at_seed || fail
        fi
      end_for
    else
      local i folder target
      begin_for (( i = 0; i < ${#folders[*]}; i++ )); doo
        folder=${folders[$i]}
        member=${real_members[$i]}
        target=$seed_path/$base_dim:$folder
        mkdir $target || fail
        safe_link $(realpath $seed_path/.dna) $target/ || fail
        if [[ "$member" != "$folder" ]]; then
          echo "$member" >$target/.member || fail
        fi
        added_something=t
      end_for
    fi
  end_function
  handle_return
}

dim_add_create_branches() {
  begin_function
    local create_other=t create_each=f members=( )
    if [[ -f $from_dim_path/members.arr ]]; then
      load_arr $from_dim_path/members.arr members || fail
      local answer

      prompt_ynq "Do you want a $base_dim:_other folder created?" answer
      case $answer in
        n)
          create_other=f
        ;;
        q)
          out "Aborting."
          fail1
        ;;
      esac

      prompt_ynq "Do you want a $base_dim:{member} folder created for each member?" answer
      case $answer in
        y)
          create_each=t
        ;;
        q)
          out "Aborting."
          fail1
        ;;
      esac
    fi

    local folders=() real_members=() member
    if [[ $create_other == t ]]; then
      folders+=( _other )
      real_members+=( _other )
    fi
    if [[ $create_each == t ]]; then
      begin_for member in "${members[@]}"; doo
        local value
        get_sane_value "$folder"
        folders+=( $value )
        real_members+=( "$member" )
      end_for
    fi
    if [[ $create_each == f && $create_other == f ]]; then
      warn "You have chosen not to have dim folders created automatically, which means you must create them manually in $seed_path folder."
    fi

    dim_add_create_branches_at_seed || fail

  end_function
  handle_return
}

dim_add_command() {
  begin_function
    local shared_dim_folder= seed_path type=${type:-trunk_dim}

    case $type in
      dim)
        type=trunk_dim
      ;;
      trunk_dim|prop|sub_dim)
        :
      ;;
      *)
        log_fatal "Invalid type $type. Must be one of: dim sub_dim prop"
        fail1
      ;;
    esac

    setup_cell_path_vars $cell_path || fail
    find_seed_path $cell_path || fail
    dim_add_find_shared_dim || fail

    local dims=${dims:-${dim:-}} dim
    if [[ ! "${dims:-}" ]]; then
      dim_add_choose_dim || fail
    fi

    begin_for dim in $dims; doo

      local base_dim=${dim%%-*}
      log_info "Adding $type $base_dim"

      local added_something=f \
        from_dim_path=$shared_dim_folder/$dim \
        type_path=$seed_path/.dna/$type
      local to_dim_path=$type_path/$base_dim

      if [[ ! -d $type_path ]]; then
        mkdir $type_path || fail
      fi

      if [[ ! -e $to_dim_path ]]; then
        if [[ -d $from_dim_path ]]; then
          safe_link $from_dim_path $to_dim_path || fail
          added_something=t
        else
          log_fatal "Dim not found: $dim in $shared_dim_folder"
          log_fatal "You can run this command without specifying dim to get a list of options"
          fail1
        fi
      fi

      if [[ $type == trunk_dim ]]; then
        dim_add_create_branches || fail
      fi

      if [[ $added_something == f ]]; then
        log_warn "Dim $base_dim already added, nothing to do."
      fi

    end_for

    command_successful=t

  end_function

  if failed; then
    if [[ "${base_dim:-}" && -L $to_dim_path ]]; then
      rm $to_dim_path
    fi
  fi

  handle_return
}

