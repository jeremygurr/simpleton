#!/usr/bin/env bash

dim_add_find_shared_dim() {
  local d=$seed_path 
  while [[ ${#d} -gt 3 ]]; do
    if [[ -d $d/.shared/dim ]]; then
      shared_dim_folder=$d/.shared/dim
      break
    fi
    d=${d%/*}
  done
  debug_return_vars=shared_dim_folder
  return 0
}

dim_add_choose_dim() {
  begin_function
    if [[ "$shared_dim_folder" ]]; then
      echo "Choose a dim to add to this cell:" >&2
      echo "(to create a new one, you'll need to specify the dim parameter directly)" >&2
      choose "dim: " dims \
        $(find $shared_dim_folder -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort)
      if [[ ! "$dims" ]]; then
        log_fatal "Invalid dim selected"
        fail1
      fi
    else
      log_fatal "Must specify a dim parameter containing the dim to add."
      fail1
    fi
  end_function
  local log_return_vars=dims
  handle_return
}

dim_add_create_branches_at_seed() {
  begin_function
    local branches=$(find1 $seed_path -name "*:*" | sort) || fail
    if [[ "$branches" ]]; then
      local branch branch_dim
      begin_for branch in $branches; doo
        branch_dim=${branch##*/}
        branch_dim=${branch_dim%%:*}
        if [[ $branch_dim == $dim ]]; then
          # dim is already added here
          break
        else
          seed_path=$branch dim_add_create_branches_at_seed || fail
        fi
      end_for
    else
      local i folder target
      begin_for (( i = 0; i < ${#folders[*]}; i++ )); doo
        folder=${folders[$i]}
        member=${real_members[$i]}
        target=$seed_path/$base_dim:$folder
        mkdir $target || fail
        safe_link $(realpath $seed_path/.dna) $target/ || fail
        if [[ "$member" != "$folder" ]]; then
          echo "$member" >$target/.member || fail
        fi
        added_something=t
      end_for
    fi
  end_function
  handle_return
}

dim_add_create_branches() {
  begin_function
    local create_other=t create_each=f members=( )
    if [[ -f $from_dim_path/members.arr ]]; then
      load_arr $from_dim_path/members.arr members || fail
    fi

    local folders=() real_members=() member

    if [[ $create_other == t ]]; then
      folders+=( _other )
      real_members+=( _other )
    fi

    if [[ $create_each == t ]]; then
      begin_for member in "${members[@]}"; doo
        local value
        get_sane_value "$folder"
        folders+=( $value )
        real_members+=( "$member" )
      end_for
    fi

    dim_add_create_branches_at_seed || fail

  end_function
  handle_return
}

dim_add_get_next_ord() {
  begin_function
    local d ord base largest_ordinal=0
    local existing=$(find1 $type_path -not -name ".*" | sort -g) || fail
    bases=
    begin_for d in $existing; doo
      d=${d##*/}
      split_ordinal d ord base
      bases+=" $base"
      if (( ord > largest_ordinal )); then
        largest_ordinal=$ord
      fi
    end_for
    next_ord=$((largest_ordinal+1))
  end_function
  local log_return_vars=next_ord
  handle_return
}

dim_add_command() {
  begin_function

    local shared_dim_folder= seed_path \
      type=${type:-trunk_dim} \
      create_other=${create_other:-f} \
      create_each=${create_each:-f} \

    case $type in
      dim)
        type=trunk_dim
      ;;
      trunk_dim|prop|sub_dim)
        :
      ;;
      t|d)
        type=trunk_dim
      ;;
      p)
        type=prop
      ;;
      s)
        type=sub_dim
      ;;
      *)
        log_fatal "Invalid type $type. Must be one of: dim sub_dim prop"
        fail1
      ;;
    esac

    setup_cell_path_vars $cell_path || fail
    find_seed_path $cell_path || fail
    dim_add_find_shared_dim || fail

    local dims=${dims:-${dim:-}} dim
    if [[ ! "${dims:-}" ]]; then
      dim_add_choose_dim || fail
    fi

    local next_ord= bases \
      type_path=$seed_path/.dna/${type}s
    if [[ ! -d $type_path ]]; then
      mkdir $type_path || fail
    fi

    dim_add_get_next_ord || fail

    begin_for dim in $dims; doo

      local base_dim=${dim%%-*}
      if [[ "$base_dim" == _* ]]; then
        base_dim=$dim
      fi
      log_info "Adding $type $base_dim"

      local added_something=f \
        from_dim_path=$shared_dim_folder/$dim \
      local to_dim_path=$type_path/$next_ord-$base_dim
      (( next_ord++ ))

      if [[ "$bases " != *" $dim "* ]]; then
        if [[ -d $from_dim_path ]]; then
          safe_link $from_dim_path $to_dim_path || fail
          added_something=t
        else
          log_fatal "Dim not found: $dim in $shared_dim_folder"
          log_fatal "You can run this command without specifying dim to get a list of options"
          fail1
        fi
      fi

      if [[ $type == trunk_dim ]] && \
         [[ $create_each == t || $create_other == t ]]; then
        dim_add_create_branches || fail
      fi

      if [[ $added_something == f ]]; then
        log_warn "Dim $base_dim already added, nothing to do."
      fi

    end_for

    command_successful=t

  end_function

  if failed; then
    if [[ "${base_dim:-}" && -L $to_dim_path ]]; then
      rm $to_dim_path
    fi
  fi

  handle_return
}

