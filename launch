#!/bin/bash

# launches a new docker container for simpleton

set -u

instance=${instance:-${1:-}}

err() { echo "$*" >&2; }

if [[ ! -f launch ]]; then
  err "This script must be run from within the same folder it exists in."
  exit 1
fi

name=${1:-${name:-simpleton$instance}}
as_root=${as_root:-f}
persist=${persist:-t}
SIMPLETON_BASE=${SIMPLETON_BASE:-$(realpath ..)}
SIMPLETON_HOME=${SIMPLETON_HOME:-$(realpath ~/.simpletonHome$instance)}
SIMPLETON_WORK=${SIMPLETON_WORK:-$(realpath ~/.simpletonWork$instance)}
build_dir=target

auto_update() {
  local module module_path
  for module_path in $(find .. -mindepth 1 -maxdepth 1 -type d -not -name '.*'); do
    module=${module_path##*/}
    if [[ -d $module_path/.git ]]; then
      echo "Checking for $module updates..."
      git -C $module_path pull || return 1
    fi
  done
}

if [[ "${auto_update:-t}" == t ]]; then
  auto_update
fi

ifnull() { 
  local input
  read input
  if [[ ! "$input" ]]; then 
    echo "$1"
  else 
    echo "$input"
  fi
}

if [[ ! -d $SIMPLETON_HOME ]]; then
  mkdir -p $SIMPLETON_HOME || exit 1
fi

cp -Rn home/ $SIMPLETON_HOME 

if docker ps --format "{{.Names}}" | grep simpleton >/dev/null; then
  err "Simpleton container is already running. Either stop the existing one first, or use the 'join' script to join the existing container."
  exit 1
fi

if [[ $as_root == t ]]; then
  uid=0
  user=root
else
  uid=$UID
  user=$USER
fi

if [[ $persist == t ]]; then
  if [[ ! -f $build_dir/launch-command-persist ]]; then
    err "build files missing. Did you run ./build-docker-image first?"
    exit 1
  fi

  source $build_dir/launch-command-persist || exit 1
else
  if [[ ! -f $build_dir/launch-command-fast ]]; then
    err "build files missing. Did you run ./build-docker-image first?"
    exit 1
  fi

  source $build_dir/launch-command-fast || exit 1
  source $build_dir/docker-copy-command || exit 1
fi

copy_workspace() {
  sleep 5
  echo -en "\r\nCopying workspace..." >&2
  { $docker_copy_command; } || { err -e "Failed to copy workspace.\r"; return 1; }
  echo -e "Done.\r" >&2
}

if [[ $persist == t ]]; then
  echo "Creating new container:"
  echo "$launch_command"
  eval "$launch_command"
else
  echo "Copying workspace..."
  copy_workspace & pid=$!
  echo "Creating new container:"
  echo "$launch_command"
  eval "$launch_command" || kill $pid
fi

