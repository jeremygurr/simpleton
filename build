#!/bin/bash

set -u
# Set this to true to more easily debug the docker build process
debug=${debug:-f}

# whether to do a clean build, wiping out previous home folder and work folder
clean=${clean:-f}

if [[ "${1:-}" == clean ]]; then
  clean=t
fi

err() { echo "$*" >&2; }

if [[ ! -f build ]]; then
  err "This script must be run from within the same folder it exists in."
  exit 1
fi

SIMPLETON_BASE=${SIMPLETON_BASE:-${PWD%/*}}
SIMPLETON_HOME=${SIMPLETON_HOME:-$HOME/.simpletonHome}
SIMPLETON_WORK=${SIMPLETON_WORK:-$HOME/.simpletonWork}

if [[ $clean == t ]]; then
  if [[ -d "$SIMPLETON_HOME" ]]; then
    echo "Cleaning $SIMPLETON_HOME"
    rm -rf $SIMPLETON_HOME 
  fi
  if [[ -d "$SIMPLETON_WORK" ]]; then
    echo "Cleaning $SIMPLETON_WORK"
    rm -rf $SIMPLETON_WORK 
  fi
fi

if [[ ! -d $SIMPLETON_HOME ]]; then
  mkdir $SIMPLETON_HOME || exit 1
fi

if [[ ! -d $SIMPLETON_WORK ]]; then
  mkdir $SIMPLETON_WORK || exit 1
fi

if [[ ! "${TIME_ZONE:-}" ]]; then
  err "The TIME_ZONE env var must be set. It should be a standard linux time zone path." 
  err "Different options can be found in this path in most linux docker images: /usr/share/zoneinfo"
  err "Examples:"
  err "  export TIME_ZONE=US/Arizona"
  err "  export TIME_ZONE=US/Eastern"
  err "  export TIME_ZONE=US/Central"
  exit 1
fi

if [[ "$PWD" =~ .*\ .* ]]; then
  err "You must not have a space in the name of any parent folder of this directory: $PWD"
  err "Please put your repos in a different place or rename the parent folder to not have spaces and try again."
  exit 1
fi

repo_folders="$(find .. -mindepth 1 -maxdepth 1 | sort)"

build_dir=target
mkdir -p $build_dir || exit 1
cp Dockerfile shell-start.sh repositories sudoers init passwd $build_dir/ || exit 1

uid=$UID
user=$USER
echo "$user:x:$uid:$uid:$user:/home:/bin/bash" >>$build_dir/passwd || exit 1

echo -n '
launch_command="
docker run -it --rm -u $uid --name $name -h $name \
  -v $SIMPLETON_BASE:/repo \
  -v $SIMPLETON_HOME:/home \
  -v $SIMPLETON_WORK:/work \
' | tee $build_dir/launch-command-fast >$build_dir/launch-command-persist || exit 1

echo 'docker_copy_command="' >$build_dir/docker-copy-command

repo_folders="$(find .. -mindepth 1 -maxdepth 1 | sort)"

names=
for repo_folder in $repo_folders; do

  if [[ -f "$repo_folder/before-docker-build" ]]; then
    source "$repo_folder/before-docker-build" || exit 1
  fi

  if [[ -f "$repo_folder/after-Dockerfile" ]]; then
    cat $repo_folder/after-Dockerfile >>$build_dir/Dockerfile || exit 1
  fi

  if [[ -f "$repo_folder/after-shell-start.sh" ]]; then
    cat $repo_folder/after-shell-start.sh >>$build_dir/shell-start.sh || exit 1
  fi

  if [[ -f "$repo_folder/docker-run-options" ]]; then
    cat $repo_folder/docker-run-options | tee -a $build_dir/launch-command-fast >>$build_dir/launch-command-persist || exit 1
  fi

  if [[ -d $repo_folder/seed ]]; then
    for seed in $(find $repo_folder/seed -mindepth 1 -maxdepth 1 -type d); do
      base_seed_name=${seed##*/}
      seed_name=$base_seed_name
      count=1
      while [[ $names =~ \ $seed_name\  ]]; do
        let count++
        seed_name=$base_seed_name$count
      done
      names+=" $seed_name "
      seed=$(readlink -f $seed)
      echo "  -v $seed:/seed/$seed_name \\" >>$build_dir/launch-command-persist || exit 1
      echo "docker cp $seed \$name:/seed/$seed_name" >>$build_dir/docker-copy-command || exit 1
    done
  fi

done

echo '  -e prompt_name=\"$name \" \
  -e USER=$user \
  -e NO_PROXY='${NO_PROXY:-}' \
  -e HTTPS_PROXY='${HTTPS_PROXY:-}' \
  -e HTTP_PROXY='${HTTP_PROXY:-}' \
  -e ADD_PATH='/repo/simpleton/bin' \
  -v $PWD/target/passwd:/etc/passwd \
  $name 
"' | tee -a $build_dir/launch-command-fast >>$build_dir/launch-command-persist || exit 1

echo '"' >>$build_dir/docker-copy-command

ALPINE_IMAGE=${ALPINE_IMAGE:-alpine:latest}
ALPINE_REPO=${ALPINE_REPO:-https://dl-cdn.alpinelinux.org/alpine/}

if [[ "$debug" == t ]]; then
  set -x
  DOCKER_BUILDKIT=0 docker build -f $build_dir/Dockerfile --rm=false -t simpleton \
    --build-arg TIME_ZONE=$TIME_ZONE \
    --build-arg ALPINE_IMAGE=$ALPINE_IMAGE \
    --build-arg ALPINE_REPO=$ALPINE_REPO \
    .
  set +x
else
  set -x
  docker build -f $build_dir/Dockerfile -t simpleton \
    --build-arg TIME_ZONE=$TIME_ZONE \
    --build-arg ALPINE_IMAGE=$ALPINE_IMAGE \
    --build-arg ALPINE_REPO=$ALPINE_REPO \
    .
  set +x
fi
