#!/bin/bash

set -u
source $SIMPLETON_REPO/lib/pre-bash "$0" "$@" || exit 1
set "${real_params[@]}"; shift

if [[ ! "${trace:-}" ]]; then
  case $1 in
    test)
      trace=2
      ;;
    *)
      trace=5
      ;;
  esac
fi

source $SIMPLETON_REPO/lib/post-bash || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1
source $SIMPLETON_REPO/lib/bash-debugger || exit 1

called_from=cli

handle_command() {

local command=${1:-help}; shift
local parameters=( "$@" )
trace $log_trace "Handling cube command $command"

begin_function_flat

  case $command in 
    new)
      require_valid_subjects=f load_subjects || fail
      begin_for subject in "${subjects[@]}"; doo
        fix_cube $subject || fail
      end_for
      ;;
    edit)
      require_valid_subjects=f load_subjects || fail
      begin_for subject in "${subjects[@]}"; doo
        dna_edit $subject || fail
      end_for
      ;;
    fix)
      require_valid_subjects=f load_subjects || fail
      begin_for subject in "${subjects[@]}"; doo
        fix_cube $subject ${extra:-} || fail
      end_for
      ;;
    upstream)
      handle_upstream_command "$@" || fail
      ;;
    low)
      handle_low_command "$@" || fail
      ;;
    test)
      tests=${tests:-all}
      require_valid_subjects=f load_subjects || fail
      local tests_passed=0 tests_found=0 tests_failed=0 \
            tests_skipped=0 testing_done=f
      begin_for subject in "${subjects[@]}"; doo
        run_test $subject || fail
        [[ $testing_done == t ]] && break
      end_for
      if [[ $tests_found == 0 ]]; then
        trace $log_info "No tests found"
      else
        if [[ $tests_passed -gt 0 ]]; then
          trace $log_info "$(plural $tests_passed test) passed"
        fi
        if [[ $tests_failed -gt 0 ]]; then
          err "$(plural $tests_failed test) failed"
        fi
      fi
      ;;
    *)
      if [[ $command != help && $command != ? ]]; then
        err "Unknown command: $command"
      fi
      show_cube_usage
      fail1
      ;;
  esac
end_function_flat
failed && err "Command $command failed"
handle_return
}

handle_upstream_command() {
local command=${1:-help}; shift 
local parameters=( "$@" )
begin_function_flat
  case $command in 
    add)
      if [[ ! "$to" ]]; then
        err "Must specify target cube using: to={target cube}"
        fail1
      fi
      if ! is_cube $to; then
        err "$to is not a cube"
        fail1
      fi
      load_subjects || fail
      if [[ ! -d $to/.dna/up ]]; then
        mkdir $to/.dna/up || fail
      fi
      begin_for subject in "${subjects[@]}"; doo
        if ! is_cube $subject; then
          err "$subject is not a cube"
          fail1
        fi
        add_upstream $subject || fail
      end_for
      ;;
    *)
      if [[ $command != help && $command != ? ]]; then
        err "Unknown command: $command"
      fi
      show_upstream_cube_usage
      return 1
      ;;
  esac
end_function_flat
handle_return
}

handle_low_command() {
local command=${1:-help}; shift 
local parameters=( "$@" )
case $command in 
  *)
    if [[ $command != help && $command != ? ]]; then
      err "Unknown command: $command"
    fi
    show_low_cube_usage
    return 1
    ;;
esac
}

load_subjects() {
subjects=()
local subject require_valid_subjects=${require_valid_subjects:-t}
for subject in "${parameters[@]}"; do
  subject=$(realpath "$subject")
  if [[ $require_valid_subjects == t && ! -d "$subject" ]]; then
    err "Subject does not exist or is not a folder: $subject"
    exit 1
  fi
  subjects+=( "$subject" )
done

if [[ ! "${subjects:-}" ]]; then
  subjects=( $PWD )
fi
}

show_cube_usage() {
warn "Usage: ${0##*/} {command} [{cubes}]"
warn "  commands:"
warn "    fix       fix broken cube (or create a cube from a folder)"
warn "    low       run a low level command"
warn "    test      run cube tests"
return 0
}

show_upstream_cube_usage() {
warn "Usage: ${0##*/} upstream {command} [{cubes}]"
warn "  commands:"
warn "    add       adds an upstream dependency to the given cell. Set to={cell target} and optionally as={upstream name}"
return 0
}

show_low_cube_usage() {
warn "Usage: ${0##*/} low {command} [{cubes}]"
warn "  commands:"
return 0
}

handle_command "$@"

