#!/bin/bash

set -u
source $SIMPLETON_REPO/lib/pre-bash "$0" "$@" || exit 1
set "${real_params[@]}"; shift

optional_var trace           5             # 0 means no tracing output, higher numbers increases verbosity of tracing

source $SIMPLETON_REPO/lib/post-aliases || exit 1
if [[ ${omni_log:-t} == t ]]; then
  source $SIMPLETON_REPO/lib/omni-log || exit 1
fi
source $SIMPLETON_REPO/lib/post-bash || exit 1
source $SIMPLETON_REPO/lib/bash-debugger || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1

handle_command() {

local subject_type=$0
subject_type=${subject_type##*/}
local commands=( "$@" )
local stems=${stems:-${stem:-.}}

begin_function_flat

  local stem
  begin_for stem in $stems; doo

    stem=$(realpath $stem) || fail

    local command validated_stem=f
    begin_for command in $commands; doo
      case $command in
        help|?|--help)
          show_usage
          fail1
        ;;
        clean)
          get_bottom_stem $stem || fail
          bottom_stem=${bottom_stem%/}
          if [[ ! "$bottom_stem" ]]; then
            err "Not a valid stem cell: $stem"
            fail1
          fi
          trace $log_info "Cleaning $bottom_stem..." 
          local clean_file=$bottom_stem/.dna/op/clean.bash
          if [[ -f $clean_file ]]; then
            source $clean_file || fail
            stem=$bottom_stem
            clean || fail
          fi
          if [[ -e "$bottom_stem/.cyto" ]]; then
            rm -rf $bottom_stem/.cyto || fail
            trace $log_info "Cleaned."
          else
            trace $log_info "Already clean."
          fi
        ;;
        *)

          get_bottom_stem $stem || fail
          stem=${bottom_stem%/}
          if [[ $validated_stem == f ]]; then

            if [[ ! -d $stem/.dna ]]; then
              err "$stem is not a stem"
              show_usage
              fail1
            fi

            stem_context_load || fail 

            validated_stem=t

          fi

          execute_command $stem $command || fail

        ;;
      esac

    end_for

  end_for

end_function_flat
handle_return
}

show_usage() {
warn "Usage: ${0##*/} {command(s)}"
local command
if [[ -d "$stem/.cyto" ]]; then
  warn "commands:"
  for command in $(find1 $stem/.cyto/command | sort); do
    if [[ -f $command ]]; then
      source $command || fail
    elif [[ -d $command ]]; then
      local first_file=$(find1 $command -type f | sort -g | head -n 1)
      if [[ "$first_file" ]]; then
        source $first_file || fail
      fi
    fi
    local command_name=${command##*/}
    local command_description=describe_${command_name}
    command_description=${!command_description:-}
    if [[ "$command_description" ]]; then
      warn "  $command_name $COL20$command_description"
    else
      warn "  $command_name ${COL20}Please add a description to this command in $command"
    fi
  done
else
  warn "  either run this command inside of a stem cell folder, or specify"
  warn "  the stem variable with the path to a stem cell. "
  warn "  example: cell stem=/some/stem update"
fi
return 0
}

handle_command "$@"

