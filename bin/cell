#!/bin/bash

set -u
source $SIMPLETON_REPO/lib/pre-bash "$0" "$@" || exit 1
set "${real_params[@]}"; shift

optional_var trace           1             # 0 means no tracing output, higher numbers increases verbosity of tracing

source $SIMPLETON_REPO/lib/post-aliases || exit 1
source $SIMPLETON_REPO/lib/post-bash || exit 1
if [[ ${omni_log:-t} == t ]]; then
  source $SIMPLETON_REPO/lib/omni-log || exit 1
fi
source $SIMPLETON_REPO/lib/bash-debugger || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1

handle_command() {
local subject_type=$0
subject_type=${subject_type##*/}
local commands=( "$@" )
local stems=${stems:-${stem:-.}}

begin_function_flat

  local stem
  begin_for stem in $stems; doo

    stem=$(realpath $stem) || fail

    local command validated_stem=f i next
    begin_for ((i=0; i<${#commands[*]}; i++)); doo
      command=${commands[$i]}
      case $command in
        help|?|--help)
          handle_help_command "${commands[@]:$((i+1))}"
          fail1
        ;;
        clean)
          get_bottom_stem $stem || fail
          if [[ ! "$bottom_stem" ]]; then
            err "Not a valid stem cell: $stem"
            fail1
          fi
          trace $log_info "Cleaning $bottom_stem..." 
          local clean_file=$bottom_stem/.dna/op/clean.bash
          if [[ -f $clean_file ]]; then
            source $clean_file || fail
            stem=$bottom_stem
            clean || fail
          fi
          if [[ -e "$bottom_stem/.cyto" ]]; then
            rm -rf $bottom_stem/.cyto || fail
            trace $log_info "Cleaned."
          else
            trace $log_info "Already clean."
          fi
        ;;
        *)
          next=
          if [[ $((i+1)) -lt ${#commands[*]} ]]; then
            next=${commands[$((i+1))]}
          fi
          if [[ $next == --help || $next == -h || $next == help ]]; then
            show_help_for_command $command
            fail1
          else
            get_bottom_stem $stem || fail
            stem=$bottom_stem
            execute_command $stem $command || fail
          fi
        ;;
      esac

    end_for

  end_for

end_function_flat
handle_return
}

handle_help_command() {
local commands=( "$@" ) command
begin_function_flat
  begin_for command in "${commands[@]}"; doo
    show_help_for_command $command || fail
  end_for
end_function_flat
handle_return
}

show_help_for_command() {
local command=$1
begin_function_flat
  get_bottom_stem $stem || fail
  if [[ "$bottom_stem" ]]; then
    local stem=$bottom_stem
    stem_context_load || fail
    out "command: $command"
    if [[ -f $command_path/$command.info ]]; then
      source $command_path/$command.info || fail
      out "  $command_description"
      local name description default default_string i
      out "parameters:"
      begin_for ((i=0; i<${#parameter_names[*]}; i++)); doo
        parameter="${parameter_names[$i]}"
        description="${parameter_descriptions[$i]}"
        default="${parameter_defaults[$i]}"
        default_string=
        [[ "$default" ]] && default_string=" default: $default"
        out "  $parameter: $description$default_string"
      end_for
    fi
  fi
end_function_flat
handle_return
}

show_usage() {
warn "Usage: ${0##*/} {command(s)}"
local command
if [[ -d "$stem/.cyto" ]]; then
  warn "commands:"
  for command in $(find1 $stem/.cyto/command | sort); do
    if [[ -f $command ]]; then
      source $command || fail
    elif [[ -d $command ]]; then
      local first_file=$(find1 $command -type f | sort -g | head -n 1)
      if [[ "$first_file" ]]; then
        source $first_file || fail
      fi
    fi
    local command_name=${command##*/}
    local command_description=describe_${command_name}
    command_description=${!command_description:-}
    if [[ "$command_description" ]]; then
      warn "  $command_name $COL20$command_description"
    else
      warn "  $command_name ${COL20}Please add a description to this command in $command"
    fi
  done
else
  warn "  either run this command inside of a stem cell folder, or specify"
  warn "  the stem variable with the path to a stem cell. "
  warn "  example: cell stem=/some/stem update"
fi
return 0
}

handle_command "$@"

