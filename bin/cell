#!/usr/bin/env bash

source $SIMPLETON_LIB/command-prep "$0" "$@" || exit 1

source $SIMPLETON_LIB/simple-block-aliases || exit 1
source $SIMPLETON_LIB/full-block-aliases || exit 1
source $SIMPLETON_LIB/bash-debugger || exit 1
source $SIMPLETON_LIB/bash-lib || exit 1
source $SIMPLETON_LIB/omni-log || exit 1
source $SIMPLETON_LIB/omni-navigator || exit 1
source $SIMPLETON_LIB/cell-lib || exit 1

parameters_to_env "$@"
if [[ "${real_params:-}" ]]; then
  set "${real_params[@]}"; shift
fi
cell_lib_init || exit 1

handle_flag() {
  local flags=${1#-} flag

  while [[ "$flags" ]]; do
    flag=${flags:0:1}
    flags=${flags#?}
    case $flag in
      d)
        log=debug
        ;;
      i)
        show_debug_id=a
        ;;
      r)
        recursive_command=t
        ;;
      v)
        log=verbose
        ;;
      *)
        log_fatal "Unknown flag: $flag"
        out "Flags are shortcuts for longer settings, and only the following are defined:"
        out "  Flag   Equivalent setting"
        out "  ------ -----------------------------"
        out "  -d     log=debug"
        out "  -i     log=id2"
        out "  -r     recursive_command=t"
        out "  -v     log=verbose"
        fail_later; break
        ;;
    esac
  done
  handle_return
}

show_usage() {
  begin_function
    out "Usage: ${0##*/} {any combinations of commands and cell paths}"

    local d
    d="The given commands are executed on each of the given cells in order. "
    d+="If no cell path is specified, the cell path is taken from the current folder. "
    d+="If help or -h or --help or ? is given as any of the parameters, "
    d+="documentation for the given cells or commands is printed instead of executing commands. "
    d+="$NL$NL"
    d+="Use \`cell . help\` to see help specific to the current cell (you can replace . with any cell name also)."
    echo "$d" | fold -s -w $((COLUMNS-1)) | indent

    out "${NL}Possible Commands:"
    local command_info command_name
    begin_for command_info in $(find1 $path_to_commands -name '*.info' | sort -g); doo
      command_name=${command_info%.info}
      command_name=${command_name##*/}
      source $command_info || fail
      if [[ "$command_description" ]]; then
        local short_desc=$command_description
        trim_ws short_desc
        short_desc=${short_desc%%$NL*}
        out "  $command_name $COL20$short_desc"
      else
        out "  $command_name ${COL20}Please add a description to this command in $cell_command"
      fi
    end_for
  end_function
  handle_return
}

scan_commands() {
  begin_function
    local parameter leftovers=() leftover_command
    for parameter in ${parameters[*]}; do
      case $parameter in
        help|--help|-h|\?)
          (( help_depth++ )) 
        ;;
        \?\?)
          (( help_depth += 2 )) 
        ;;
        *)
          leftover_command=
          if [[ "${leftovers:-}" ]]; then
            leftover_command=${leftovers[*]}
            leftover_command=${leftover_command// /-}-$parameter
          fi

          if [[ $parameter != */* && -f "$path_to_commands/$parameter.info" ]]; then
            commands+=( $parameter )
          elif [[ $parameter != */* && -f "$path_to_commands/$leftover_command.info" ]]; then
            commands+=( $leftover_command )
            leftovers=()
          elif [[ -e $parameter/.dna ]]; then
            cells+=( $parameter )
          elif [[ $parameter == -* ]]; then
            handle_flag $parameter || { fail_later; break 2; }
          else
            leftovers+=( $parameter )
          fi
        ;;
      esac
    done
    local leftover
    for leftover in "${leftovers[@]}"; do
      if (( help_depth > 0 )); then
        local subs=( $path_to_commands/$leftovers-*.info )
        if [[ "$subs" != *\** ]]; then
          out "Choose a subcommand of $leftover:$NL"
          local sub
          for sub in ${subs[*]}; do
            local command=${sub##*/}
            command=${command%.info}
            commands+=( $command )
          done
          continue
        fi
      fi
      if [[ -d "$leftover" ]]; then
        local bottom_cell=
        leftover=$(unrealpath $leftover)
        get_bottom_cell $leftover
        if [[ "$bottom_cell" ]]; then
          cells+=( $bottom_cell )
          continue
        else
          log_fatal "Not a valid cell: $leftover"
        fi
      else
        log_fatal "Unidentified command: $leftover"
      fi
      show_usage 
      fail_later1; break 2
    done
  end_function
  local log_return_vars='cells commands'
  handle_return
}

show_help_for_command() {
  local command=$1
  begin_function
    [[ $first_command == f ]] && out ''
    out "Command: ${command//-/ }"
    if [[ -f $path_to_commands/$command.info ]]; then
      source $path_to_commands/$command.info || fail
      indent=2 out_wrap "$command_description"
      local name description default default_string choices_string i choices
      if [[ "${parameter_names:-}" ]]; then
        out "Parameters:"
        begin_for ((i=0; i<${#parameter_names[*]}; i++)); doo
          parameter="${parameter_names[$i]}"
          description="${parameter_descriptions[$i]}"
          choices="${parameter_choices[$i]}"
          trim_ws description
          default="${parameter_defaults[$i]}"
          default_string=
          choices_string=
          [[ "$choices" ]] && choices_string="$NL    choices: $choices"
          [[ "$default" ]] && default_string="$NL    default: $default"
          out "  $parameter: $description$choices_string$default_string"
        end_for
      fi
    fi
  end_function
  handle_return
}

clean_cell() {
  local cell_path=$1
  local clean_depth=${clean_depth:-1}

  begin_function

    (( clean_depth-- ))
    if (( clean_depth > 0 )) && [[ -d $cell_path/.cyto/up ]]; then
      local upstreams=$(find1 $cell_path/.cyto/up -type d | sort -g)
      local up
      begin_for up in $upstreams; doo
        local up_cell=$up/chosen
        if [[ -d $up_cell ]]; then
          up_cell=$(readlink $up_cell)
          clean_cell $up_cell || fail
        else
          local choices=$(find1 $up/choices -type d | sort -g)
          local choice
          begin_for choice in $choices; doo
            clean_cell $choice || fail
          end_for
        fi
      end_for
    fi

    load_branch_info $cell_path || fail
    log_verbose "Cleaning $short_cell..." 

    local clean_file=$cell_path/.dna/clean_op.fun
    if [[ -f $clean_file ]]; then
      local make_or_load=load
      make_or_load_dna_item $clean_file || fail
      clean_op || fail
    fi

    local x
    case $kind in
      all)
        begin_for x in $cell_path/!(.*) $cell_path/.cyto; doo
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
      ;;
      context)
        if [[ -d $cell_path/.cyto ]]; then
          local context_files=$(find1 $cell_path/.cyto -name "context*") || fail
          if [[ "$context_files" ]]; then
            rm $cell_path/.cyto/context* || fail
          fi
        fi
      ;;
      cyto)
        if [[ -e $cell_path/.cyto ]]; then
          rm -rf $cell_path/.cyto || fail
        fi
      ;;
      data)
        begin_for x in $(find1 $cell_path -not -name '.*' -not -name '*:*'); doo
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
        if [[ -f $cell_path/.cyto/status/up-to-date ]]; then
          rm $cell_path/.cyto/status/up-to-date
        fi
      ;;
      branches)
        begin_for x in $(find1 $cell_path -type d -not -name '.*' -name '*:*'); doo
          if [[ "$x" != *:* ]]; then
            continue
          fi
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
        if [[ -f $cell_path/.cyto/status/up-to-date ]]; then
          rm $cell_path/.cyto/status/up-to-date
        fi
      ;;
      *)
        log_fatal "Invalid clean kind ($kind). Must be one of: cyto, data, all"
        fail1
      ;;
    esac

    local inner_path=$cell_path/.cyto/inner
    if [[ $execute_inner != n && -d $inner_path ]]; then
      local inner
      local inners=$(find1 $inner_path -type d -not -name '.*') || fail
      begin_for inner in $inners; doo
        clean_cell $(realpath $inner) || fail
      end_for
    fi
  end_function
  handle_return
}

clean_folder() {
  local folder=$1
  begin_function
    if [[ -e "$folder/.dna" ]]; then
      clean_cell $folder || fail
      begin_for folder in $(find1 $folder -type d -not -name '.*' -name '*:*'); doo
        clean_folder $folder || fail
      end_for
    else
      local folders=$(find1 $folder -type d -not -name '.*') || fail
      begin_for folder in $folders; doo
        clean_folder $folder || fail
      end_for
    fi
  end_function
  handle_return
}

handle_command() {
  local cell_command=$1

  begin_function

      case $cell_command in
        shell)
          export prompt_name='cell shell'
          bash --init-file <(
            cat \
            /etc/profile \
            $SIMPLETON_LIB/bash-lib \
            $SIMPLETON_LIB/omni-log \
            $SIMPLETON_LIB/omni-navigator \
            $SIMPLETON_LIB/bash-debugger \
            $SIMPLETON_LIB/cell-lib \
            $SIMPLETON_LIB/cell-shell-prep \
            )
        ;;
        clean|clean0|clean2)
          get_bottom_cell $cell_path || fail
          if [[ ! "$bottom_cell" ]]; then
            bottom_cell=$cell_path
          fi
          : ${clean_depth:=1} ${kind:=all}
          if [[ $cell_command == clean2 ]]; then
            kind=data
          elif [[ $cell_command == clean0 ]]; then
            kind=context
          fi
          clean_folder $bottom_cell || fail
        ;;
        *)
          get_bottom_cell $cell_path || fail
          if [[ "$bottom_cell" ]]; then
            cell_path=$bottom_cell
          fi

          if [[ ! -d ${job_id_log%/*} ]]; then
            mkdir -p ${job_id_log%/*} || fail
          fi

          local needs_update=${needs_update:-} \
            command_to_log="${original_cmd#* }" \
            top_level_command=t \
            saved_command=$cell_command

          local command_successful=f trunk_cell=
          execute_command $cell_path $cell_command || fail
          if [[ $command_successful == f ]]; then
            log_error "Command failed: $cell_command"
            fail1
          fi
        ;;
      esac

  end_function
  handle_return

}

show_cell_help() {
  local cell_path=$1
  begin_function

    command_requires_resolved_dims=f \
    trunk_changed=f \
    command_allows_logs=f \
      switch_context $cell_path || fail
    indent=0

    if [[ $multi_cell == t ]]; then
      out "$hbar_equals"
    fi

    out_wrap "Cell: $short_cell"
    (( indent += 2 ))
    if [[ "${cell_description:-}" ]]; then
      out_wrap "$cell_description"
    else
      out_wrap "No description for this cell. Set cell_description variable in context file."
    fi

    local required=()

    if [[ "${trunk_dims:-}" ]]; then
      out_wrap "${NL}Dimensions: (add {dim}=? to command to see details, or cell . ?? to show all details)"
      dim_type=trunk_dims \
      show_dimensions ${trunk_dims[*]} || fail
    fi

    if [[ "${sub_dims:-}" || "${data_props:-}" || "${control_props:-}" ]]; then
      out_wrap "${NL}Other parameters:"
      if [[ "${sub_dims:-}" ]]; then
        dim_type=sub_dims \
        show_dimensions ${sub_dims[*]} || fail
      fi
      if [[ "${control_props:-}" ]]; then
        dim_type=control_props \
        show_dimensions ${control_props[*]} || fail
      fi
      if [[ "${data_props:-}" ]]; then
        dim_type=data_props \
        show_dimensions ${data_props[*]} || fail
      fi
    fi

    if [[ "${required:-}" ]]; then
      out_wrap "${NL}Required parameters: ${required[*]}"
    fi

    if [[ "${trunk_dims:-}" ]]; then
      out_wrap "${NL}Branch dimensions:"
      local i pretty_form= member dim
      #begin_for (( i = 0; i < ${#branch_dims[*]}; i++ )); doo
      #  dim=${branch_dims[$i]}
      #  eval "member=\${branch_members[$i]}"
      #  local pretty_function_name=trunk_dims_${dim}_pretty
      #  if function_exists $pretty_function_name; then
      #    eval "$pretty_function_name member" || fail
      #    pretty_form=" ($member)"
      #  else
      #    pretty_form=
      #  fi
      #  out "  $dim=${branch_members[$i]}$pretty_form"
      #end_for
      (( indent += 2 ))
      begin_for (( i = 0; i < ${#trunk_dims[*]}; i++ )); doo
        dim_var=${trunk_dims[$i]}
        local -n dim=d_$dim_var
        local pretty_function_name=trunk_dims_${dim_var}_pretty
        if function_exists $pretty_function_name; then
          eval "$pretty_function_name $dim_var" || fail
          pretty_form=" ($value)"
        else
          pretty_form=
        fi
        local value=${dim:-}
        if [[ "${value:-}" ]]; then
          if [[ "$value" == $empty_member ]]; then
            value='(empty)'
          fi
          out_wrap "$dim_var=$value$pretty_form"
        fi
      end_for
    fi

  end_function
  handle_return
}

handle_cell() {
  local cell_path=$1

  begin_function

    local omni_log_job_id job_id_log=${home_job_path:-$HOME/.simpleton/job-log}

    cell_path=$(unrealpath $cell_path) || {
      log_fatal "Failed to resolve path for $cell_path"
      fail1
      }

    local next cell_command
    if [[ "${parameter_questions:-}" ]]; then

      command_requires_resolved_dims=f \
      trunk_changed=f \
      command_allows_logs=f \
        switch_context $cell_path || fail

      if [[ -e $path_to_commands/all.info ]]; then
        source $path_to_commands/all.info || fail
      fi
      for cell_command in ${commands[*]}; do
        command_path=$path_to_commands/$cell_command
        if [[ -e $command_path.info ]]; then
          source $command_path.info || fail
        fi
      done

      local p
      for p in ${parameter_questions[*]}; do
        show_parameter_help $p  || fail
      done
    elif (( ${#commands[*]} == 0 )); then
      show_cell_help $cell_path || fail
    else
      begin_for cell_command in ${commands[*]}; doo
        if (( help_depth > 0 )); then
          show_help_for_command $cell_command || fail
        else
          handle_command $cell_command || fail
        fi
        first_command=f
      end_for
    fi

  end_function
  handle_return
}

top_level() {
  local parameters=( "$@" ) \

  begin_function

    local cell_path \
      path_to_commands=$SIMPLETON_REPO/command \
      first_command=t \
      multi_cell=f \
      multi_commands=f \
      commands=() \
      autorepair_level=${autorepair_level:-${repair:-1}} \

    if [[ "${parameter_questions:-}" ]]; then
      : ${help_depth:=2}
    else
      : ${help_depth:=0}
    fi

    if [[ "${cells:-}" ]]; then
      cells=( $cells )
    elif [[ "${cell:-}" ]]; then
      cells=( $cell )
    fi

    scan_commands || fail

    command="$original_cmd" omni_log_init || fail

    if (( ${#commands[*]} > 1 )); then
      multi_commands=t
    fi

    if [[ ! "${cells:-}" && ! "${commands:-}" ]]; then
      show_usage
      succeed
    fi

    if [[ ! "${cells:-}" ]]; then
      cells=( . )
    fi

    if (( ${#cells[*]} > 1 )); then
      multi_cell=t
    fi

    begin_for cell_path in ${cells[*]}; doo
      handle_cell $cell_path || fail
    end_for

  end_function

  if [[ "${zombie_lap_total:-}" ]]; then
    out "${NL}Performance counters:"
    zombie_lap_summary
  fi

  if [[ $trace_time == t ]]; then
    trace_time_summarize
  fi
  handle_return
}

debugger_init || exit 1
top_level "${real_params[@]}"

