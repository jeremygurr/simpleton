#!/bin/bash

set -u -o pipefail
source $SIMPLETON_REPO/lib/pre-bash "$0" "$@" || exit 1
set "${real_params[@]}"; shift

optional_var trace           1             # 0 means no tracing output, higher numbers increases verbosity of tracing

source $SIMPLETON_REPO/lib/post-bash || exit 1
source $SIMPLETON_REPO/lib/omni-log || exit 1
source $SIMPLETON_REPO/lib/bash-debugger || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1

handle_command() {
local subject_type=$0
subject_type=${subject_type##*/}
local commands=( "$@" )
local cells=${cells:-${cell:-.}}
local multi_cell=f
[[ "$cells" == *\ * ]] && multi_cell=t

begin_function_flat

  local cell first_cell=t
  begin_for cell in $cells; doo

    cell=$(unrealpath $cell) || fail

    local command i next
    begin_for ((i=0; i<${#commands[*]}; i++)); doo

      command=${commands[$i]}
      case $command in
        help|?|--help)
          handle_help_command "${commands[@]:$((i+1))}"
          succeed
        ;;
        clean)
          get_bottom_cell $cell || fail
          if [[ ! "$bottom_cell" ]]; then
            fatal "Not a valid cell: $cell"
            fail1
          fi
          local cell_path=$bottom_cell
          info "Cleaning $cell_path..." 
          local clean_file=$cell_path/.dna/op/clean.bash
          if [[ -f $clean_file ]]; then
            source $clean_file || fail
            clean || fail
          else
            local dir
            begin_for dir in out build .dim; doo
              if [[ -d $cell_path/$dir ]]; then
                rm -rf $cell_path/$dir &>/dev/null
              fi
            end_for
          fi
          if [[ -e "$cell_path/.cyto" ]]; then
            rm -rf $cell_path/.cyto || fail
            info "Cleaned."
          else
            info "Already clean."
          fi
        ;;
        *)
          next=
          if [[ $((i+1)) -lt ${#commands[*]} ]]; then
            next=${commands[$((i+1))]}
          fi
          if [[ $next == --help || $next == -h || $next == help ]]; then
            show_help_for_command $command
            fail1
          else
            get_bottom_cell $cell || fail
            cell=$bottom_cell
            execute_command $cell $command || fail
          fi
        ;;
      esac

      first_cell=f

    end_for

  end_for

end_function_flat
handle_return
}

handle_help_command() {
local commands=( "$@" ) command first_command=t
begin_function_flat
  if [[ "${commands:-}" ]]; then
    begin_for command in "${commands[@]}"; doo
      show_help_for_command $command || fail
      first_command=f
    end_for
  else
    show_cell_help
  fi
end_function_flat
handle_return
}

show_cell_help() {
begin_function_flat

  get_bottom_cell $cell || {
    fatal "No cell found here: $cell"
    fail1
    }
  cell=$bottom_cell
  cell_context_load || fail
  if [[ $multi_cell == t ]]; then
    out "===================================================================================================="
    out "Cell: $short_cell"
  fi

  if [[ "${cell_description:-}" ]]; then
    out "Description: $cell_description"
  else
    out "No description for this cell. Set cell_description variable in context file."
  fi

  if [[ "${leaf_dims[*]:-}" ]]; then
    local dim description values required 
    out "Dimensions:"
    begin_for dim in ${leaf_dims[*]}; doo
      eval "description=\$${dim}_description" || fail
      out "  $dim: $description"
      if type -t ${dim}_member_expand >/dev/null; then
        values=
        required=f
        eval "value='' ${dim}_member_expand" &>/dev/null || required=t
        if [[ "$values" ]]; then
          if [[ "$values" == $empty_member ]]; then
            out "    default: (empty)"
          else
            out "    default: ${values[*]}"
          fi
        elif [[ $required == f ]]; then
          out "    optional"
        fi
        if [[ -v ${dim}_examples ]]; then
          eval "local examples=( \"\${${dim}_examples[@]}\" )"
          local example_count=${#examples[*]} i index_string=
          for ((i=0; i<example_count; i++)); do
            if [[ example_count -gt 1 ]]; then
              index_string=" #$((i+1))"
            fi
            out "    example$index_string: ${examples[$i]}"
          done
        fi
      fi
    end_for
  fi

end_function_flat
handle_return
}

show_help_for_command() {
local command=$1
begin_function_flat
  get_bottom_cell $cell || fail
  if [[ "$bottom_cell" ]]; then
    local cell=$bottom_cell
    cell_context_load || fail
    [[ $first_command == f ]] && out ''
    out "command: $command"
    if [[ -f $command_path/$command.info ]]; then
      source $command_path/$command.info || fail
      out "  $command_description"
      local name description default default_string i
      if [[ "${parameter_names:-}" ]]; then
        out "parameters:"
        begin_for ((i=0; i<${#parameter_names[*]}; i++)); doo
          parameter="${parameter_names[$i]}"
          description="${parameter_descriptions[$i]}"
          default="${parameter_defaults[$i]}"
          default_string=
          [[ "$default" ]] && default_string=" default: $default"
          out "  $parameter: $description$default_string"
        end_for
      fi
    fi
  fi
end_function_flat
handle_return
}

show_usage() {
warn "Usage: ${0##*/} {command(s)}"
local command
if [[ -d "$cell/.cyto" ]]; then
  warn "commands:"
  for command in $(find1 $cell/.cyto/command | sort); do
    if [[ -f $command ]]; then
      source $command || fail
    elif [[ -d $command ]]; then
      local first_file=$(find1 $command -type f | sort -g | head -n 1)
      if [[ "$first_file" ]]; then
        source $first_file || fail
      fi
    fi
    local command_name=${command##*/}
    local command_description=describe_${command_name}
    command_description=${!command_description:-}
    if [[ "$command_description" ]]; then
      warn "  $command_name $COL20$command_description"
    else
      warn "  $command_name ${COL20}Please add a description to this command in $command"
    fi
  done
else
  warn "  either run this command inside of a cell folder, or specify"
  warn "  the cell variable with the path to a cell. "
  warn "  example: cell cell=/some/cell update"
fi
return 0
}

handle_command "$@"

