#!/usr/bin/env bash

source $SIMPLETON_LIB/command-prep "$0" "$@" || exit 1

source $SIMPLETON_LIB/bash-lifted || exit 1
source $SIMPLETON_LIB/simple-block-aliases || exit 1
source $SIMPLETON_LIB/full-block-aliases || exit 1
source $SIMPLETON_LIB/bash-debugger || exit 1
source $SIMPLETON_LIB/bash-lib || exit 1
source $SIMPLETON_LIB/omni-log || exit 1
source $SIMPLETON_LIB/omni-navigator || exit 1
source $SIMPLETON_LIB/cell-lib || exit 1

parameters_to_env "$@"
if [[ "${real_params:-}" ]]; then
  set -- "${real_params[@]}"; shift
fi
autorepair_level=${autorepair_level:-${repair:-1}}
bash_lifted_init || exit 1
cell_lib_init || exit 1

handle_flag() {
  begin_function
    local flags=${1#-} flag

    begin_while [[ "$flags" ]]; doo
      flag=${flags:0:1}
      flags=${flags#?}
      case $flag in
        a)
          trace_var_always=t
          ;;
        d)
          log=debug
          ;;
        i)
          show_debug_id=a
          ;;
        r)
          recursive_command=t
          ;;
        v)
          log=verbose
          ;;
        *)
          log_fatal "Unknown flag: $flag"
          out "Flags are shortcuts for longer settings, and only the following are defined:"
          out "  Flag   Equivalent setting"
          out "  ------ -----------------------------"
          out "  -a     trace_var_always=t"
          out "  -d     log=debug"
          out "  -i     log=id2"
          out "  -r     recursive_command=t"
          out "  -v     log=verbose"
          fail1
          ;;
      esac
    end_while
  end_function
  handle_return
}

show_usage() {
  begin_function
    out "Usage: ${0##*/} ({cells..} {commands..}).."

    local d=
    d+="Parameters are cells followed by commands to be run on those cells. "
    d+="Any number of cell/command combinations can be given, which will be executed sequentially. "
    d+="If two cells are given in a row with no command in between, the commands following the last "
    d+="cell will be applied to all of the cells preceeding them. "
    d+="key=value parameters may be put anywhere in the parameter list and will apply to all commands. "
    d+="This also applies to flag shortcuts. "
    d+="If no cell path is specified, the cell path is taken from the current folder. "
    d+="If help or -h or --help or ? is given as any of the parameters, "
    d+="documentation for the given cells or commands is printed instead of executing commands. "
    d+="key=? form can be used to get documentation about a specific variable/key/dimension. "
    d+="$NL$NL"
    d+="Use \`cell . help\` to see help specific to the current cell (you can replace . with any cell name also)."
    echo "$d" | fold -s -w $((COLUMNS-2)) | indent

    out "${NL}Possible Commands:"
    local command_info command_name
    begin_for command_info in $(find1 $path_to_commands -name '*.info' -not -name 'all.info' | sort -g); doo
      command_name=${command_info%.info}
      command_name=${command_name##*/}
      source $command_info || fail
      if [[ "$command_description" ]]; then
        local short_desc=$command_description
        trim_ws short_desc
        short_desc=${short_desc%%$NL*}
        out "  $command_name $COL20$short_desc"
      else
        out "  $command_name ${COL20}Please add a description to this command in $cell_command"
      fi
    end_for

  end_function
  handle_return
}

get_help_depth_and_flags() {
  begin_function
    if [[ "${parameter_questions:-}" ]]; then
      : ${help_depth:=2}
    else
      : ${help_depth:=0}
    fi
    begin_for parameter in ${parameters[*]}; doo
      case $parameter in
        help|--help|-h|\?)
          (( help_depth++ )) 
        ;;
        -*)
          handle_flag $parameter || fail
        ;;
        \?\?)
          (( help_depth += 2 )) 
        ;;
      esac
    end_for
  end_function
  debug_return_vars=help_depth
  handle_return
}

get_cells() {
  begin_function
    for (( ; current_parameter_index < ${#parameters[*]}; current_parameter_index++ )); do
      local parameter=${parameters[$current_parameter_index]}
      case $parameter in
        help|-*|\?|\?\?)
          :
        ;;
        *)
          if [[ ! -d $parameter ]]; then
            # is a command
            succeed
          else
            cells+=( $parameter )
          fi
        ;;
      esac
    done
  end_function
  handle_return
}

get_commands() {
  begin_function
    for (( ; current_parameter_index < ${#parameters[*]}; current_parameter_index++ )); do
      local parameter=${parameters[$current_parameter_index]}
      case $parameter in
        help|-*|\?|\?\?)
          :
        ;;
        *)
          leftover_command=
          if [[ "${leftovers:-}" ]]; then
            leftover_command=${leftovers[*]}
            leftover_command=${leftover_command// /-}-$parameter
          fi

          if [[ -f "$path_to_commands/$parameter.info" ]]; then
            commands+=( $parameter )
          elif [[ -f "$path_to_commands/$leftover_command.info" ]]; then
            commands+=( $leftover_command )
            leftovers=()
          elif [[ -d $parameter ]]; then
            # it's a cell
            succeed
          else
            leftovers+=( $parameter )
          fi
        ;;
      esac
    done
  end_function
  handle_return
}

handle_leftovers() {
  begin_function
    local leftover
    for leftover in "${leftovers[@]}"; do
      if (( help_depth > 0 )); then
        local subs=( $path_to_commands/$leftovers-*.info )
        if [[ "$subs" != *\** ]]; then
          out "Choose a subcommand of $leftover:$NL"
          local sub
          for sub in ${subs[*]}; do
            local command=${sub##*/}
            command=${command%.info}
            commands+=( $command )
          done
          continue
        fi
      fi
      show_usage 
      fail_later1; break 2
    done
  end_function
  handle_return
}

get_commands_and_cells() {
  begin_function

    get_flags || fail

  end_function
  local log_return_vars='cells commands'
  handle_return
}

clean_cell() {
  local cell_path=$1
  local clean_depth=${clean_depth:-1}

  begin_function

    (( clean_depth-- ))
    if (( clean_depth > 0 )) && [[ -d $cell_path/.cyto/up ]]; then
      local upstreams=$(find1 $cell_path/.cyto/up -type d | sort -g)
      local up
      begin_for up in $upstreams; doo
        local up_cell=$up/chosen
        if [[ -d $up_cell ]]; then
          up_cell=$(readlink $up_cell)
          clean_cell $up_cell || fail
        else
          local choices=$(find1 $up/choices -type d | sort -g)
          local choice
          begin_for choice in $choices; doo
            clean_cell $choice || fail
          end_for
        fi
      end_for
    fi

    load_branch_info $cell_path || fail
    get_short_cell
    log_verbose "Cleaning $short_cell..." 

    local clean_file=$cell_path/.dna/clean_op.fun
    if [[ -f $clean_file ]]; then
      local make_or_load=load
      make_or_load_dna_item $clean_file || fail
      clean_op || fail
    fi

    local x
    case $kind in
      all)
        begin_for x in $cell_path/!(.*) $cell_path/.cyto; doo
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
      ;;
      context)
        if [[ -d $cell_path/.cyto ]]; then
          local context_files=$(find1 $cell_path/.cyto -name "context*") || fail
          if [[ "$context_files" ]]; then
            rm $cell_path/.cyto/context* || fail
          fi
        fi
      ;;
      cyto)
        if [[ -e $cell_path/.cyto ]]; then
          rm -rf $cell_path/.cyto || fail
        fi
      ;;
      data)
        begin_for x in $(find1 $cell_path -not -name '.*' -not -name '*:*'); doo
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
        if [[ -f $cell_path/.cyto/status/up-to-date ]]; then
          rm $cell_path/.cyto/status/up-to-date
        fi
      ;;
      branches)
        begin_for x in $(find1 $cell_path -type d -not -name '.*' -name '*:*'); doo
          if [[ "$x" != *:* ]]; then
            continue
          fi
          log_verbose "Removing ${x#$cell_path/}"
          rm -rf $x &>/dev/null
        end_for
        if [[ -f $cell_path/.cyto/status/up-to-date ]]; then
          rm $cell_path/.cyto/status/up-to-date
        fi
      ;;
      *)
        log_fatal "Invalid clean kind ($kind). Must be one of: cyto, data, all"
        fail1
      ;;
    esac

    local inner_path=$cell_path/.cyto/inner
    if [[ $execute_inner != n && -d $inner_path ]]; then
      local inner
      local inners=$(find1 $inner_path -type d -not -name '.*') || fail
      begin_for inner in $inners; doo
        clean_cell $(realpath $inner) || fail
      end_for
    fi
  end_function
  handle_return
}

clean_folder() {
  local folder=$1
  begin_function
    if [[ -e "$folder/.dna" ]]; then
      clean_cell $folder || fail
      begin_for folder in $(find1 $folder -type d -not -name '.*' -name '*:*'); doo
        clean_folder $folder || fail
      end_for
    else
      local folders=$(find1 $folder -type d -not -name '.*') || fail
      begin_for folder in $folders; doo
        clean_folder $folder || fail
      end_for
    fi
  end_function
  handle_return
}

handle_command() {
  local cell_command=$1

  begin_function

      case $cell_command in
        shell)
          export prompt_name='cell shell'
          bash --init-file <(
            cat \
            /etc/profile \
            $SIMPLETON_LIB/bash-lib \
            $SIMPLETON_LIB/omni-log \
            $SIMPLETON_LIB/omni-navigator \
            $SIMPLETON_LIB/bash-debugger \
            $SIMPLETON_LIB/cell-lib \
            $SIMPLETON_LIB/cell-shell-prep \
            )
        ;;
        clean|clean0|clean2)
          if [[ $cell_path == /seed/* ]]; then
            log_fatal "Can't clean seed paths, only work cells"
            fail1
          fi
          get_bottom_cell $cell_path || fail
          if [[ ! "$bottom_cell" ]]; then
            bottom_cell=$cell_path
          fi
          : ${clean_depth:=1} ${kind:=all}
          if [[ $cell_command == clean2 ]]; then
            kind=data
          elif [[ $cell_command == clean0 ]]; then
            kind=context
          fi
          clean_folder $bottom_cell || fail
        ;;
        *)
          get_bottom_cell $cell_path || fail
          if [[ "$bottom_cell" ]]; then
            cell_path=$bottom_cell
          fi

          if [[ ! -d ${job_id_log%/*} ]]; then
            mkdir -p ${job_id_log%/*} || fail
          fi

          local needs_update=${needs_update:-} \
            command_to_log="${original_cmd#* }" \
            top_level_command=t \
            saved_command=$cell_command \
            before_each_command=${before_each_command:-${before_each:-}} \

          if [[ "$before_each_command" ]]; then
            eval "set -x; $before_each_command; set +x"
          fi

          local command_successful=f trunk_cell=
          fork execute_commands $cell_path $cell_command || fail
          if [[ $command_successful == f ]]; then
            log_error "Command failed: $cell_command"
            fail1
          fi
        ;;
      esac

  end_function
  handle_return

}

handle_cell() {
  local cell_path=$1

  begin_function

    local omni_log_job_id job_id_log=${home_job_path:-$HOME/.simpleton/job-log}

    cell_path=$(unrealpath $cell_path) || {
      log_fatal "Invalid cell path: $cell_path"
      fail1
      }

    if [[ ! -d $cell_path/.dna ]]; then
      if [[ $recursive_command == t ]]; then
        local folder folders=$(find1 $cell_path -type d -not -name '.*') || fail
        begin_for folder in $folders; doo
          handle_cell $folder || fail
        end_for
      else
        log_verbose "Skipping $cell_path because it is not a cell"
      fi
    else
      if [[ $multi_cell == f ]]; then
        execute_commands $cell_path ${commands[*]} || fail
      else
        fork execute_commands $cell_path ${commands[*]} || fail
      fi
      first_cell=f
    fi

  end_function
  handle_return
}

reset_flags() {
  trace_var_always=f
  log=info
  show_debug_id=n
  recursive_command=f
}

top_level() {
  local parameters=( "$@" ) \

  begin_function

    local cell_path \
      path_to_commands=$SIMPLETON_REPO/command \
      first_command=t \
      first_cell=t \
      multi_cell=f \
      multi_commands=f \
      clean_cells=${clean_cells:-${clean_cell:-}} \

    if [[ "$clean_cells" ]]; then
      clean_cells=" ${clean_cells} "
    fi

    reset_flags
    get_help_depth_and_flags || fail

    command="$original_cmd" omni_log_init || fail

    local current_parameter_index=0 leftovers=() leftover_command handled=0
    begin_while true; doo

      cells=() \
      commands=() \
      leftovers=() \

      get_cells || fail
      get_commands || fail
      handle_leftovers || fail
      if (( help_depth > 0 )); then
        commands=( help )
      fi

      if (( ${#commands[*]} > 1 )); then
        multi_commands=t
      fi

      if (( ${#cells[*]} > 1 )); then
        multi_cell=t
      fi

      if [[ ! "${cells:-}" ]]; then
        if [[ ! "${commands:-}" && ! "${parameter_questions:-}" || $help_depth -gt 0 ]]; then
          if (( handled == 0 )); then
            show_usage
            fail1
          else
            # nothing else to do
            succeed
          fi
        fi
        cells=( . )
      fi

      begin_for cell_path in ${cells[*]}; doo
        handle_cell $cell_path || fail
        (( handled++ ))
      end_for

    end_while

  end_function

  if [[ "${zombie_lap_total:-}" ]]; then
    out "${NL}Performance counters:"
    zombie_lap_summary
  fi

  if [[ $trace_time == t ]]; then
    trace_time_summarize
  fi

  handle_return
}

debugger_init || exit 1
top_level "${real_params[@]}"

