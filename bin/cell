#!/usr/bin/env bash

source $SIMPLETON_LIB/command-prep "$0" "$@" || exit 1

source $SIMPLETON_LIB/lifted-bash || exit 1
source $SIMPLETON_LIB/bash-debugger || exit 1
source $SIMPLETON_LIB/bash-lib || exit 1
source $SIMPLETON_LIB/omni-log || exit 1
source $SIMPLETON_LIB/omni-navigator || exit 1
source $SIMPLETON_LIB/cell-lib || exit 1
source $SIMPLETON_LIB/help-lib || exit 1
source $SIMPLETON_LIB/walk-lib || exit 1
source $SIMPLETON_LIB/clean-lib || exit 1

command_detail=${command_detail:-0}
parameters_to_env "$@"
if [[ "${real_params:-}" ]]; then
  set -- "${real_params[@]}"; shift
fi
autorepair_level=${autorepair_level:-${repair:-1}}
bash_lifted_init || exit 1
cell_lib_init || exit 1

help_depth=0
recursive_command=${recursive_command:-${recursive:-f}}

show_flag_usage() {
  out "Flags are shortcuts for longer settings, and only the following are defined:"
  out "  Flag   Equivalent setting"
  out "  ------ -----------------------------"
  out "  -d     debug flags: same as -vvi (debug logs + show debug ids)"
  out "  -f     refresh=t (force refresh)"
  out "  -g     grip++ (increase debug checkpoints, slowing down execution but making it easier to debug)"
  out "  -i     show_debug_id=t (if used twice, show_debug_id=a)"
  out "  -l     less detail: command_detail-- (command_detail defaults to 0)"
  out "  -m     more detail: command_detail++ (can use this twice to get the most detail)"
  out "  -q     less logs. Can be used repeatedly. Without this, log=info, -q = warn, -qq = error, -qqq = fatal"
  out "  -r     apply command recusively. Only used by status for now."
  out "  -R     replay=t"
  out "  -s     trace_structure=t"
  out "  -t     out_form=table (used for get command)"
  out "  -T     show_time=t"
  out "  -v     more logs. Can be used repeatedly. Without this, log=info, -v = verbose, -vv = debug, -vvv = trace"
  out "  -x     debug_on_exit=t"
}

handle_flag() {
  local flags=${1#-} flag

  while [[ "$flags" ]]; do
    flag=${flags:0:1}
    flags=${flags#?}
    case $flag in
      \?)
        show_flag_usage
        exit 100
        ;;
      d)
        show_debug_id=t
        log=debug
        ;;
      f)
        fresh=0
        ;;
      g)
        (( grip /= 10 )) || true
        ;;
      i)
        if [[ "${show_debug_id:-f}" != f ]]; then
          show_debug_id=a
        else
          show_debug_id=t
        fi
        ;;
      l)
        (( command_detail-- )) || true
        ;;
      m)
        (( command_detail++ )) || true
        ;;
      q)
        case "${log:-}" in
          '')
            log=warn
          ;;
          warn)
            log=error
          ;;
          error)
            log=fatal
          ;;
        esac
        ;;
      R)
        replay=t
        ;;
      r)
        recursive_command=t
        ;;
      s)
        trace_structure=t
        ;;
      t)
        out_form=table
        ;;
      T)
        show_time=t
        ;;
      v)
        case "${log:-}" in
          '')
            log=verbose
          ;;
          verbose)
            log=debug
          ;;
          debug)
            log=trace
            trace_structure=t
          ;;
        esac
        ;;
      x)
        debug_on_exit=t
        ;;
      *)
        log_fatal "Unknown flag: $flag"
        show_flag_usage
        return 1
        ;;
    esac
  done
}

show_usage() {
  begin_function
    local indent=${indent:-0}
    out "Usage: ${0##*/} ({cells..} {commands..}).."

    (( indent += 2 ))
    local d=
    d+="Parameters are cells followed by commands to be run on those cells. "
    d+="Any number of cell/command combinations can be given, which will be executed sequentially. "
    d+="If two cells are given in a row with no command in between, the commands following the last "
    d+="cell will be applied to all of the cells preceeding them. "
    d+="key=value parameters may be put anywhere in the parameter list and will apply to all commands. "
    d+="This also applies to flag shortcuts. "
    d+="If no cell path is specified, the cell path is taken from the current folder. "
    d+="If help or -h or --help or ? is given as any of the parameters, "
    d+="documentation for the given cells or commands is printed instead of executing commands. "
    d+="If ?? is given, more verbose help will be given if available. "
    d+="key=? form can be used to get documentation about a specific variable/key/dimension. "
    d+="-? can be used to get documentation for flags which are shortcuts of normal key parameters. "
    d+="Soft interrupt feature: While a command is executing, you may press enter to pause execution. "
    d+="$NL$NL"
    d+="Use \`cell . help\` to see help specific to the current cell (you can replace . with any cell name also)."
    echo "$d" | fold -s -w $((COLUMNS-2)) | indent $indent

    (( indent -= 2 ))
    out "${NL}Possible Commands:"
    (( indent += 2 ))
    local command_info command_name infos
    infos=$(find1 $path_to_commands -name '*.info' -not -name 'all.info' | sort -g) || fail
    {
      begin_for command_info in $infos; doo
        command_name=${command_info%.info}
        command_name=${command_name##*/}
        source $command_info || fail
        if [[ "$command_description" ]]; then
          local short_desc=$command_description
          trim_ws short_desc
          short_desc=${short_desc%%$NL*}
          echo "$command_name $short_desc"
        else
          echo "$command_name Please add a description to this command in $cell_command"
        fi
      end_for
    } | column -l 2 -t | indent $indent

    if [[ "${command_aliases:-}" ]]; then
      local i
      (( indent -= 2 ))
      out "${NL}Command aliases (may be used as shortcuts of the given commands):"
      (( indent += 2 ))
      {
        echo "ALIAS SUBSTITUTED-FOR"
        begin_for (( i = 0; i < ${#command_aliases[*]}; i++ )); doo
          echo "${command_aliases[$i]} ${command_alias_command[$i]}"
        end_for
      } | column -l 2 -t | indent $indent
    fi

  end_function
  handle_return
}

get_help_depth_and_flags() {
  begin_function
    for parameter in ${parameters[*]}; do
      case $parameter in
        help|--help|-h|\?)
          (( help_depth++ )) 
        ;;
        -*)
          handle_flag $parameter || fail
        ;;
        \?\?)
          (( help_depth += 2 )) 
        ;;
      esac
    done
  end_function
  if (( help_depth >= 2 )); then
    (( command_detail++ ))
  fi
  debug_return_vars=help_depth
  handle_return
}

is_command() {
  local parameter=$1
  [[ -f "$path_to_commands/$parameter.info" ]] \
  || array_contains command_aliases $parameter \
  || wild_file_exists $path_to_commands/$parameter-*.info
}

get_cells() {
  begin_function
    for (( ; current_parameter_index < ${#parameters[*]}; current_parameter_index++ )); do
      local parameter=${parameters[$current_parameter_index]}
      case $parameter in
        help|-*|\?|\?\?)
          :
        ;;
        *)
          if is_command $parameter; then
            abort
          elif [[ -d $parameter ]]; then
            cells+=( $parameter )
          else
            log_fatal "Not a command or cell: $parameter"
            fail1
          fi
        ;;
      esac
    done
  end_function
  handle_return
}

get_commands() {
  begin_function
    for (( ; current_parameter_index < ${#parameters[*]}; current_parameter_index++ )); do
      local parameter=${parameters[$current_parameter_index]}
      case $parameter in
        help|-*|\?|\?\?)
          :
        ;;
        *)
          leftover_command=
          if [[ "${leftovers:-}" ]]; then
            leftover_command=${leftovers[*]}
            leftover_command=${leftover_command// /-}-$parameter
          fi

          if [[ -f "$path_to_commands/$parameter.info" ]]; then
            cell_commands+=( $parameter )
          elif array_contains command_aliases $parameter; then
            cell_commands+=( $parameter )
          elif [[ -f "$path_to_commands/$leftover_command.info" ]]; then
            cell_commands+=( $leftover_command )
            leftovers=()
          elif ! is_command $parameter && [[ -d $parameter ]]; then
            # it's a cell
            abort
          else
            leftovers+=( $parameter )
          fi
        ;;
      esac
    done
  end_function
  handle_return
}

handle_leftovers() {
  begin_function
    local leftover
    for leftover in "${leftovers[@]}"; do
      if (( help_depth > 0 )); then
        local subs=( $path_to_commands/$leftovers-*.info )
        if [[ "$subs" != *\** ]]; then
          out "Choose a subcommand of $leftover:$NL"
          local sub
          for sub in ${subs[*]}; do
            local cell_command=${sub##*/}
            cell_command=${cell_command%.info}
            cell_commands+=( $cell_command )
          done
          continue
        fi
      fi
      show_usage 
      fail_later1; break 2
    done
  end_function
  handle_return
}

handle_questions() {
  local error_if_unresolved=${error_if_unresolved:-f}
  begin_function
    local remaining= name
    if [[ "${parameter_questions:-}" ]]; then
      for name in $parameter_questions; do
        local found_help=f
        show_parameter_help_single || fail
        if [[ $found_help == f ]]; then
          remaining+="$name "
        fi
      done
      if [[ "$remaining" ]]; then
        if [[ $error_if_unresolved == t ]]; then
          log_error "Unknown parameter(s): $remaining"
          fail1
        else
          parameter_questions="${remaining% }"
        fi
      else
        succeed
      fi
    fi
  end_function
  handle_return
}

handle_cell() {
  local cell_path=$1

  local log_show_vars='^cell_path'
  begin_function

    local omni_log_job_id job_id_log=${home_job_path:-$HOME/.simpleton/job-log}

    if [[ -e "$cell_path" ]]; then
      cell_path=$(unrealpath $cell_path) || {
        log_fatal "Invalid cell path: $cell_path"
        fail1
        }
    fi

    if (( ${#cell_commands[*]} > 0 )); then
      if [[ $multi_cell == f ]]; then
        execute_commands $cell_path ${cell_commands[*]} || fail
      else
        fork execute_commands $cell_path ${cell_commands[*]} || fail
      fi
    elif [[ ! "${parameter_questions:-}" ]]; then
      show_cell_help $cell_path || fail
    else # parameter_questions
      show_parameters_help || fail
    fi
    first_cell=f

  end_function
  handle_return
}

reset_flags() {
  trace_var_always=${trace_var_always:-f}
  log=${log:-}
  show_debug_id=${show_debug_id:-f}
}

top_level() {
  local parameters=( "$@" ) \

  begin_function

    local cell_path \
      path_to_commands=$SIMPLETON_REPO/command \
      first_command=t \
      first_cell=t \
      multi_cell=f \
      multi_commands=f \
      clean_cells=${clean_cells:-${clean_cell:-${clean:-}}} \

    reset_flags
    get_help_depth_and_flags || fail

    omni_log_init $original_cmd || fail

    local current_parameter_index=0 leftovers=() leftover_command handled=0
    begin_while true; doo

      cells=() \
      cell_commands=() \
      leftovers=() \

      if [[ -e $path_to_commands/all.info ]]; then
        source $path_to_commands/all.info || fail
      fi
      handle_questions || fail
      get_cells || fail
      get_commands || fail
      handle_leftovers || fail

      if (( ${#cell_commands[*]} > 1 )); then
        multi_commands=t
      fi

      if (( ${#cells[*]} > 1 )); then
        multi_cell=t
      fi

      if [[ ! "${cells:-}" ]]; then
        if [[ ! "${cell_commands:-}" && ! "${parameter_questions:-}" ]]; then
          if (( handled == 0 )); then
            show_usage
            abort
          else
            # nothing else to do
            abort
          fi
        fi

        local potential_cell=$(realpath .) seed_path=
        if [[ $potential_cell == /seed/* ]]; then
          seed_path=$potential_cell
          potential_cell=/work${potential_cell#/seed}
        fi
        while [[ $potential_cell == */.* && $potential_cell == /*/*/* ]]; do
          potential_cell=${potential_cell%/*}
        done
        if [[ "$seed_path" ]]; then
          while [[ $seed_path == */.* && $seed_path == /seed/*/* ]]; do
            seed_path=${seed_path%/*}
          done
        fi

        cells=( $potential_cell )
      fi

      if [[ "${cell_commands:-}" && ! "${parameter_questions:-}" ]] && (( help_depth > 0 )); then
        local cell_command
        begin_for cell_command in ${cell_commands[*]}; doo
          show_help_for_command $cell_command || fail
        end_for
        abort
      fi

      begin_for cell_path in ${cells[*]}; doo
        handle_cell $cell_path || fail
        (( handled++ ))
      end_for

      if (( current_parameter_index >= ${#parameters[*]} )); then
        abort
      fi

    end_while

  end_function

  if [[ "${zombie_lap_total:-}" ]]; then
    out "${NL}Performance counters:"
    zombie_lap_summary
  fi

  if [[ $trace_time == t ]]; then
    trace_time_summarize
  fi

  handle_return
}

debugger_init || exit 1
top_level "${real_params[@]}"

