#!/bin/bash

set -u
source $SIMPLETON_REPO/lib/pre-bash "$0" "$@" || exit 1
set "${real_params[@]}"; shift

optional_var trace           5             # 0 means no tracing output, higher numbers increases verbosity of tracing

source $SIMPLETON_REPO/lib/post-bash || exit 1
source $SIMPLETON_REPO/lib/bash-debugger || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1

called_from=cli

handle_command() {

local command=${1:-help}; shift
local parameters=( "$@" )
trace $log_trace "Handling cell command $command"

begin_function_flat

  case $command in 
    get)
      load_subjects || fail
      begin_for subject in "${subjects[@]}"; doo
        focus_on $subject || fail
        make_request $subject || fail
        maybe_update $subject ${extra:-} || fail
        show_value $subject || fail
      end_for
      ;;
    up|update)
      load_subjects || fail
      local delayed_requests=0
      begin_for subject in "${subjects[@]}"; doo
        focus_on $subject || fail
        make_request $subject || fail
        maybe_update $subject ${extra:-} || fail
      end_for
      ;;
    fix)
      require_valid_subjects=f load_subjects || fail
      begin_for subject in "${subjects[@]}"; doo
        fix_cube $subject ${extra:-} || fail
      end_for
      ;;
    low)
      handle_low_command "$@" || fail
      ;;
    *)
      if [[ $command != help && $command != ? ]]; then
        err "Unknown command: $command"
      fi
      show_cell_usage
      fail1
      ;;
  esac
end_function_flat
handle_return
}

handle_low_command() {
local command=${1:-help}; shift 
local parameters=( "$@" )
case $command in 
  update-local)
    load_subjects || return 1
    begin_for subject in "${subjects[@]}"; doo
      focus_on $subject || return 1
      setup_batch_path_vars || return 1
      batch_execute_update || return 1
    end_for
    ;;
  req|request)
    load_subjects || return 1
    begin_for subject in "${subjects[@]}"; doo
      make_request $subject ${extra:-} || return 1
    end_for
    ;;
  *)
    if [[ $command != help && $command != ? ]]; then
      err "Unknown command: $command"
    fi
    show_low_cell_usage
    return 1
    ;;
esac
}

load_subjects() {
subjects=()
local subject require_valid_subjects=${require_valid_subjects:-t}
for subject in "${parameters[@]}"; do
  subject=$(realpath "$subject")
  if [[ $require_valid_subjects == t && ! -d "$subject" ]]; then
    err "Subject does not exist or is not a folder: $subject"
    exit 1
  fi
  subjects+=( "$subject" )
done

if [[ ! "${subjects:-}" ]]; then
  subjects=( $PWD )
fi
}

show_cell_usage() {
warn "Usage: ${0##*/} {command} [{cells}]"
warn "  commands:"
warn "    fix       fix broken cell (or create a cell from a folder)"
warn "    get       shows current value(s) of the given cell(s)"
warn "    low       run a low level command"
warn "    update    update cells"
return 0
}

show_low_cell_usage() {
warn "Usage: ${0##*/} low {command} [{cells}]"
warn "  commands:"
warn "    req       make a new request for an update"
return 0
}

handle_command "$@"

