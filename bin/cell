#!/usr/bin/env bash

source $SIMPLETON_REPO/lib/command-prep "$0" "$@" || exit 1

source $SIMPLETON_REPO/lib/bash-debugger || exit 1
source $SIMPLETON_REPO/lib/omni-log-aliases || exit 1
source $SIMPLETON_REPO/lib/bash-lib || exit 1
source $SIMPLETON_REPO/lib/omni-log || exit 1
source $SIMPLETON_REPO/lib/omni-navigator || exit 1
source $SIMPLETON_REPO/lib/cell-lib || exit 1

parameters_to_env "$@"
set "${real_params[@]}"; shift
cell_lib_init || exit 1

scan_commands() {
  begin_function
    local parameter leftovers=() leftover_command
    begin_for parameter in ${parameters[*]}; doo
      case $parameter in
        help|--help|-h|\?)
          help_mode=t
        ;;
        *)
          leftover_command=
          if [[ "${leftovers:-}" ]]; then
            leftover_command=${leftovers[*]}
            leftover_command=${leftover_command// /-}-$parameter
          fi

          if [[ $parameter != */* && -f "$path_to_commands/$parameter.info" ]]; then
            commands+=( $parameter )
          elif [[ $parameter != */* && -f "$path_to_commands/$leftover_command.info" ]]; then
            commands+=( $leftover_command )
            leftovers=()
          elif [[ -e $parameter/.dna ]]; then
            cells+=( $parameter )
          # elif [[ -e $PWD/$parameter/.dna ]]; then
          #   cells+=( $PWD/$parameter )
          else
            local r=$(realpath $parameter) 
            #local bottom_cell=
            #get_bottom_cell $r
            #if [[ "$bottom_cell" ]]; then
            #  cells+=( $bottom_cell )
            #else
              leftovers+=( $parameter )
            #fi
          fi
        ;;
      esac
    end_for
    local leftover
    begin_for leftover in "${leftovers[@]}"; doo
      if [[ $help_mode == t ]]; then
        local subs=( $path_to_commands/$leftovers-*.info )
        if [[ "$subs" != *\** ]]; then
          out "Choose a subcommand of $leftover:$NL"
          local sub
          begin_for sub in ${subs[*]}; doo
            local command=${sub##*/}
            command=${command%.info}
            commands+=( $command )
          end_for
          continue
        fi
      fi
      if [[ -d "$leftover" ]]; then
        local bottom_cell=
        leftover=$(unrealpath $leftover)
        get_bottom_cell $leftover
        if [[ "$bottom_cell" ]]; then
          cells+=( $bottom_cell )
          continue
        else
          log_fatal "Not a valid cell: $leftover"
        fi
      else
        log_fatal "Unidentified command: $leftover"
      fi
      show_usage 
      fail1
    end_for
  end_function
  local log_return_vars='cells commands'
  handle_return
}

show_help_for_command() {
  local command=$1
  begin_function
    [[ $first_command == f ]] && out ''
    out "Command: ${command//-/ }"
    if [[ -f $path_to_commands/$command.info ]]; then
      source $path_to_commands/$command.info || fail
      indent=2 out_wrap "$command_description"
      local name description default default_string choices_string i choices
      if [[ "${parameter_names:-}" ]]; then
        out "Parameters:"
        begin_for ((i=0; i<${#parameter_names[*]}; i++)); doo
          parameter="${parameter_names[$i]}"
          description="${parameter_descriptions[$i]}"
          choices="${parameter_choices[$i]}"
          trim_ws description
          default="${parameter_defaults[$i]}"
          default_string=
          choices_string=
          [[ "$choices" ]] && choices_string="$NL    choices: $choices"
          [[ "$default" ]] && default_string="$NL    default: $default"
          out "  $parameter: $description$choices_string$default_string"
        end_for
      fi
    fi
  end_function
  handle_return
}

handle_command() {
  local command=$1

  begin_function

      case $command in
        shell)
          export prompt_name='cell shell'
          bash --init-file <(
            cat \
            /etc/profile \
            $SIMPLETON_REPO/lib/bash-lib \
            $SIMPLETON_REPO/lib/omni-log \
            $SIMPLETON_REPO/lib/omni-navigator \
            $SIMPLETON_REPO/lib/bash-debugger \
            $SIMPLETON_REPO/lib/cell-lib \
            $SIMPLETON_REPO/lib/cell-shell-prep \
            )
        ;;
        clean)
          get_bottom_cell $cell_path || fail
          if [[ ! "$bottom_cell" ]]; then
            log_fatal "Not a valid cell: $cell_path"
            fail1
          fi
          local cell_path=$bottom_cell
          log_info "Cleaning $cell_path..." 
          local clean_file=$cell_path/.dna/op/clean.bash
          if [[ -f $clean_file ]]; then
            source $clean_file || fail
            clean || fail
          else
            local x

            begin_for x in $cell_path/!(*.dna); doo
              log_info "Removing ${x#$cell_path/}"
              rm -rf $x &>/dev/null
            end_for

            log_info "Cleaned."
          fi
        ;;
        *)
          get_bottom_cell $cell_path || fail
          if [[ "$bottom_cell" ]]; then
            cell_path=$bottom_cell
          fi
          local omni_log_job_id job_id_log=${home_job_path:-$HOME/.simpleton/job-log}

          if [[ ! -d ${job_id_log%/*} ]]; then
            mkdir -p ${job_id_log%/*} || fail
          fi

          local needs_update=${needs_update:-} \
            command_to_log="${original_cmd#* }" \
            top_level_command=t \
            saved_command=$command

          local command_successful=f
          execute_command $cell_path $command || fail
          if [[ $command_successful == f ]]; then
            log_error "Command failed: $command"
            fail1
          fi
        ;;
      esac

  end_function
  handle_return

}

handle_cell() {
  local cell_path=$1

  begin_function

    cell_path=$(unrealpath $cell_path) || {
      log_fatal "Failed to resolve path for $cell_path"
      fail1
      }

    local next
    if (( ${#commands[*]} == 0 )); then
      show_cell_help $cell_path || fail
    else
      begin_for command in ${commands[*]}; doo
        if [[ $help_mode == t ]]; then
          show_help_for_command $command || fail
        else
          handle_command $command || fail
        fi
        first_command=f
      end_for
    fi

  end_function
  handle_return
}

top_level() {
  local parameters=( "$@" ) \

  begin_function

    command="$original_cmd" omni_log_init || fail

    local help_mode=f \
      cell_path \
      path_to_commands=$SIMPLETON_REPO/command \
      first_command=t \
      multi_cell=f \
      commands=() \

    if [[ "${cells:-}" ]]; then
      cells=( $cells )
    elif [[ "${cell:-}" ]]; then
      cells=( $cell )
    fi

    scan_commands || fail

    if [[ ! "${cells:-}" && ! "${commands:-}" ]]; then
      help_mode=t 
    fi

    if [[ ! "${cells:-}" ]]; then
      if [[ $help_mode == t && ! "${commands:-}" ]]; then
        show_usage
        succeed
      else
        cells=( . )
      fi
    fi

    if (( ${#cells[*]} > 1 )); then
      multi_cell=t
    fi

    begin_for cell_path in ${cells[*]}; doo
      handle_cell $cell_path || fail
    end_for

  end_function
  handle_return
}

show_dimensions() {
  local dims=( $* ) dim dim_type=$dim_type description values 
  begin_function
    begin_for dim in ${dims[*]}; doo
      if [[ -v ${dim_type}_${dim}_description ]]; then
        eval "description=\$${dim_type}_${dim}_description" || fail
      else
        description='No description'
      fi
      out "  $dim: $description"
      if function_exists ${dim_type}_${dim}_expand; then
        values=

        local problem= 

        eval "value=all ${dim_type}_${dim}_expand" &>/dev/null
        if [[ ! "$problem" ]]; then
          out "    choices: ${values[*]}"
        fi

        eval "value= ${dim_type}_${dim}_expand" &>/dev/null || is_required=t
        if [[ "$problem" ]]; then
          required+=( $dim )
        else
          if [[ "${values:-}" ]]; then
            if [[ "$values" == $empty_member ]]; then
              out "    default: (empty)"
            else
              out "    default: ${values[*]}"
            fi
          else
            out "    optional"
          fi
        fi

        if [[ -v ${dim_type}_${dim}_examples ]]; then
          eval "local examples=( \"\${${dim_type}_${dim}_examples[@]}\" )"
          local example_count=${#examples[*]} i index_string=
          begin_for ((i=0; i<example_count; i++)); doo
            if [[ example_count -gt 1 ]]; then
              index_string=" #$((i+1))"
            fi
            out "    example$index_string: ${examples[$i]}"
          end_for
        fi

        if [[ -v ${dim_type}_${dim}_aliases ]]; then
          eval "local aliases=( \"\${${dim_type}_${dim}_aliases[@]}\" )"
          local full_alias
          begin_for full_alias in "${aliases[@]}"; doo
            out "    alias: ${full_alias/ / -> }"
          end_for
        fi

      fi
    end_for
  end_function
  handle_return
}

show_cell_help() {
  local cell_path=$1
  begin_function

    # get_bottom_cell $cell_path || {
    #   log_fatal "No cell found here: $cell_path"
    #   fail1
    #   }
    # local cell_path=$bottom_cell
    can_create_cyto=f
    switch_context || fail
    if [[ $multi_cell == t ]]; then
      out "$hbar_equals"
    fi

    out "Cell: $short_cell"
    if [[ "${cell_description:-}" ]]; then
      out "  $cell_description"
    else
      out "  No description for this cell. Set cell_description variable in context file."
    fi

    local required=()

    if [[ "${leaf_dims:-}" ]]; then
      out "${NL}Dimensions:"
      dim_type=trunk_dims \
      show_dimensions ${leaf_dims[*]} || fail
    fi

    if [[ "${sub_dims:-}" || "${props:-}" ]]; then
      out "${NL}Other parameters:"
      if [[ "${sub_dims:-}" ]]; then
        dim_type=sub_dims \
        show_dimensions ${sub_dims[*]} || fail
      fi
      if [[ "${props:-}" ]]; then
        dim_type=props \
        show_dimensions ${props[*]} || fail
      fi
    fi

    if [[ "${required:-}" ]]; then
      out "${NL}Required parameters: ${required[*]}"
    fi

  end_function
  handle_return
}

show_usage() {
  begin_function
    out "Usage: ${0##*/} {any combinations of commands and cell paths}"

    local d
    d="The given commands are executed on each of the given cells in order. "
    d+="If no cell path is specified, the cell path is taken from the current folder. "
    d+="If help or -h or --help or ? is given as any of the parameters, "
    d+="documentation for the given cells or commands is printed instead of executing commands. "
    d+="$NL$NL"
    d+="Use \`cell . help\` to see help specific to the current cell (you can replace . with any cell name also)."
    echo "$d" | fold -s -w $((COLUMNS-1)) | indent

    out "${NL}Possible Commands:"
    local command_info command_name
    begin_for command_info in $(find1 $path_to_commands -name '*.info' | sort); doo
      command_name=${command_info%.info}
      command_name=${command_name##*/}
      source $command_info || fail
      if [[ "$command_description" ]]; then
        local short_desc=$command_description
        trim_ws short_desc
        short_desc=${short_desc%%$NL*}
        out "  $command_name $COL20$short_desc"
      else
        out "  $command_name ${COL20}Please add a description to this command in $command"
      fi
    end_for
  end_function
  handle_return
}

debugger_init || exit 1
top_level "${real_params[@]}"

